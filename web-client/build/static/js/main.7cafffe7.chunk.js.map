{"version":3,"sources":["components/Sidebar.js","components/AccountDetails.js","home.svg","components/Login.js","components/AddUser.js","components/ResetPassword.js","components/Admin.js","components/ColumnsTH.js","components/GlobalFilter.js","components/CheckBox.js","components/TestsCards.js","components/AllTestsOverview.js","components/AllTestsBin.js","components/MyTestsOverview.js","components/MyTestsBin.js","components/TestHistoryNEW.js","components/ColsPrimaryReagents.js","components/AddReagent.js","components/PrReagentsCards.js","components/EditReagent.js","components/PrimaryReagentsOverview.js","components/PrimaryReagentsRecent.js","components/PrimaryReagentsBin.js","components/ColsSecReagents.js","components/EditSecReagent.js","components/SecReagentsCards.js","components/SecReagentsOverview.js","components/SecReagentsRecent.js","components/SecReagentsBin.js","components/InventoryNEW.js","components/AssayTypes.js","redux/ActionTypes.js","shared/baseURL.js","redux/testTypes.js","redux/ActionCreators.js","components/Main.js","redux/auth.js","redux/users.js","redux/reagents.js","redux/secondaryReagents.js","redux/tests.js","App.js","redux/ConfigureStore.js","reportWebVitals.js","index.js"],"names":["Sidebar","props","className","href","JSON","parse","localStorage","getItem","supervisor","id","onClick","logoutUser","required","value","undefined","minLength","length","containsNumber","test","composeValidators","validators","reduce","error","validator","AccountDetails","editPassword","setState","handleSubmit","values","a","putUser","_id","confirmPassword","alert","state","pageWrapId","outerContainerId","this","style","firstName","substring","lastName","auth","user","username","onSubmit","render","newPassword","submitting","form","pristine","name","validate","input","meta","type","placeholder","submitFailed","disabled","Component","Login","from","useLocation","pathname","useState","redirectToReferrer","setRedirectToReferrer","fetchReagents","fetchDeletedReagents","fetchSecReagents","fetchDeletedSecReagents","fetchTests","fetchTestTypes","checkJWTToken","admin","fetchUsers","to","isAuthenticated","loginUser","password","component","touched","errMess","src","HomeImage","height","width","alt","emailRe","AddUser","role","postUser","handleModalClose","Modal","show","isModalOpen","onHide","Header","closeButton","Body","userRole","defaultValue","selected","split","class","getRegisteredFields","map","field","resetFieldState","ResetPassword","selectedUser","Admin","showDeleted","deactivated","setItem","usersRenderList","users","filter","status","handleChange","e","usersCopy","slice","includes","target","changeUserRole","updatedUser","deleteUser","reActivateUser","handleAddUserModalShow","isAddUserModalOpen","handleAddUserModalClose","handlePasswordModalShow","isPasswordModalOpen","handlePasswordModalClose","isLoading","faSignOutAlt","icon","size","rotation","faSearch","onChange","checkedIcon","uncheckedIcon","offColor","onColor","checked","faPlus","faTrash","handleModalShow","handleModalOpen","COLUMNS","Cell","row","getToggleRowExpandedProps","isExpanded","accessor","format","Date","GlobalFilter","setFilter","Checkbox","React","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","TestsCards","testValues","reagents","reagent","label","lotNr","reagentData","other","otherData","equipment","index","String","eqptNr","AllTestsOverview","columns","useMemo","tests","data","tableInstance","useTable","initialState","sortBy","desc","groupBy","hiddenColumns","useGlobalFilter","useSortBy","useExpanded","useRowSelect","hooks","visibleColumns","push","getToggleAllRowsSelectedProps","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setGlobalFilter","selectedFlatRows","globalFilter","deleteRows","forEach","update","original","putTest","renderRowSubComponent","useCallback","testsLoading","color","timeout","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","i","Fragment","getRowProps","cells","cell","getCellProps","colSpan","AllTestsBin","deletedTests","undoDelete","faUndo","MyTestsOverview","myTests","MyTestsBin","myDeletedTests","TestHistoryNEW","currentPath","window","location","splice","join","path","testsErrMess","deleteTest","renderTable","subRows","aggregate","topValue","canGroupBy","disableSortBy","leafValues","AddReagent","expiryDate","toISOString","dateReceived","times","Number","unit","postReagent","reagentName","supplier","catNr","storageLocation","nextProps","selectedRow","isSidebarOpen","initialValues","onSidebarToggle","min","PrReagentsCards","reagentValues","firstUsedBy","receivedBy","lastEditedBy","discardedBy","condition","action","comment","dateOfFirstUse","EditReagent","updatedReagent","putReagent","assayName","PrimaryReagents","autoResetExpanded","autoResetSelectedRows","useGroupBy","groupByBoundary","toggleAllRowsExpanded","isAllRowsExpanded","toggleRowExpanded","setSidebarState","setModalState","toggleSidebar","disposeReagents","downloadQR","document","getElementById","display","elemId","elem","html2canvas","then","canvas","pngUrl","toDataURL","replace","downloadLink","createElement","download","body","appendChild","click","removeChild","reagentsLoading","faFolderPlus","faPencilAlt","faTimes","faDownload","canSort","isGrouped","isAggregated","isPlaceholder","key","level","includeMargin","resetAddReagentForm","changeAddReagentForm","PrimaryReagentsRecent","PrimaryReagentsBin","deletedReagents","EditSecReagent","putSecReagent","SecReagentsCards","createdBy","SecReagentsOverview","secReagents","secReagentsLoading","SecReagentsRecent","fontSize","stringify","SecReagentsBin","deletedSecReagents","InventoryNEW","reagentsErrMess","deleteReagent","secReagentsErrMess","deleteSecReagent","mapping","RenderAssay","Card","assayType","Title","deleteTestType","metadata","children","reagentDataInput","otherInput","AssayTypes","newAssayType","reagentChildren","inputField","toLowerCase","reagentDataChildren","otherDataChildren","postTestType","childRef","createRef","assayTypes","testTypes","dateSeries","monthCounter","createdAt","sort","date","Set","prevState","console","log","mutators","arrayMutators","pop","faMinus","fields","remove","cursor","Accordion","defaultActiveKey","Toggle","as","variant","eventKey","Collapse","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","RENDER_USERS","USERS_LOADING","USERS_FAILED","ADD_USER","UPDATE_USER","RENDER_REAGENTS","RENDER_DELETED_REAGENTS","REAGENTS_LOADING","REAGENTS_FAILED","ADD_REAGENT","UPDATE_REAGENT","REMOVE_REAGENT","RENDER_SEC_REAGENTS","RENDER_DELETED_SEC_REAGENTS","SEC_REAGENTS_LOADING","SEC_REAGENTS_FAILED","UPDATE_SEC_REAGENT","REMOVE_SEC_REAGENT","RENDER_TESTS","TESTS_LOADING","TESTS_FAILED","UPDATE_TEST","REMOVE_TEST","RENDER_TESTTYPES","TESTTYPES_LOADING","TESTTYPES_FAILED","ADD_TESTTYPE","UPDATE_TESTTYPE","REMOVE_TESTTYPE","baseUrl","TestTypes","ActionTypes","payload","testType","concat","item","requestLogin","userData","receiveLogin","response","token","loginError","message","requestLogout","receiveLogout","renderUsers","usersFailed","errmess","addUser","updateUser","renderReagents","renderDeletedReagents","reagentsFailed","addReagent","updateReagent","removeReagent","renderSecReagents","renderSecDeletedReagents","secReagentsFailed","updateSecReagent","secReagent","removeSecReagent","renderTests","testsFailed","updateTest","updatedTest","removeTest","renderTestTypes","addTestType","removeTestType","Main","InventoryPage","TestHistoryPage","entry","conductedByUsername","PrivateRoute","ProtectedRoute","AdminRoute","exact","testTypesErrMess","usersErrMess","withRouter","connect","deleteReagents","dispatch","bearer","fetch","json","success","Error","removeItem","err","catch","creds","method","ok","statusText","setpassword","credentials","reagent_id","newReagent","deleted","updatedSecReagent","secReagent_id","test_id","newTestType","testType_id","Auth","Users","foundIndex","findIndex","Reagents","reagentsCopy","deletedReagentsCopy","SecReagents","secReagentsCopy","deletedSecReagentsCopy","Tests","store","createStore","combineReducers","applyMiddleware","thunk","logger","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM"],"mappings":"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","file":"static/js/main.7cafffe7.chunk.js","sourcesContent":["import React from 'react';\nimport { slide as Menu } from 'react-burger-menu';\nimport { ImLab } from \"react-icons/im\";\nimport { RiHistoryLine, RiTestTubeLine, RiAccountBoxLine } from \"react-icons/ri\";\nimport { MdCreateNewFolder } from \"react-icons/md\";\n\nfunction Sidebar(props) {\n  return (\n    <Menu>\n      <a className=\"menu-item\" href=\"/inventory/primary-reagents/overview\">\n        <span><RiTestTubeLine/>&nbsp;&nbsp;Inventory</span>\n      </a>\n      <a className=\"menu-item\" href=\"/testhistory/all-tests/overview\">\n      <span><RiHistoryLine/>&nbsp;&nbsp;Test History</span>\n      </a>\n      {JSON.parse(localStorage.getItem('userData')).supervisor ? \n        <a className=\"menu-item\" href=\"/assays\">\n          <span><MdCreateNewFolder/>&nbsp;&nbsp;Assays</span>\n        </a> :\n        null}\n      <a className=\"menu-item\" href=\"/account\">\n      <span><RiAccountBoxLine/>&nbsp;&nbsp;Account</span>\n      </a>\n      <a id=\"signout-link\" className=\"menu-item\" href=\"/\" onClick={props.logoutUser}>\n        Sign Out\n      </a>\n    </Menu>\n  );\n};\n\nexport default Sidebar;","import React, { Component } from 'react';\nimport { Form, Field } from 'react-final-form';\nimport Sidebar from './Sidebar';\n\nconst required = value => (value ? undefined : 'Required')\nconst minLength = value => (value.length >= 8 ? undefined : 'Password must be at least 8 characters')\nconst containsNumber = value => (/\\d/.test(value) ? undefined : 'Password must contain at least one number')\nconst matchesOldPassword = oldPassword => value => ( value == oldPassword ? undefined : 'Does not match old password' )\nconst newPasswordsMatch = newPassword => value => ( value == newPassword ? undefined : 'Passwords do not match' )\nconst composeValidators = (...validators) => value =>\n  validators.reduce((error, validator) => error || validator(value), undefined)\n\nclass AccountDetails extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            editPassword: false\n        }\n    }\n\n    editPassword = () => {\n        this.setState({\n            editPassword: true\n        });\n    }\n\n    handleSubmit = async values => {\n        this.props.putUser({\n            _id: JSON.parse(localStorage.getItem('userData'))._id,\n            \"password\": values.confirmPassword\n        }, true);\n        \n        alert(\"Password Successfully Changed!\")\n    }\n\n    render() {\n        return (\n            <div id=\"page-wrap\" className=\"container-fluid\">         \n                <Sidebar pageWrapId={'page-wrap'} outerContainerId={'outer-container'} logoutUser={this.props.logoutUser} />                               \n                <div className=\"row flex-fill h-100 d-flex\">\n                    <div className=\"col\">\n                        <div style={{\"z-index\":\"10\", \"position\":\"fixed\", \"border-bottom\":\"1px solid #E2E2E4\", \"background-color\": \"white\", \"margin-top\": \"0px\", \"padding\": \"10px\", \"width\":\"110%\"}} className=\"row header\">\n                            <div className=\"col my-auto ml-5\">\n                                <span className=\"menu-header\"> Account Details </span>\n                            </div>\n                        </div>\n                        <div style={{\"border-right\":\"1px solid #E2E2E4\", \"paddingTop\":\"81px\", \"paddingLeft\":\"18px\"}} className=\"row\">\n                            <div className=\"col-12\">\n                                <div className=\"row\">    \n                                    <div>\n                                        <a className=\"account-icon\" href=\"/account\"><span className=\"dot\" style={{\"height\": \"50px\",\n                                                                    \"width\": \"50px\",\n                                                                    \"border\": \"0.5px solid rgba(229, 229, 229, 1)\",\n                                                                    \"background-color\": \"#ffffff\",\n                                                                    \"border-radius\": \"50%\",\n                                                                    \"display\": \"inline-block\",\n                                                                    \"box-shadow\": \"0px 0px 1px 0px #888888\",\n                                                                    \"padding\":\"12px\",\n                                                                    \"margin-right\":\"10px\",\n                                                                    \"color\":\"#432F87\",\n                                                                    \"font-weight\":\"600\"\n                                                                    }}>\n                                                {JSON.parse(localStorage.getItem('userData')).firstName.substring(0,1)\n                                                                + JSON.parse(localStorage.getItem('userData')).lastName.substring(0,1)}\n                                        </span></a>\n                                    </div>\n                                    <div>\n                                        <a style={{\"color\":\"black\"}} href=\"/account\"><span style={{\"display\":\"block\", \"fontWeight\":\"600\", \"color\":\"#432F87\"}}>{this.props.auth.user.firstName + ' ' + this.props.auth.user.lastName}</span></a>\n                                        <span>{this.props.auth.user.supervisor ? 'Supervisor Account' : 'Regular Account'}   </span>        \n                                    </div>\n                                </div>\n                                <div style={{\"marginTop\":\"20px\"}} className=\"row\">\n                                    <div style={{\"fontWeight\":\"600\", \"fontSize\":\"18px\", \"color\":\"#432F87\", \"padding\":\"0px\"}} className=\"col-2 col-lg-1\">\n                                        Username\n                                    </div>\n                                    <div style={{\"fontSize\":\"20px\"}} className=\"col\">\n                                        {this.props.auth.user.username}\n                                    </div>\n                                </div>\n                                <div style={{\"marginTop\":\"10px\"}} className=\"row\">\n                                    <div style={{\"fontWeight\":\"600\", \"fontSize\":\"18px\", \"color\":\"#432F87\", \"padding\":\"0px\"}} className=\"col-2 col-lg-1\">\n                                        Password\n                                    </div>\n                                    <div style={{\"fontSize\":\"18px\"}} className=\"col-3 col-md-2 col-xl-1\">\n                                        **********\n                                    </div>\n                                    <div style={{\"fontSize\":\"18px\"}} className=\"col-1 text-center\">\n                                            <button style={{\"backgroundColor\":\"#432F87\", \"border\":\"none\", \"borderRadius\":\"5px\", \"boxShadow\":\"0px 0px 3px 0px grey\", \"color\":\"white\", \"padding\":\"2px 10px 2px 10px\"}} onClick={this.editPassword}>\n                                                Edit\n                                            </button>\n                                    </div>\n                                </div>\n                                {!this.state.editPassword ? <div></div> : (\n                                <Form\n                                    onSubmit={this.handleSubmit}\n                                    render={({ handleSubmit, form, submitting, pristine, values }) => (\n                                        <form onSubmit={handleSubmit}>\n                                        {/* <Field\n                                            name=\"oldPassword\"\n                                            validate={composeValidators(required, matchesOldPassword(this.state.oldPassword))}\n                                        >\n                                            {({ input, meta }) => (\n                                            <div style={{\"marginTop\":\"10px\"}} className=\"row\">\n                                                <div style={{\"fontWeight\":\"600\", \"fontSize\":\"18px\", \"color\":\"#432F87\", \"paddingRight\":\"15px\"}} className=\"col-1\">\n                                                    Old Password\n                                                </div>\n                                                <div className=\"col-11\">\n                                                    <input style={{\"width\":\"230px\", \"border\":\"none\", \"borderRadius\":\"5px\", \"height\":\"30px\", \"boxShadow\":\"0px 0px 3px 0px lightgrey\"}} {...input} type=\"password\" placeholder=\"Old Password\" />\n                                                    {meta.error && meta.touched && <span style={{\"marginLeft\":\"10px\", \"color\":\"red\"}}>{meta.error}</span>}\n                                                </div>\n                                            </div>\n                                            )}\n                                        </Field> */}\n                                        <Field\n                                            name=\"newPassword\"\n                                            validate={composeValidators(required, containsNumber, minLength)}\n                                        >\n                                            {({ input, meta }) => (\n                                            <div style={{\"marginTop\":\"10px\"}} className=\"row\">\n                                                <div style={{\"fontWeight\":\"600\", \"fontSize\":\"18px\", \"color\":\"#432F87\", \"padding\":\"0px\"}} className=\"col-2 col-lg-1\">\n                                                    New Password\n                                                </div>\n                                                <div className=\"col\">\n                                                    <input style={{\"width\":\"230px\", \"border\":\"none\", \"borderRadius\":\"5px\", \"height\":\"30px\", \"boxShadow\":\"0px 0px 3px 0px lightgrey\"}} {...input} type=\"password\" placeholder=\"New Password\" />\n                                                    {meta.error && meta.submitFailed && <span style={{\"marginLeft\":\"10px\", \"color\":\"red\"}} className=\"error\">{meta.error}</span>}\n                                                </div>\n                                            </div>\n                                            )}\n                                        </Field>\n                                        <Field\n                                            name=\"confirmPassword\"\n                                            validate={composeValidators(required, newPasswordsMatch(values.newPassword))}\n                                        >\n                                            {({ input, meta }) => (\n                                            <div style={{\"marginTop\":\"10px\"}} className=\"row\">\n                                                <div style={{\"fontWeight\":\"600\", \"fontSize\":\"18px\", \"color\":\"#432F87\", \"padding\":\"0px\"}} className=\"col-2 col-lg-1\">\n                                                    Confirm\n                                                </div>\n                                                <div className=\"col\">\n                                                    <input style={{\"width\":\"230px\", \"border\":\"none\", \"borderRadius\":\"5px\", \"height\":\"30px\", \"boxShadow\":\"0px 0px 3px 0px lightgrey\"}} {...input} type=\"password\" placeholder=\"Confirm New Password\" />\n                                                    {meta.error && meta.submitFailed && <span style={{\"marginLeft\":\"10px\", \"color\":\"red\"}} className=\"error\">{meta.error}</span>}\n                                                </div>\n                                            </div>\n                                            )}\n                                        </Field>\n                                        <div className=\"mt-3 row\">\n                                            <div style={{\"fontSize\":\"18px\"}} className=\"col offset-2 offset-lg-1\">\n                                                <button style={{\"backgroundColor\":\"#432F87\", \"border\":\"none\", \"borderRadius\":\"5px\", \"boxShadow\":\"0px 0px 3px 0px grey\", \"color\":\"white\", \"padding\":\"2px 10px 2px 10px\"}} type=\"submit\" disabled={submitting}>\n                                                    Save Password\n                                                </button>\n                                            </div>\n                                        </div>\n                                        </form>\n                                    )}\n                                />\n                            )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default AccountDetails","export default __webpack_public_path__ + \"static/media/home.8cbbaa71.svg\";","import React, { useState } from \"react\";\nimport { Redirect, useLocation } from \"react-router-dom\";\nimport { Form, Field } from 'react-final-form';\nimport HomeImage from '../home.svg'\n\nconst required = value => (value ? undefined : 'Required')\n\nexport const Login = (props) => {\n    \n\n    const { state } = useLocation();\n    const { from } = state || { from: { pathname: \"/\" } };\n    const [redirectToReferrer, setRedirectToReferrer] = useState(false);\n\n    const login = () => {\n        setRedirectToReferrer(true);\n    };\n\n    if (redirectToReferrer) {\n        props.fetchReagents();\n        props.fetchDeletedReagents();\n        props.fetchSecReagents();\n        props.fetchDeletedSecReagents();\n        props.fetchTests();\n        props.fetchTestTypes();\n        props.checkJWTToken();\n        \n        var userData = JSON.parse(localStorage.getItem('userData'))\n        if (userData.admin == true) {\n            props.fetchUsers();\n            return <Redirect to='/admin' />;\n        }\n        else {\n            return <Redirect to={from} />;\n        }\n    }\n\n    const handleLogin = (values) => {\n        props.loginUser({username: values.username, password: values.password});\n    }\n\n\n    if (!props.auth.isAuthenticated) {\n        return(\n            <div className=\"container-fluid login-page\">\n                <div className=\"row min-vh-100\">\n                    <div style={{\"backgroundColor\":\"white\"}} className=\"col-lg-4 my-auto text-center\">\n                        <div className=\"row min-vh-100\">\n                            <div className=\"col my-auto\">\n                                <span style={{\"fontSize\":\"40px\", \"color\":\"#432F87\", \"fontWeight\":\"700\", \"display\":\"block\"}}>DRIVE</span>\n                                <span style={{\"fontSize\":\"20px\", \"color\":\"#432F87\", \"fontWeight\":\"500\", \"display\":\"inline-block\"}}> LabAssist </span>\n                                <Form\n                                onSubmit={handleLogin}\n                                render={({ handleSubmit, form, submitting, pristine, values }) => (\n                                    <>                                     \n                                    <div className=\"row\">\n                                        <div className=\"container\">\n                                            <form id=\"loginForm\" onSubmit={handleSubmit}>\n                                                <div className=\"row\">\n                                                    <Field\n                                                    name=\"username\"\n                                                    component=\"input\"\n                                                    type=\"text\"\n                                                    validate={required}\n                                                    >\n                                                    {({ input, meta }) => (\n                                                        <div className=\"col-12\">\n                                                            <input {...input} placeholder=\"Username\" className=\"login-input\"/>\n                                                            {meta.error && meta.touched && <span style={{\"textAlign\": \"left\", \"color\":\"red\"}} className=\"error\"><br></br>{meta.error}</span>}\n                                                        </div>\n                                                    )}\n                                                    </Field>\n                                                </div>\n                                                <div className=\"row\">\n                                                    <Field\n                                                    name=\"password\"\n                                                    component=\"input\"\n                                                    type=\"password\"\n                                                    validate={required}\n                                                    >\n                                                    {({ input, meta }) => (\n                                                        <div className=\"col-12\">\n                                                            <input {...input} placeholder=\"Password\" className=\"login-input\"/>\n                                                            {meta.error && meta.touched && <span style={{\"textAlign\": \"left\", \"color\":\"red\"}} className=\"error\"><br></br>{meta.error}</span>}\n                                                        </div>\n                                                    )}\n                                                    </Field>\n                                                </div>\n                                                <div className=\"row\">\n                                                    <div className=\"col-12\">\n                                                        <button className=\"submit-button\" type=\"submit\" disabled={submitting || pristine}>\n                                                            Login\n                                                        </button>\n                                                    </div>\n                                                </div>\n                                            </form>\n                                        </div>  \n                                    </div>                                             \n                                    </>\n                                )}/> \n                                {props.auth.errMess == \"Error 401: Unauthorized\" ? (\n                                    <div className=\"row\">\n                                        <div className=\"container\">\n                                            <div className=\"row\">\n                                                <div style={{\"paddingLeft\":\"20%\", \"paddingRight\":\"20%\", \"paddingTop\":\"10%\"}} className=\"col-12 text-center\">\n                                                    <div style={{\"height\":\"100px\", \"backgroundColor\":\"rgba(255,0,0, 0.6)\", \"width\":\"100%\", \"borderRadius\":\"5px\", \n                                                        \"color\":\"white\", \"fontSize\":\"18px\", \"fontWeight\":\"500\", \"padding\":\"5%\"}}>\n                                                        <span>You have entered an invalid username or password</span>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div> \n                                ) : null}\n                            </div>\n                        </div>\n                    </div>\n                    <div id=\"login-right\" className=\"col-8 my-auto d-none d-md-block text-center\">\n                        <img src={HomeImage} height=\"60%\" width=\"60%\" alt=\"image\" />\n                    </div>\n                </div>                  \n            </div>\n        );\n    }\n    else {\n        return login()\n    }\n}  \n","import React, { Component } from 'react';\nimport { Modal, Button}  from \"react-bootstrap\";\nimport { Form, Field } from 'react-final-form';\n\nconst emailRe = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))/;\nconst required = value => (value ? undefined : 'Required')\nconst usernameCheck = userRole => value => {\n    if (userRole == \"admin\")\n        return undefined\n    else {\n        var split = value.split('@')\n        return emailRe.test(split[0]) && split[1] == \"gosh.nhs.uk\" ? undefined : 'Username must be a @gosh.nhs.uk email'\n    }\n}\nconst composeValidators = (...validators) => value =>\n  validators.reduce((error, validator) => error || validator(value), undefined)\n\n\nclass AddUser extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleSubmit = (values) => {\n        var user = {\n            username: values.username,\n            password: values.password,\n            supervisor: values.role==\"supervisor\" ? true : false,\n            admin: values.role==\"admin\" ? true : false,\n            firstName: values.firstName,\n            lastName: values.lastName\n        }\n\n        this.props.postUser(user);\n\n        this.props.handleModalClose();\n\n    }\n\n\n    render() {\n        return(\n            <Modal show={this.props.isModalOpen} onHide={this.props.handleModalClose}>\n                <Modal.Header closeButton>\n                    <h4>Add New User</h4>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"col-12\">\n                        <Form\n                            onSubmit={this.handleSubmit}\n                            render={({ handleSubmit, form, submitting, pristine, values }) => (\n                                <div className=\"container-fluid\">\n                                    <div className=\"row ml-2 mt-2\">\n                                        <form id=\"addUserForm\" onSubmit={handleSubmit}>\n                                            <div className=\"row\">\n                                                <div className=\"col-6\">\n                                                    <label>User Role</label>\n                                                    <Field\n                                                    name=\"role\"\n                                                    component=\"select\"\n                                                    defaultValue=\"regular\"\n                                                    >\n                                                        <option selected value=\"regular\">Regular User</option>\n                                                        <option value=\"supervisor\">Supervisor User</option>\n                                                        <option value=\"admin\">Admin</option>\n                                                    </Field>\n                                                </div>\n                                            </div>\n                                            <div className=\"row\">\n                                                <Field\n                                                name=\"username\"\n                                                component=\"input\"\n                                                type=\"text\"\n                                                validate={composeValidators(required, usernameCheck(values.role))}\n                                                >\n                                                {({ input, meta }) => (\n                                                    <div className=\"col-12\">\n                                                        <label>Username</label>\n                                                        <input {...input} placeholder=\"Username\"/>\n                                                        {meta.error && meta.submitFailed && <span>{meta.error}</span>}\n                                                    </div>\n                                                )}\n                                                </Field>\n                                            </div>\n                                            <div className=\"row\">\n                                                <Field\n                                                name=\"password\"\n                                                component=\"input\"\n                                                type=\"password\"\n                                                validate={required}\n                                                >\n                                                {({ input, meta }) => (\n                                                    <div className=\"col-12\">\n                                                        <label>Password</label>\n                                                        <input {...input} placeholder=\"Password\"/>\n                                                        {meta.error && meta.submitFailed && <span>{meta.error}</span>}\n                                                    </div>\n                                                )}\n                                                </Field>\n                                            </div>\n                                            <div className=\"row\">\n                                                <Field\n                                                name=\"firstName\"\n                                                component=\"input\"\n                                                type=\"text\"\n                                                validate={required}\n                                                >\n                                                {({ input, meta }) => (\n                                                    <div className=\"col-6\">\n                                                        <label>First Name</label>\n                                                        <input {...input} placeholder=\"First Name\"/>\n                                                        {meta.error && meta.submitFailed && <span>{meta.error}</span>}\n                                                    </div>\n                                                )}\n                                                </Field>\n                                                <Field\n                                                name=\"lastName\"\n                                                component=\"input\"\n                                                type=\"text\"\n                                                validate={required}\n                                                >\n                                                {({ input, meta }) => (\n                                                    <div className=\"col-6\">\n                                                        <label>Last Name</label>\n                                                        <input {...input} placeholder=\"Last Name\"/>\n                                                        {meta.error && meta.submitFailed && <span>{meta.error}</span>}\n                                                    </div>\n                                                )}\n                                                </Field>\n                                            </div>                               \n                                            <div className=\"row\">\n                                                <div className=\"col-12\">\n                                                    <button class=\"cancel-button\" type=\"button\"\n                                                        onClick={() => {\n                                                            this.props.handleModalClose();\n                                                            var fields = form.getRegisteredFields()\n                                                            fields.map(field => form.resetFieldState(field))}}>\n                                                        Cancel\n                                                    </button>\n                                                    <button class=\"submit-button\" type=\"submit\" disabled={submitting || pristine}>\n                                                        Add User\n                                                    </button>\n                                                </div>                                                    \n                                            </div>\n                                        </form>\n                                    </div>\n                                </div>\n                            )}\n                        />\n                    </div>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n\n}\n\nexport default AddUser;","import React, { Component } from 'react';\nimport { Modal, Button}  from \"react-bootstrap\";\nimport { Form, Field } from 'react-final-form';\n\nconst required = value => (value ? undefined : 'Required')\nconst minLength = value => (value.length >= 8 ? undefined : 'Password must be at least 8 characters')\nconst containsNumber = value => (/\\d/.test(value) ? undefined : 'Password must contain at least one number')\nconst matchesOldPassword = oldPassword => value => ( value == oldPassword ? undefined : 'Does not match old password' )\nconst newPasswordsMatch = newPassword => value => ( value == newPassword ? undefined : 'Passwords do not match' )\nconst composeValidators = (...validators) => value =>\n  validators.reduce((error, validator) => error || validator(value), undefined)\n\n\nclass ResetPassword extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleSubmit = (values) => {\n        this.props.putUser({\n            _id: this.props.selectedUser._id,\n            password: values.confirmPassword\n        }, true);\n\n        this.props.handleModalClose();\n\n        alert(\"Password Successfully Changed!\")\n    }\n\n\n    render() {\n        return(\n            <Modal show={this.props.isModalOpen} onHide={this.props.handleModalClose}>\n                <Modal.Header closeButton>\n                    <h4>Reset Password for {this.props.selectedUser ? this.props.selectedUser.username : ''}</h4>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"col-12\">\n                        <Form\n                            onSubmit={this.handleSubmit}\n                            render={({ handleSubmit, form, submitting, pristine, values }) => (\n                                <div className=\"container-fluid\">\n                                    <div className=\"row ml-2 mt-2\">\n                                        <div className=\"container-fluid\">\n                                            <form id=\"addUserForm\" onSubmit={handleSubmit}>\n                                                <div className=\"row\">\n                                                    <Field\n                                                    name=\"newPassword\"\n                                                    component=\"input\"\n                                                    type=\"password\"\n                                                    validate={composeValidators(required, minLength, containsNumber)}\n                                                    >\n                                                    {({ input, meta }) => (\n                                                        <div className=\"col-12\">\n                                                            <label>New Password</label>\n                                                            <input {...input} placeholder=\"New Password\"/>\n                                                            {meta.error && meta.submitFailed && <span>{meta.error}</span>}\n                                                        </div>\n                                                    )}\n                                                    </Field>\n                                                </div>\n                                                <div className=\"row\">\n                                                    <Field\n                                                    name=\"confirmPassword\"\n                                                    component=\"input\"\n                                                    type=\"password\"\n                                                    validate={composeValidators(required, newPasswordsMatch(values.newPassword))}\n                                                    >\n                                                    {({ input, meta }) => (\n                                                        <div className=\"col-12\">\n                                                            <label>Confirm Password</label>\n                                                            <input {...input} placeholder=\"Confirm Password\"/>\n                                                            {meta.error && meta.submitFailed && <span>{meta.error}</span>}\n                                                        </div>\n                                                    )}\n                                                    </Field>\n                                                </div>                   \n                                                <div className=\"row\">\n                                                    <div className=\"col-12\">\n                                                        <button className=\"cancel-button\" type=\"button\"\n                                                            onClick={() => {\n                                                                this.props.handleModalClose();\n                                                                var fields = form.getRegisteredFields()\n                                                                fields.map(field => form.resetFieldState(field))}}>\n                                                            Cancel\n                                                        </button>\n                                                        <button className=\"submit-button\" type=\"submit\" disabled={submitting || pristine}>\n                                                            Change Password\n                                                        </button>\n                                                    </div>                                                    \n                                                </div>\n                                            </form>\n                                        </div>                                               \n                                    </div>\n                                </div>\n                            )}\n                        />\n                    </div>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n\n}\n\nexport default ResetPassword;","import React, { createRef, Component } from 'react';\nimport AddUser from './AddUser'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSignOutAlt, faPlus, faSearch, faTrash } from '@fortawesome/free-solid-svg-icons'\nimport ResetPassword from './ResetPassword';\nimport Switch from \"react-switch\";\n\nclass Admin extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            users: this.props.users,\n            usersRenderList: localStorage.getItem(\"showDeletedUsers\") == \"true\" ? (this.props.users.filter(user => user.status != \"ACTIVE\")) : \n                        (this.props.users.filter(user => user.status == \"ACTIVE\")),\n            isAddUserModalOpen: false,\n            isPasswordModalOpen: false,  \n            selectedUser: null,\n            deactivated: localStorage.getItem(\"showDeletedUsers\") == \"false\" ? false : true\n        }\n    }\n\n    showDeleted = () => {\n        if (this.state.deactivated) {\n            localStorage.setItem(\"showDeletedUsers\", false);\n            this.setState({\n                usersRenderList: this.props.users.filter(user => user.status == \"ACTIVE\"),\n                deactivated: false\n            })\n        }\n        else {\n            localStorage.setItem(\"showDeletedUsers\", true);\n            this.setState({\n                usersRenderList: this.props.users.filter(user => user.status != \"ACTIVE\"),\n                deactivated: true\n            })\n        }\n    }\n\n    handleChange = (e) => {\n        var usersCopy = this.state.users.slice();\n        \n        if (this.state.deactivated) {\n            this.setState({\n                usersRenderList: usersCopy.filter(user => user.username.includes(e.target.value) && user.status!=\"ACTIVE\")\n            })\n        }\n        else {\n            this.setState({\n                usersRenderList: usersCopy.filter(user => user.username.includes(e.target.value) && user.status==\"ACTIVE\")\n            })\n        }\n    }\n\n    changeUserRole = (user, e) => {\n        \n        var updatedUser = {\n            _id: user._id,\n            supervisor:  e.target.value==\"Supervisor User\" ? true : false,\n        }\n        this.props.putUser(updatedUser);\n    }\n\n    deleteUser = (user) => {\n        var updatedUser = {\n            _id: user._id,\n            status:  \"DELETED\"\n        }\n        this.props.putUser(updatedUser);\n    }\n\n    reActivateUser = (user) => {\n        var updatedUser = {\n            _id: user._id,\n            status:  \"ACTIVE\"\n        }\n        this.props.putUser(updatedUser);\n    }\n\n    handleAddUserModalShow = () => {\n        this.setState({\n            isAddUserModalOpen: true\n        });\n    }\n\n    handleAddUserModalClose = () => {\n        this.setState({\n            isAddUserModalOpen: false\n        });\n    }\n\n    handlePasswordModalShow = (user) => {\n        this.setState({\n            isPasswordModalOpen: true,\n            selectedUser: user\n        });\n    }\n\n    handlePasswordModalClose = () => {\n        this.setState({\n            isPasswordModalOpen: false\n        });\n    }\n\n    render() {\n        if (this.props.users.isLoading) {\n            <div className=\"row flex-fill h-100 d-flex\">\n                <div className=\"col\">\n                    <div style={{\"z-index\":\"10\", \"position\":\"fixed\", \"border-bottom\":\"1px solid #E2E2E4\", \"background-color\": \"white\", \"margin-top\": \"0px\", \"padding\": \"10px\", \"width\":\"110%\"}} className=\"row header\">\n                        <div className=\"col ml-2\">\n                            <a href=\"/\" onClick={this.props.logoutUser}>\n                            <FontAwesomeIcon style={{\"verticalAlign\":\"middle\"}} icon={faSignOutAlt} size='lg' rotation={180}/>\n                            <span style={{\"verticalAlign\":\"middle\"}} className=\"menu-header\"> Sign Out </span>\n                            </a>\n                        </div>\n                    </div>\n                    <div style={{\"border-right\":\"1px solid #E2E2E4\", \"paddingTop\":\"81px\", \"paddingLeft\":\"10px\"}} className=\"row\">\n                        Loading\n                    </div>\n                </div>\n            </div>\n        }\n        return (\n            <div id=\"page-wrap\" className=\"container-fluid\">         \n                <div className=\"row flex-fill h-100 d-flex\">\n                    <div className=\"col\">\n                        <div style={{\"z-index\":\"10\", \"position\":\"fixed\", \"border-bottom\":\"1px solid #E2E2E4\", \"background-color\": \"white\", \"margin-top\": \"0px\", \"padding\": \"10px\", \"width\":\"110%\"}} className=\"row header\">\n                            <div className=\"col my-auto ml-2\">\n                                <a href=\"/\" onClick={this.props.logoutUser}>\n                                <FontAwesomeIcon style={{\"verticalAlign\":\"middle\"}} icon={faSignOutAlt} size='lg' rotation={180}/>\n                                <span style={{\"verticalAlign\":\"middle\"}} className=\"menu-header\"> Sign Out </span>\n                                </a>\n                            </div>\n                        </div>\n                        <div style={{\"border-right\":\"1px solid #E2E2E4\", \"paddingTop\":\"81px\", \"paddingLeft\":\"10px\"}} className=\"row\">\n                            <div className=\"col-lg-8 col-xl-6 ml-2\">\n                                <div className=\"container-fluid\">\n                                    <div className=\"row\">\n                                        <span style={{\"color\":\"#432F87\", \"fontSize\":\"20px\"}}>User Management</span>\n                                        <span><FontAwesomeIcon style={{\"marginLeft\":\"30px\"}} icon={faSearch} size='sm'/><input style={{\"border\":\"1px solid lightgrey\", \"borderRadius\":\"4px\", \"marginLeft\":\"5px\", \"marginRight\":\"10px\"}} type=\"text\" onChange={(e => this.handleChange(e))}/></span>\n                                        <span><Switch checkedIcon={null} uncheckedIcon={null} offColor=\"#66CDAA\" onColor=\"#888\" onChange={this.showDeleted} checked={this.state.deactivated} /></span>\n                                        <span className=\"ml-auto\"><a style={{\"color\":\"#432F87\"}} type=\"button\" onClick={this.handleAddUserModalShow}><FontAwesomeIcon icon={faPlus} size='sm'/> <span className=\"d-none d-sm-inline\">Add New User</span></a></span>\n                                    </div>\n                                    <div className=\"row\">\n                                        <ul style={{\"width\":\"100%\"}} className=\"list-unstyled\">\n                                            {this.state.usersRenderList.map(user => {\n                                                if (user.username != JSON.parse(localStorage.getItem('userData')).username) {\n                                                    return(\n                                                        <li key={user._id}>\n                                                            {\n                                                                user.status!=\"DELETED\" ? (\n                                                                    <div style={{\"border\":\"1px solid lightgrey\", \"padding\":\"20px\", \"borderRadius\":\"7px\", \"backgroundColor\":\"white\", \"boxShadow\":\"0px 0px 3px 0px lightgrey\"}} key={user._id} className=\"user-card\">\n                                                                        <span>{user.username}</span>\n                                                                        <span className=\"float-right\">\n                                                                            {\n                                                                                !user.admin ? (\n                                                                                    <select style={{\"borderRadius\":\"3px\", \"height\":\"27px\"}} onChange={(e) => this.changeUserRole(user, e)}>\n                                                                                        <option selected={user.supervisor && !user.admin ? (\"selected\") : \"\"}>Supervisor User</option>\n                                                                                        <option selected={!user.supervisor && !user.admin ? (\"selected\") : \"\"}>Regular User</option>\n                                                                                    </select>\n                                                                                ) : (\n                                                                                    <span>Admin</span>\n                                                                                )\n                                                                            }\n                                                                        </span>\n                                                                        <span style={{\"float\":\"right\", \"height\":\"27px\",\"border\":\"1px solid #432F87\", \"backgroundColor\":\"#432F87\", \"color\":\"white\", \"borderRadius\":\"3px\", \"padding\":\"0px 5px 0px 5px\", \"margin-left\":\"10px\", \"margin-right\":\"10px\"}}>\n                                                                            <a onClick={() => this.handlePasswordModalShow(user)} type=\"button\">Reset Password</a>\n                                                                        </span>\n                                                                        <span style={{\"float\":\"right\", \"height\":\"27px\", \"borderRadius\":\"3px\", \"color\":\"#432F87\", \"padding\":\"0px 3px 0px 3px\", \"margin-left\":\"10px\", \"margin-right\":\"10px\"}}>\n                                                                            <a onClick={() => this.deleteUser(user)} type=\"button\"><FontAwesomeIcon style={{\"verticalAlign\":\"middle\"}} icon={faTrash} size='lg'/></a>\n                                                                        </span>\n                                                                    </div>\n                                                                ) : (\n                                                                    <div style={{\"border\":\"1px solid lightgrey\", \"padding\":\"20px\", \"borderRadius\":\"7px\", \"backgroundColor\":\"#E2E2E4\", \"boxShadow\":\"0px 0px 3px 0px lightgrey\"}} key={user._id} className=\"user-card\">\n                                                                        <span>{user.username}</span>\n                                                                        <span style={{\"float\":\"right\", \"height\":\"27px\",\"border\":\"1px solid grey\", \"backgroundColor\":\"grey\", \"color\":\"lightgrey\", \"borderRadius\":\"3px\", \"padding\":\"0px 3px 0px 3px\", \"margin-left\":\"10px\", \"margin-right\":\"10px\"}}>\n                                                                            <a type=\"button\">Reset Password</a>\n                                                                        </span>\n                                                                        <span style={{\"float\":\"right\", \"height\":\"27px\",\"border\":\"1px solid #432F87\", \"borderRadius\":\"3px\", \"backgroundColor\":\"#432F87\", \"color\":\"white\", \"padding\":\"0px 3px 0px 3px\", \"margin-left\":\"10px\", \"margin-right\":\"10px\"}}>\n                                                                            <a onClick={() => this.reActivateUser(user)} type=\"button\">Reactivate</a>\n                                                                        </span>\n                                                                    </div>\n                                                                )\n                                                            }\n                                                        </li>\n                                                    );\n                                                }\n                                            })}\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <AddUser isModalOpen={this.state.isAddUserModalOpen} handleModalClose={this.handleAddUserModalClose} handleModalShow={this.handleAddUserModalShow} \n                    postUser={this.props.postUser} />\n                <ResetPassword isModalOpen={this.state.isPasswordModalOpen} handleModalClose={this.handlePasswordModalClose} handleModalOpen={this.handlePasswordModalShow} \n                    putUser={this.props.putUser} selectedUser={this.state.selectedUser} />\n            </div>\n        );\n    }\n}\n\nexport default Admin;","import { format } from 'date-fns';\nimport {AiOutlineRight, AiOutlineDown} from 'react-icons/ai'\n\nexport const COLUMNS = [\n    {\n        // Make an expander cell\n        Header: () => null, // No header\n        id: 'expander', // It needs an ID\n        Cell: ({ row }) => (\n          // Use Cell to render an expander for each row.\n          // We can use the getToggleRowExpandedProps prop-getter\n          // to build the expander.\n          <span {...row.getToggleRowExpandedProps()}>\n            {row.isExpanded ? <AiOutlineDown/> : <AiOutlineRight/>}\n          </span>\n        ),\n    },\n    {\n        Header: 'Assay Name',\n        accessor: 'assayName',\n        //canGroupBy: false,\n        //aggregate: topValue,\n    },\n    {\n        Header: 'Batch Nr',\n        accessor: 'batchNr',\n        //canGroupBy: false,\n        //aggregate: topValue\n    },\n    {\n        Header: 'Date and Time',\n        accessor: 'createdAt',\n        Cell: ({value}) => {return format(new Date(value), 'dd/MM/yyyy')}\n        //canGroupBy: false,\n        //aggregate: topValue,\n    },    \n    {\n        Header: 'Conducted By',\n        accessor: 'conductedBy',\n        //disableSortBy: true\n    },\n    {\n        Header: 'Updated At',\n        accessor: 'updatedAt',\n    }    \n]\n\nconst onRowClick = (state, rowInfo, column, instance) => {\n    return {\n        onClick: e => {\n            console.log('A Td Element was clicked!')\n            console.log('it produced this event:', e)\n            console.log('It was in this column:', column)\n            console.log('It was in this row:', rowInfo)\n            console.log('It was in this table instance:', instance)\n        }\n    }\n}\n\nfunction topValue(leafValues) {\n    let top = leafValues[0]\n  \n    /*\n    leafValues.forEach(value => {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    })\n    */\n  \n    return top\n  }","import React from 'react';\nimport { FaSearch } from 'react-icons/fa'\n//import { Button, Form, FormGroup, Label, Input, Col} from 'reactstrap';\nimport { Button, Form, FormGroup, Label, Input, Col} from 'react-bootstrap';\n\nexport const GlobalFilter = ({ filter, setFilter }) => {\n    return(\n        <>\n            <span>\n                <FaSearch />\n            </span>\n            <span>\n                <input value={filter || ''} onChange={e => setFilter(e.target.value)} id=\"searchBar\" type=\"search\" name=\"search\" placeholder=\"Search anything...\"/>\n            </span>\n        </>\n    )\n}","import React from 'react';\n\nexport const Checkbox = React.forwardRef(\n    ({ indeterminate, ...rest }, ref) => {\n      const defaultRef = React.useRef()\n      const resolvedRef = ref || defaultRef\n  \n      React.useEffect(() => {\n        resolvedRef.current.indeterminate = indeterminate\n      }, [resolvedRef, indeterminate])\n  \n      return (\n        <>\n          <input type=\"checkbox\" ref={resolvedRef} {...rest} />\n        </>\n      )\n    }\n  )","import React, { Component } from 'react';\nimport { format } from 'date-fns';\n\nclass TestsCards extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        return(\n            <div className=\"container-fluid\">\n            <div style={{\"padding\":\"20px\"}} className=\"row\">\n                <div style={{\"borderRight\":\"1px solid lightgrey\"}} className=\"col-6\">\n                    <div className=\"row reagent-card-value\">\n                        <div className=\"col\">\n                            <h4>Reagents</h4>\n                        </div>\n                    </div>\n                    {this.props.testValues.reagents ? (this.props.testValues.reagents.map(reagent => (\n                        <div className=\"row reagent-card-value\">\n                            <div className=\"col\">\n                                <b>{reagent.label}</b>\n                            </div>\n                            <div className=\"col\">\n                                {reagent.lotNr}\n                            </div>\n                        </div>\n                    ))) : ''}\n                </div>\n                <div className=\"col-6\">\n                    <div className=\"row reagent-card-value\">\n                        <div className=\"col\">\n                            <h4>Reagent Data</h4>\n                        </div>\n                    </div>\n                    {this.props.testValues.reagentData ? (this.props.testValues.reagentData.map(reagentData => (\n                        <div className=\"row reagent-card-value\">\n                            <div className=\"col\">\n                                <b>{reagentData.label}</b>\n                            </div>\n                            <div className=\"col\">\n                                {reagentData.type==\"date\" ? (\n                                    (reagentData.value!=null ? format(new Date(reagentData.value), 'dd/MM/yyyy'): '')\n                                ) : (\n                                    reagentData.value\n                                ) }\n                            </div>\n                        </div>\n                    ))) : ''}\n                </div>\n            </div>\n            <div style={{\"padding\":\"20px\", \"borderTop\":\"1px solid lightgrey\"}} className=\"row\">    \n                <div style={{\"borderRight\":\"1px solid lightgrey\"}} className=\"col-6\">\n                    <div className=\"row reagent-card-value\">\n                        <div className=\"col\">\n                            <h4>Other Data</h4>\n                        </div>\n                    </div>\n                    {this.props.testValues.other ? (this.props.testValues.other.map(otherData => (\n                        <div className=\"row reagent-card-value\">\n                            <div className=\"col\">\n                                <b>{otherData.label}</b>\n                            </div>\n                            <div className=\"col\">\n                                {otherData.type==\"date\" ? (\n                                    (otherData.value!=null ? format(new Date(otherData.value), 'dd/MM/yyyy'): '')\n                                ) : (\n                                    otherData.value\n                                ) }\n                            </div>\n                        </div>\n                    ))) : ''}\n                </div>\n                <div className=\"col-6\">\n                    <div className=\"row reagent-card-value\">\n                        <div className=\"col\">\n                            <h4>Equipment</h4>\n                        </div>\n                    </div>\n                    {this.props.testValues.equipment ? (this.props.testValues.equipment.map((equipment, index) => (\n                        <div className=\"row reagent-card-value\">\n                            <div className=\"col\">\n                                {String(index+1) + \". \" + equipment.eqptNr}\n                            </div>\n                        </div>\n                    ))) : ''}\n                </div>\n            </div>\n            </div>\n        );\n    }\n}\n\nexport default TestsCards;","import React, { useMemo, useState } from 'react';\nimport { useTable, useSortBy, useGlobalFilter, useRowSelect, useExpanded } from 'react-table';\nimport { COLUMNS } from './ColumnsTH'\nimport './table.css';\nimport {AiFillCaretDown, AiFillCaretUp} from 'react-icons/ai';\nimport { GlobalFilter } from './GlobalFilter';\nimport { Checkbox } from './CheckBox';\nimport TestsCards from './TestsCards'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport Loader from \"react-loader-spinner\";\n\nexport const AllTestsOverview = (props) => {\n    \n    const columns = useMemo(() => COLUMNS, [])\n    //const data = useMemo(() => props.tests, [])\n    const [data, setData] = useState(props.tests, []);\n    \n    const tableInstance = useTable({\n            columns,\n            data,\n            initialState: {\n                sortBy: [\n                    {\n                        id: 'createdAt',\n                        desc: true\n                    }\n                ],\n                groupBy: ['lotNr'],\n                hiddenColumns: ['updatedAt']\n            },\n        },         \n        useGlobalFilter,\n        useSortBy,\n        useExpanded,\n        useRowSelect,        \n        (hooks) => {\n            hooks.visibleColumns.push((columns) => {\n                return [                    \n                    ...columns,\n                    {\n                        id: 'selection',\n                        Header: ({ getToggleAllRowsSelectedProps }) => (\n                            <Checkbox {...getToggleAllRowsSelectedProps()} />\n                        ),\n                        Cell: ({ row }) => (\n                            <Checkbox {...row.getToggleRowSelectedProps()}/>\n                        )\n                    }    \n                ]\n            })\n        })\n\n    const { \n        getTableProps, \n        getTableBodyProps, \n        headerGroups, \n        rows, \n        prepareRow,\n        state,\n        setGlobalFilter,\n        selectedFlatRows,\n        visibleColumns,\n        //state: { expanded },\n    } = tableInstance\n\n    const { globalFilter } = state\n\n    const [selectedRow, setSelectRows] = useState('')\n    \n    const deleteRows = () => { \n        selectedFlatRows.forEach(row => {     \n            var update = {\n                _id: row.original._id,\n                status: \"DELETED\"\n            }\n            props.putTest(update);\n        });\n    }\n\n    const switchToMyTests = () => {\n        var dataCopy = [...data];\n        const userName = 'Alyda Jarnell';\n        const myTests = dataCopy.filter(({conductedBy}) => conductedBy === userName);\n        //props.switchTests(myTests);\n    }\n\n    const switchToAllTests = () => { \n        props.fetchTests();\n    }\n\n    const renderRowSubComponent = React.useCallback(\n        ({ row }) => (\n        //   <pre\n        //     style={{\n        //       fontSize: '10px',\n        //     }}\n        //   >\n        //     <code>{JSON.stringify({ values: row.original }, null, 2)}</code>\n        //   </pre>\n        // ),\n        // []\n            <TestsCards testValues={row.original}/>\n        )\n    )\n    \n    if (props.testsLoading) {\n        return(\n            <>\n            <div className=\"row header table\">\n                <div className=\"col-12 col-lg-6\">\n                    <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\n                </div>\n                <div style={{\"padding-right\":\"20px\"}} className=\"col-2 ml-auto text-right\">\n                </div>\n            </div>\n            <div className=\"table-container row\"> \n                <div style={{\"padding-top\":\"100px\", \"padding-bottom\":\"0px\", \"padding-left\":\"0px\", \"padding-right\":\"10px\"}} className=\"col-11 text-center\">\n                    <Loader\n                        type=\"TailSpin\"\n                        color=\"rgba(67, 47, 135, 0.9)\"\n                        height={50}\n                        width={50}\n                        timeout={3000} //3 secs\n                    />\n                </div>\n            </div>\n            </>\n        );\n    } \n    else {\n        return(\n            <>        \n            <div className=\"row header table\">\n                <div className=\"col-12 col-lg-6\">\n                    <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\n                </div>\n                <div style={{\"padding-right\":\"20px\"}} className=\"col-2 ml-auto text-right\">\n                </div>\n            </div>\n            {selectedFlatRows[0] ? (\n                <>\n                <div className=\"action-button-row row d-lg-none float-left\">\n                    <div className=\"col-2 col-md-1\">\n                        <a type=\"button\" onClick={deleteRows} className=\"dot action-button\">\n                        <FontAwesomeIcon icon={faTrash} color=\"grey\" size='lg'/></a>\n                    </div>\n                </div>\n                <div className=\"row proxy-row d-lg-none\"></div>\n                </>\n            ) : null}\n            <div className=\"table-container row\"> \n                <div style={{\"padding-top\":\"10px\", \"padding-bottom\":\"0px\", \"padding-left\":\"0px\", \"padding-right\":\"10px\"}} className=\"col-12 col-lg-11\">\n                    <table {...getTableProps()}>\n                        <thead>\n                            {headerGroups.map((headerGroup) => (\n                                <tr {...headerGroup.getHeaderGroupProps()}>\n                                    {headerGroup.headers.map(column => (\n                                            <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                                {column.render('Header')}\n                                                <span>\n                                                    {column.isSorted ? (column.isSortedDesc ? <AiFillCaretDown/> : <AiFillCaretUp/>) : ''}\n                                                </span>\n                                            </th>\n                                        ))}\n                                </tr>\n                            ))}                \n                        </thead>\n                        <tbody {...getTableBodyProps()}>\n                        {rows.map((row, i) => {\n                            prepareRow(row)\n                            return (\n                            // Use a React.Fragment here so the table markup is still valid\n                            <React.Fragment {...row.getRowProps()}>\n                                <tr>\n                                {row.cells.map(cell => {\n                                    return (\n                                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                    )\n                                })}\n                                </tr>\n                                {/*\n                                    If the row is in an expanded state, render a row with a\n                                    column that fills the entire length of the table.\n                                */}\n                                {row.isExpanded ? (\n                                <tr>\n                                    <td colSpan={visibleColumns.length}>\n                                    {/*\n                                        Inside it, call our renderRowSubComponent function. In reality,\n                                        you could pass whatever you want as props to\n                                        a component like this, including the entire\n                                        table instance. But for this example, we'll just\n                                        pass the row\n                                        */}\n                                    {renderRowSubComponent({ row })}\n                                    </td>\n                                </tr>\n                                ) : null}\n                            </React.Fragment>\n                            )\n                        })}\n                        </tbody>\n                    </table>\n                </div>\n                <div className=\"col-1 text-center button-col\">\n                    {selectedFlatRows[0] ? (\n                        <ul className=\"list-unstyled d-none d-lg-block\">\n                            <li>\n                                <div>\n                                    <a type=\"button\" onClick={deleteRows} className=\"dot action-button\">\n                                    <FontAwesomeIcon icon={faTrash} color=\"grey\" size='lg'/></a>\n                                </div>\n                                <div className=\"subtitle\">Delete</div>\n                            </li>\n                        </ul>\n                    ) : null}\n                </div>  \n            </div>\n            \n            </>\n        );\n    }\n}\n\n","import React, { useMemo, useState } from 'react';\nimport { useTable, useSortBy, useGlobalFilter, useRowSelect, useExpanded } from 'react-table';\nimport { COLUMNS } from './ColumnsTH'\nimport './table.css';\nimport { AiFillCaretDown, AiFillCaretUp } from 'react-icons/ai';\nimport { GlobalFilter } from './GlobalFilter';\nimport TestsCards from './TestsCards';\nimport { Checkbox } from './CheckBox';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUndo } from '@fortawesome/free-solid-svg-icons'\n\nexport const AllTestsBin = (props) => {\n    \n    const columns = useMemo(() => COLUMNS, [])\n    //const data = useMemo(() => props.deletedTests, [])\n    const [data, setData] = useState(props.deletedTests, []);\n    \n    const tableInstance = useTable({\n            columns,\n            data,\n            initialState: {\n                sortBy: [\n                    {\n                        id: 'updatedAt',\n                        desc: true\n                    }\n                ],\n                groupBy: ['lotNr'],\n                hiddenColumns: ['updatedAt']\n            },\n        },         \n        useGlobalFilter,\n        useSortBy,\n        useExpanded,\n        useRowSelect,        \n        (hooks) => {\n            hooks.visibleColumns.push((columns) => {\n                return [                    \n                    ...columns,\n                    {\n                        id: 'selection',\n                        Header: ({ getToggleAllRowsSelectedProps }) => (\n                            <Checkbox {...getToggleAllRowsSelectedProps()} />\n                        ),\n                        Cell: ({ row }) => (\n                            <Checkbox {...row.getToggleRowSelectedProps()}/>\n                        )\n                    }    \n                ]\n            })\n        })\n\n    const { \n        getTableProps, \n        getTableBodyProps, \n        headerGroups, \n        rows, \n        prepareRow,\n        state,\n        setGlobalFilter,\n        selectedFlatRows,\n        visibleColumns,\n        //state: { expanded },\n    } = tableInstance\n\n    const { globalFilter } = state\n\n    const [selectedRow, setSelectRows] = useState('')\n\n    const undoDelete = () => { \n        selectedFlatRows.forEach(row => {     \n            var update = {\n                _id: row.original._id,\n                status: \"OK\"\n            }\n            props.putTest(update);\n        });\n    }\n\n    const switchToMyTests = () => {\n        var dataCopy = [...data];\n        const userName = 'Alyda Jarnell';\n        const myTests = dataCopy.filter(({conductedBy}) => conductedBy === userName);\n        //props.switchTests(myTests);\n    }\n\n    const switchToAllTests = () => { \n        props.fetchTests();\n    }\n\n    const renderRowSubComponent = React.useCallback(\n        ({ row }) => (\n        //   <pre\n        //     style={{\n        //       fontSize: '10px',\n        //     }}\n        //   >\n        //     <code>{JSON.stringify({ values: row.original }, null, 2)}</code>\n        //   </pre>\n        // ),\n        // []\n            <TestsCards testValues={row.original}/>\n        )\n      )\n\n    return(\n        <>        \n        <div className=\"row header table\">\n            <div className=\"col-12 col-lg-6\">\n                <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\n            </div>\n            <div style={{\"padding-right\":\"20px\"}} className=\"col-2 ml-auto text-right\">\n            </div>\n        </div>\n        {selectedFlatRows[0] ? (\n            <>\n            <div className=\"action-button-row row d-lg-none float-left\">\n                <div className=\"col-2 col-md-1\">\n                    <a type=\"button\" onClick={undoDelete} \n                        style={{\"backgroundColor\":\"rgba(67, 47, 135, 0.9)\",\n                            \"boxShadow\":\"0px 0px 5px 0px rgba(67, 47, 135, 0.9)\"}}\n                        className=\"dot action-button\">\n                    <FontAwesomeIcon icon={faUndo} color=\"white\" size='lg'/></a>\n                </div>\n            </div>\n            <div className=\"row proxy-row d-lg-none\"></div>\n            </>\n        ) : null}\n        <div className=\"table-container row\"> \n            <div style={{\"padding-top\":\"10px\", \"padding-bottom\":\"0px\", \"padding-left\":\"0px\", \"padding-right\":\"10px\"}} className=\"col-12 col-lg-11\">\n                <table {...getTableProps()}>\n                    <thead>\n                        {headerGroups.map((headerGroup) => (\n                            <tr {...headerGroup.getHeaderGroupProps()}>\n                                {headerGroup.headers.map(column => (\n                                        <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                            {column.render('Header')}\n                                            <span>\n                                                {column.isSorted ? (column.isSortedDesc ? <AiFillCaretDown/> : <AiFillCaretUp/>) : ''}\n                                            </span>\n                                        </th>\n                                    ))}\n                            </tr>\n                        ))}                \n                    </thead>\n                    <tbody {...getTableBodyProps()}>\n                    {rows.map((row, i) => {\n                        prepareRow(row)\n                        return (\n                        // Use a React.Fragment here so the table markup is still valid\n                        <React.Fragment {...row.getRowProps()}>\n                            <tr>\n                            {row.cells.map(cell => {\n                                return (\n                                <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                )\n                            })}\n                            </tr>\n                            {/*\n                                If the row is in an expanded state, render a row with a\n                                column that fills the entire length of the table.\n                            */}\n                            {row.isExpanded ? (\n                            <tr>\n                                <td colSpan={visibleColumns.length}>\n                                {/*\n                                    Inside it, call our renderRowSubComponent function. In reality,\n                                    you could pass whatever you want as props to\n                                    a component like this, including the entire\n                                    table instance. But for this example, we'll just\n                                    pass the row\n                                    */}\n                                {renderRowSubComponent({ row })}\n                                </td>\n                            </tr>\n                            ) : null}\n                        </React.Fragment>\n                        )\n                    })}\n                    </tbody>\n                </table>\n            </div>\n            <div className=\"col-1 text-center button-col d-none d-lg-block\">\n                {selectedFlatRows[0] ? (\n                    <ul className=\"list-unstyled\">\n                        <li>\n                            <div className=\"textCenter\">\n                                <a type=\"button\" onClick={undoDelete} \n                                    style={{\"backgroundColor\":\"rgba(67, 47, 135, 0.9)\",\n                                        \"boxShadow\":\"0px 0px 5px 0px rgba(67, 47, 135, 0.9)\"}}\n                                    className=\"dot action-button\">\n                                <FontAwesomeIcon icon={faUndo} color=\"white\" size='lg'/></a>\n                            </div>\n                            <div className=\"subtitle\">Restore</div>\n                        </li>\n                    </ul>\n                ) : null}\n            </div>   \n        </div>\n        \n        </>\n    );\n}\n\n","import React, { useMemo, useState } from 'react';\nimport { useTable, useSortBy, useGlobalFilter, useRowSelect, useExpanded } from 'react-table';\nimport { COLUMNS } from './ColumnsTH'\nimport './table.css';\nimport {AiFillCaretDown, AiFillCaretUp} from 'react-icons/ai';\nimport { GlobalFilter } from './GlobalFilter';\nimport { Checkbox } from './CheckBox';\nimport TestsCards from './TestsCards';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport Loader from \"react-loader-spinner\";\n\nexport const MyTestsOverview = (props) => {\n    \n    const columns = useMemo(() => COLUMNS, [])\n    //const data = useMemo(() => props.myTests, [])\n    const [data, setData] = useState(props.myTests, []);\n    \n    const tableInstance = useTable({\n            columns,\n            data,\n            initialState: {\n                sortBy: [\n                    {\n                        id: 'createdAt',\n                        desc: true\n                    }\n                ],\n                groupBy: ['lotNr'],\n                hiddenColumns: ['updatedAt']\n            },\n        },         \n        useGlobalFilter,\n        useSortBy,\n        useExpanded,\n        useRowSelect,        \n        (hooks) => {\n            hooks.visibleColumns.push((columns) => {\n                return [                    \n                    ...columns,\n                    {\n                        id: 'selection',\n                        Header: ({ getToggleAllRowsSelectedProps }) => (\n                            <Checkbox {...getToggleAllRowsSelectedProps()} />\n                        ),\n                        Cell: ({ row }) => (\n                            <Checkbox {...row.getToggleRowSelectedProps()}/>\n                        )\n                    }    \n                ]\n            })\n        })\n\n    const { \n        getTableProps, \n        getTableBodyProps, \n        headerGroups, \n        rows, \n        prepareRow,\n        state,\n        setGlobalFilter,\n        selectedFlatRows,\n        visibleColumns,\n        //state: { expanded },\n    } = tableInstance\n\n    const { globalFilter } = state\n\n    const [selectedRow, setSelectRows] = useState('')\n\n    const deleteRows = () => { \n        selectedFlatRows.forEach(row => {     \n            var update = {\n                _id: row.original._id,\n                status: \"DELETED\"\n            }\n            props.putTest(update);\n        });\n    }\n\n    const switchToMyTests = () => {\n        var dataCopy = [...data];\n        const userName = 'Alyda Jarnell';\n        const myTests = dataCopy.filter(({conductedBy}) => conductedBy === userName);\n        //props.switchTests(myTests);\n    }\n\n    const switchToAllTests = () => { \n        props.fetchTests();\n    }\n\n    const renderRowSubComponent = React.useCallback(\n        ({ row }) => (\n        //   <pre\n        //     style={{\n        //       fontSize: '10px',\n        //     }}\n        //   >\n        //     <code>{JSON.stringify({ values: row.original }, null, 2)}</code>\n        //   </pre>\n        // ),\n        // []\n            <TestsCards testValues={row.original}/>\n        )\n      )\n\n    if (props.testsLoading) {\n        return(\n            <>\n            <div className=\"row header table\">\n                <div className=\"col-6\">\n                    <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\n                </div>\n                <div style={{\"padding-right\":\"20px\"}} className=\"col-2 ml-auto text-right\">\n                </div>\n            </div>\n            <div className=\"table-container row\"> \n                <div style={{\"padding-top\":\"100px\", \"padding-bottom\":\"0px\", \"padding-left\":\"0px\", \"padding-right\":\"10px\"}} className=\"col-11 text-center\">\n                    <Loader\n                        type=\"TailSpin\"\n                        color=\"rgba(67, 47, 135, 0.9)\"\n                        height={50}\n                        width={50}\n                        timeout={3000} //3 secs\n                    />\n                </div>\n            </div>\n            </>\n        );\n    } \n    else {\n        return(\n            <>        \n            <div className=\"row header table\">\n                <div className=\"col-12 col-lg-6\">\n                    <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\n                </div>\n                <div style={{\"padding-right\":\"20px\"}} className=\"col-2 ml-auto text-right\">\n                </div>\n            </div>\n            {selectedFlatRows[0] ? (\n                <>\n                <div className=\"action-button-row row d-lg-none float-left\">\n                    <div className=\"col-2 col-md-1\">\n                        <a type=\"button\" onClick={deleteRows} className=\"dot action-button\">\n                        <FontAwesomeIcon icon={faTrash} color=\"grey\" size='lg'/></a>\n                    </div>\n                </div>\n                <div className=\"row proxy-row d-lg-none\"></div>\n                </>\n            ) : null}\n            <div className=\"table-container row\"> \n                <div style={{\"padding-top\":\"10px\", \"padding-bottom\":\"0px\", \"padding-left\":\"0px\", \"padding-right\":\"10px\"}} className=\"col-12 col-lg-11\">\n                    <table {...getTableProps()}>\n                        <thead>\n                            {headerGroups.map((headerGroup) => (\n                                <tr {...headerGroup.getHeaderGroupProps()}>\n                                    {headerGroup.headers.map(column => (\n                                            <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                                {column.render('Header')}\n                                                <span>\n                                                    {column.isSorted ? (column.isSortedDesc ? <AiFillCaretDown/> : <AiFillCaretUp/>) : ''}\n                                                </span>\n                                            </th>\n                                        ))}\n                                </tr>\n                            ))}                \n                        </thead>\n                        <tbody {...getTableBodyProps()}>\n                        {rows.map((row, i) => {\n                            prepareRow(row)\n                            return (\n                            // Use a React.Fragment here so the table markup is still valid\n                            <React.Fragment {...row.getRowProps()}>\n                                <tr>\n                                {row.cells.map(cell => {\n                                    return (\n                                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                    )\n                                })}\n                                </tr>\n                                {/*\n                                    If the row is in an expanded state, render a row with a\n                                    column that fills the entire length of the table.\n                                */}\n                                {row.isExpanded ? (\n                                <tr>\n                                    <td colSpan={visibleColumns.length}>\n                                    {/*\n                                        Inside it, call our renderRowSubComponent function. In reality,\n                                        you could pass whatever you want as props to\n                                        a component like this, including the entire\n                                        table instance. But for this example, we'll just\n                                        pass the row\n                                        */}\n                                    {renderRowSubComponent({ row })}\n                                    </td>\n                                </tr>\n                                ) : null}\n                            </React.Fragment>\n                            )\n                        })}\n                        </tbody>\n                    </table>\n                </div>\n                <div className=\"col-1 text-center button-col d-none d-lg-block\">\n                    {selectedFlatRows[0] ? (\n                        <ul className=\"list-unstyled\">\n                            <li>\n                                <div>\n                                    <a type=\"button\" onClick={deleteRows} className=\"dot action-button\">\n                                    <FontAwesomeIcon icon={faTrash} color=\"grey\" size='lg'/></a>\n                                </div>\n                                <div className=\"subtitle\">Delete</div>\n                            </li>\n                        </ul>\n                    ) : null}\n                </div>    \n            </div>\n            \n            </>\n        );\n    }\n}\n\n","import React, { useMemo, useState } from 'react';\nimport { useTable, useSortBy, useGlobalFilter, useRowSelect, useExpanded } from 'react-table';\nimport { COLUMNS } from './ColumnsTH'\nimport './table.css';\nimport { AiFillCaretDown, AiFillCaretUp } from 'react-icons/ai';\nimport { GlobalFilter } from './GlobalFilter';\nimport { Checkbox } from './CheckBox';\nimport TestsCards from './TestsCards';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUndo } from '@fortawesome/free-solid-svg-icons'\n\nexport const MyTestsBin = (props) => {\n    \n    const columns = useMemo(() => COLUMNS, [])\n    //const data = useMemo(() => props.myDeletedTests, [])\n    const [data, setData] = useState(props.myDeletedTests, []);\n    \n    const tableInstance = useTable({\n            columns,\n            data,\n            initialState: {\n                sortBy: [\n                    {\n                        id: 'updatedAt',\n                        desc: true\n                    }\n                ],\n                groupBy: ['lotNr'],\n                hiddenColumns: ['updatedAt']\n            },\n        },         \n        useGlobalFilter,\n        useSortBy,\n        useExpanded,\n        useRowSelect,        \n        (hooks) => {\n            hooks.visibleColumns.push((columns) => {\n                return [                    \n                    ...columns,\n                    {\n                        id: 'selection',\n                        Header: ({ getToggleAllRowsSelectedProps }) => (\n                            <Checkbox {...getToggleAllRowsSelectedProps()} />\n                        ),\n                        Cell: ({ row }) => (\n                            <Checkbox {...row.getToggleRowSelectedProps()}/>\n                        )\n                    }    \n                ]\n            })\n        })\n\n    const { \n        getTableProps, \n        getTableBodyProps, \n        headerGroups, \n        rows, \n        prepareRow,\n        state,\n        setGlobalFilter,\n        selectedFlatRows,\n        visibleColumns,\n        //state: { expanded },\n    } = tableInstance\n\n    const { globalFilter } = state\n\n    const [selectedRow, setSelectRows] = useState('')\n\n    const undoDelete = () => { \n        selectedFlatRows.forEach(row => {     \n            var update = {\n                _id: row.original._id,\n                status: \"OK\"\n            }\n            props.putTest(update);\n        });\n    }\n\n    const switchToMyTests = () => {\n        var dataCopy = [...data];\n        const userName = 'Alyda Jarnell';\n        const myTests = dataCopy.filter(({conductedBy}) => conductedBy === userName);\n        //props.switchTests(myTests);\n    }\n\n    const switchToAllTests = () => { \n        props.fetchTests();\n    }\n\n    const renderRowSubComponent = React.useCallback(\n        ({ row }) => (\n        //   <pre\n        //     style={{\n        //       fontSize: '10px',\n        //     }}\n        //   >\n        //     <code>{JSON.stringify({ values: row.original }, null, 2)}</code>\n        //   </pre>\n        // ),\n        // []\n            <TestsCards testValues={row.original}/>\n        )\n      )\n\n    return(\n        <>        \n        <div className=\"row header table\">\n            <div className=\"col-12 col-lg-6\">\n                <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\n            </div>\n            <div style={{\"padding-right\":\"20px\"}} className=\"col-2 ml-auto text-right\">\n            </div>\n        </div>\n        {selectedFlatRows[0] ? (\n            <>\n            <div className=\"action-button-row row d-lg-none float-left\">\n                <div className=\"col-2 col-md-1\">\n                    <a type=\"button\" onClick={undoDelete} \n                        style={{\"backgroundColor\":\"rgba(67, 47, 135, 0.9)\",\n                            \"boxShadow\":\"0px 0px 5px 0px rgba(67, 47, 135, 0.9)\"}}\n                        className=\"dot action-button\">\n                    <FontAwesomeIcon icon={faUndo} color=\"white\" size='lg'/></a>\n                </div>\n            </div>\n            <div className=\"row proxy-row d-lg-none\"></div>\n            </>\n        ) : null}\n        <div className=\"table-container row\"> \n            <div style={{\"padding-top\":\"10px\", \"padding-bottom\":\"0px\", \"padding-left\":\"0px\", \"padding-right\":\"10px\"}} className=\"col-12 col-lg-11\">\n                <table {...getTableProps()}>\n                    <thead>\n                        {headerGroups.map((headerGroup) => (\n                            <tr {...headerGroup.getHeaderGroupProps()}>\n                                {headerGroup.headers.map(column => (\n                                        <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                            {column.render('Header')}\n                                            <span>\n                                                {column.isSorted ? (column.isSortedDesc ? <AiFillCaretDown/> : <AiFillCaretUp/>) : ''}\n                                            </span>\n                                        </th>\n                                    ))}\n                            </tr>\n                        ))}                \n                    </thead>\n                    <tbody {...getTableBodyProps()}>\n                    {rows.map((row, i) => {\n                        prepareRow(row)\n                        return (\n                        // Use a React.Fragment here so the table markup is still valid\n                        <React.Fragment {...row.getRowProps()}>\n                            <tr>\n                            {row.cells.map(cell => {\n                                return (\n                                <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                )\n                            })}\n                            </tr>\n                            {/*\n                                If the row is in an expanded state, render a row with a\n                                column that fills the entire length of the table.\n                            */}\n                            {row.isExpanded ? (\n                            <tr>\n                                <td colSpan={visibleColumns.length}>\n                                {/*\n                                    Inside it, call our renderRowSubComponent function. In reality,\n                                    you could pass whatever you want as props to\n                                    a component like this, including the entire\n                                    table instance. But for this example, we'll just\n                                    pass the row\n                                    */}\n                                {renderRowSubComponent({ row })}\n                                </td>\n                            </tr>\n                            ) : null}\n                        </React.Fragment>\n                        )\n                    })}\n                    </tbody>\n                </table>\n            </div>\n            <div className=\"col-1 text-center button-col d-none d-lg-block\">\n                {selectedFlatRows[0] ? (\n                    <ul className=\"list-unstyled\">\n                        <li>\n                            <div className=\"textCenter\">\n                                <a type=\"button\" onClick={undoDelete} \n                                    style={{\"backgroundColor\":\"rgba(67, 47, 135, 0.9)\",\n                                        \"boxShadow\":\"0px 0px 5px 0px rgba(67, 47, 135, 0.9)\"}}\n                                    className=\"dot action-button\">\n                                <FontAwesomeIcon icon={faUndo} color=\"white\" size='lg'/></a>\n                            </div>\n                            <div className=\"subtitle\">Restore</div>\n                        </li>\n                    </ul>\n                ) : null}\n            </div>     \n        </div>\n        \n        </>\n    );\n}\n\n","import React, { Component, useEffect, useMemo, useState } from 'react';\nimport Sidebar from './Sidebar';\nimport { RiDeleteBin7Fill, RiTimeFill } from 'react-icons/ri'\nimport { FaLayerGroup } from 'react-icons/fa'\nimport { HiOutlineSwitchHorizontal } from 'react-icons/hi'\nimport { AllTestsOverview } from './AllTestsOverview';\nimport { AllTestsBin } from './AllTestsBin';\nimport { MyTestsOverview } from './MyTestsOverview';\nimport { MyTestsBin } from './MyTestsBin';\n\nclass TestHistoryNEW extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentPath: ''\n        }\n    }   \n\n    componentDidMount() {\n        const currentPath = window.location.pathname.split('/').splice(2,).join('/');\n        this.setState({\n            currentPath: currentPath\n        });\n    }\n\n    renderTable(path) {\n        switch(path) {\n            case 'all-tests/overview':\n                return(\n                    <AllTestsOverview tests={this.props.tests} \n                        testsLoading={this.props.testsLoading}\n                        testsErrMess={this.props.testsErrMess}\n                        fetchTests={this.props.fetchTests}\n                        putTest={this.props.putTest}\n                        deleteTest={this.props.deleteTest} />  \n                );\n            case 'all-tests/deleted':\n                return(\n                    <AllTestsBin deletedTests={this.props.deletedTests} \n                        testsLoading={this.props.testsLoading}\n                        testsErrMess={this.props.testsErrMess}\n                        fetchTests={this.props.fetchTests}\n                        putTest={this.props.putTest}\n                        deleteTest={this.props.deleteTest} />  \n                );\n            case 'my-tests/overview':\n                return(\n                    <MyTestsOverview myTests={this.props.myTests} \n                        testsLoading={this.props.testsLoading}\n                        testsErrMess={this.props.testsErrMess}\n                        fetchTests={this.props.fetchTests}\n                        putTest={this.props.putTest}\n                        deleteTest={this.props.deleteTest} />  \n                );\n            case 'my-tests/deleted':\n                return(\n                    <MyTestsBin myDeletedTests={this.props.myDeletedTests} \n                        testsLoading={this.props.testsLoading}\n                        testsErrMess={this.props.testsErrMess}\n                        fetchTests={this.props.fetchTests}\n                        putTest={this.props.putTest}\n                        deleteTest={this.props.deleteTest} />  \n                );\n        }\n    }\n\n    render() {\n        return(\n            <div id=\"page-wrap\" className=\"container-fluid\">         \n                <Sidebar pageWrapId={'page-wrap'} outerContainerId={'outer-container'} logoutUser={this.props.logoutUser} />                               \n                <div className=\"row flex-fill h-100 d-flex\">\n                    <div style={{\"position\":\"fixed\"}} className=\"col-2 d-flex flex-column h-100\">\n                        <div style={{\"border-bottom\":\"1px solid #E2E2E4\", \"background-color\": \"white\", \"margin-top\": \"0px\", \"padding\": \"10px\"}} className=\"row header\">\n                            <div style={{\"paddingRight\":\"0px\"}} className=\"col my-auto ml-5\">\n                                <span className=\"menu-header d-none d-xl-inline\"> Test History </span>\n                            </div>\n                        </div>\n                        <div style={{\"border-right\":\"1px solid #E2E2E4\",  \"backgroundColor\":\"#F6F5FA\"}} className=\"row side-info justify-content-center bg-blue flex-grow-1\">\n                            <div style={{\"margin-top\":\"15px\"}} className=\"container-fluid side-info-container\">\n                                <div className=\"row\">\n                                    <div style={{\"margin-right\":\"15px\", \n                                                    \"border-radius\": \"7px\",\n                                                    \"background-color\": \"rgba(47, 73, 209, 0.15)\",\n                                                    \"box-shadow\": \"0px 0px 5px 0px lightgrey\",\n                                                    \"height\": \"70px\",\n                                                    \"padding-top\":\"20px\",\n                                                    \"paddingLeft\":\"0px\",\n                                                    \"paddingRight\":\"0px\"}} \n                                        className=\"col text-center section-selection\">\n                                        <a className=\"switch\" \n                                            href={this.state.currentPath.split('/')[0]=='all-tests' ? '/testhistory/my-tests/overview' : '/testhistory/all-tests/overview'}>\n                                                <span className=\"dot\" style={{\"height\": \"30px\",\n                                                                        \"border\": \"0.5px solid rgba(229, 229, 229, 1)\",\n                                                                        \"width\": \"30px\",\n                                                                        \"background-color\": \"#ffffff\",\n                                                                        \"border-radius\": \"50%\",\n                                                                        \"display\": \"inline-block\",\n                                                                        \"box-shadow\": \"0px 0px 1px 0px #888888\"}}>\n                                            <HiOutlineSwitchHorizontal/>\n                                        </span></a>\n                                        <span className=\"d-none d-lg-inline\" style={{\"font-weight\":\"700\", \"font-size\":\"large\", \n                                            \"color\": \"rgba(237, 139, 0, 0.95)\", \"padding-left\": \"15px\",\n                                            \"vertical-align\":\"middle\"}}>{this.state.currentPath.split('/')[0]=='all-tests' ? 'All Tests' : 'My Tests'}</span>\n                                    </div>\n                                </div>\n                                <div style={{\"margin-top\":\"30px\"}} className=\"row section-choices\">\n                                    <div className=\"col text-center text-lg-left\" style={{\"padding\":\"0px\"}}>\n                                        <ul className=\"list-unstyled\">\n                                            <li><a type=\"button\" \n                                                    href={this.state.currentPath.split('/')[0]=='all-tests' ? '/testhistory/all-tests/overview' : '/testhistory/my-tests/overview'}\n                                                    className={this.state.currentPath.split('/')[1]=='overview' ? 'selected' : ''}><span><FaLayerGroup /></span> <span className=\"d-none d-lg-inline\">Overview</span></a></li>\n                                            <li><a type=\"button\" \n                                                    href={this.state.currentPath.split('/')[0]=='all-tests' ? '/testhistory/all-tests/deleted' : '/testhistory/my-tests/deleted'}\n                                                    className={this.state.currentPath.split('/')[1]=='deleted' ? 'selected' : ''}><span><RiDeleteBin7Fill /></span> <span className=\"d-none d-lg-inline\">Deleted</span></a></li>\n                                        </ul>\n                                    </div>\n                                </div>\n                                <div style={{\"position\":\"absolute\", \"bottom\": \"10px\", \"width\":\"80%\"}} className=\"row\">\n                                    <div style={{\"height\": \"80px\", \"border-top\":\"1px solid rgba(229, 229, 229, 1)\", \"padding-top\":\"13px\"}} \n                                        className=\"col text-center\">\n                                            <div className=\"row\">\n                                                <div style={{\"paddingLeft\":\"0px\"}} className=\"col-3\">\n                                                    <a href=\"/account\" className=\"dot\"\n                                                        style={{\"line-height\":\"50px\",\n                                                        \"border\": \"0.5px solid white\",\n                                                        \"width\": \"50px\",\n                                                        \"background-color\": \"white\",\n                                                        \"border-radius\": \"50%\",\n                                                        \"display\": \"inline-block\",\n                                                        \"box-shadow\": \"0px 0px 5px 0px lightgrey\",\n                                                        \"text-align\": \"center\",\n                                                        \"vertical-align\": \"middle\"}}>\n                                                            {JSON.parse(localStorage.getItem('userData')).firstName.substring(0,1)\n                                                                        + JSON.parse(localStorage.getItem('userData')).lastName.substring(0,1)}\n                                                        </a>\n                                                </div>\n                                                <div style={{\"margin-left\":\"10px\"}} className=\"col\">\n                                                    <div className=\"row\">\n                                                        <a style={{\"color\":\"black\"}} href=\"/account\">\n                                                            <span className=\"d-none d-xl-inline\" style={{\"display\":\"block\"}}>\n                                                                {JSON.parse(localStorage.getItem('userData')).firstName\n                                                                    + ' ' + JSON.parse(localStorage.getItem('userData')).lastName}\n                                                            </span>\n                                                        </a>\n                                                    </div>\n                                                    <div style={{\"color\":\"gray\"}} className=\"row\">\n                                                        <span className=\"d-none d-xl-inline\" style={{\"display\":\"block\"}}>\n                                                            {JSON.parse(localStorage.getItem('userData')).supervisor ? 'Supervisor' : 'Regular'}\n                                                        </span>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-10 offset-2\">  \n                        {this.renderTable(this.state.currentPath)}  \n                    </div>    \n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TestHistoryNEW;","import { format } from 'date-fns';\nimport {AiOutlineRight, AiOutlineDown} from 'react-icons/ai'\n\nexport const COLUMNS = [\n    {\n        // Make an expander cell\n        Header: () => null, // No header\n        id: 'expander', // It needs an ID\n        Cell: ({ row }) => (\n            row.subRows.length ? null : (\n            <span {...row.getToggleRowExpandedProps()}>\n                {row.isExpanded ? <AiOutlineDown/> : <AiOutlineRight/>}\n            </span>\n            )\n        )\n    },\n    {\n        Header: 'Date Received',\n        id: 'dateReceived',\n        accessor: 'dateReceived',\n        Cell: ({value}) => (value!=null ? format(new Date(value), 'dd/MM/yyyy'): ''),\n        aggregate: topValue,\n    },\n    {\n        Header: 'Reagent Name',\n        accessor: 'reagentName',\n        canGroupBy: false,\n        aggregate: topValue,\n        disableSortBy: true\n    },\n    {\n        Header: 'LOT Number',\n        id: 'lotNr',\n        accessor: 'lotNr',\n        canGroupBy: true,\n        disableSortBy: true,\n        aggregate: topValue,\n    },\n    {\n        Header: 'Unit',\n        accessor: 'unit',\n        canGroupBy: false,\n        aggregate: unitCount,\n        disableSortBy: true\n    },\n    {\n        Header: 'Expiry Date',\n        accessor: 'expiryDate',\n        Cell: ({value}) => (value!=null ? (new Date(value) < new Date() ? \n                                <span style={{\"color\":\"#F08080\"}}>{format(new Date(value), 'dd/MM/yyyy')}</span> :\n                                <span>{format(new Date(value), 'dd/MM/yyyy')}</span>) : ''),\n        aggregate: topValue,\n        canGroupBy: false\n    },\n    {\n        Header: 'Status',\n        accessor: 'status',\n        Cell: ({value}) => {\n            switch(value) {\n                case \"DISPOSED\":\n                    return <><span style={{\"color\":\"orange\"}}>Disposed\n                    </span> <span style={{\"backgroundColor\":\"orange\", \"height\":\"10px\", \"width\":\"10px\", \"borderRadius\":\"50%\", \"display\":\"inline-block\"}}></span></>;\n                case \"DELETED\":\n                    return <><span style={{\"color\":\"#F08080\"}}>Deleted\n                    </span> <span style={{\"backgroundColor\":\"#F08080\", \"height\":\"10px\", \"width\":\"10px\", \"borderRadius\":\"50%\", \"display\":\"inline-block\"}}></span></>;\n                case \"OK\":\n                    return <><span style={{\"color\":\"lightgreen\"}}>Ok\n                    </span> <span style={{\"backgroundColor\":\"lightgreen\", \"height\":\"10px\", \"width\":\"10px\", \"borderRadius\":\"50%\", \"display\":\"inline-block\"}}></span></>;\n                default:\n                    return \"\";\n            }\n        },\n        canGroupBy: false\n    },\n    {\n        Header: 'Assay',\n        accessor: 'assayName',\n        canGroupBy: false,\n    },\n    {\n        Header: 'Supplier',\n        accessor: 'supplier',\n        disableSortBy: true,\n        aggregate: topValue,\n        canGroupBy: true\n    },\n    {\n        Header: 'CAT Number',\n        accessor: 'catNr',\n        canGroupBy: false,\n        aggregate: topValue\n    },\n    {\n        Header: 'Updated At',\n        accessor: 'updatedAt',\n    }    \n]\n\nconst onRowClick = (state, rowInfo, column, instance) => {\n    return {\n        onClick: e => {\n            console.log('A Td Element was clicked!')\n            console.log('it produced this event:', e)\n            console.log('It was in this column:', column)\n            console.log('It was in this row:', rowInfo)\n            console.log('It was in this table instance:', instance)\n        }\n    }\n}\n\nfunction topValue(leafValues) {\n    let top = leafValues[0]\n    return top\n}\n\nfunction unitCount(leafValues){\n    return String(leafValues.length);\n}","import React, { Component } from 'react';\nimport { FaTimes } from 'react-icons/fa'\nimport { Form, Field } from 'react-final-form';\nimport equal from \"fast-deep-equal\";\n\nconst required = value => (value ? undefined : 'Required')\n\nclass AddReagent extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        reagentName: '',\n        supplier: '',\n        lotNr: '',\n        catNr: '',\n        expiryDate: null,\n        dateReceived: null,\n        storageLocation: null,\n        unit: null\n      }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({ reagentName: nextProps.selectedRow.selectedFlatRows ? nextProps.selectedRow.selectedFlatRows.reagentName : ''});\n        this.setState({ supplier: nextProps.selectedRow.selectedFlatRows ? nextProps.selectedRow.selectedFlatRows.supplier : ''});\n        this.setState({ lotNr: nextProps.selectedRow.selectedFlatRows ? nextProps.selectedRow.selectedFlatRows.lotNr : ''});\n        this.setState({ catNr: nextProps.selectedRow.selectedFlatRows ? nextProps.selectedRow.selectedFlatRows.catNr : ''});\n    }\n\n    handleSubmit = async values => {\n        var expiryDate = new Date(values.expiryDate);\n        expiryDate = expiryDate.toISOString();\n        var dateReceived = new Date(values.dateReceived);\n        dateReceived = dateReceived.toISOString();\n\n        var times = Number(values.unit);\n        \n        for (var i=0; i<times; i++) {\n            var unit = String(i+1) + \"/\" + String(times)\n            this.props.postReagent(\n                unit,\n                values.reagentName, \n                values.supplier,\n                values.lotNr,\n                values.catNr,\n                expiryDate,\n                dateReceived,\n                values.storageLocation)\n        }        \n    }\n\n    render() {        \n      return(        \n        <div style={{\"z-index\":\"11\"}} className={`sidebar-content${this.props.isSidebarOpen === true ? ' open' : ''}`}>\n            <Form\n                onSubmit={this.handleSubmit}\n                initialValues={{ \n                    reagentName: this.state.reagentName,\n                    supplier: this.state.supplier,\n                    lotNr: this.state.lotNr,\n                    catNr: this.state.catNr,\n                    storageLocation: \"Room 1\",\n                    unit: 1\n                }}\n                render={({ handleSubmit, form, submitting, pristine, values }) => (\n                    <div className=\"container-fluid\">\n                        <div className=\"row mt-2\">\n                            <div className=\"col-1\">\n                                <a onClick={() => {\n                                    this.props.onSidebarToggle();\n                                    var fields = form.getRegisteredFields()\n                                    fields.map(field => form.resetFieldState(field));\n                                    }}><FaTimes /></a>\n                            </div>                                        \n                            <div className=\"col text-center\">\n                                <h4>Add New Reagent</h4>\n                            </div>\n                        </div>\n                        <div className=\"row ml-2 mt-2\">\n                            <div className=\"container\">\n                                <form id=\"addReagentForm\" onSubmit={handleSubmit}>\n                                    <div className=\"row\">\n                                        <Field\n                                        name=\"reagentName\"\n                                        component=\"input\"\n                                        type=\"text\"\n                                        validate={required}\n                                        >\n                                        {({ input, meta }) => (\n                                            <div className=\"col-12\">\n                                                <label>Reagent Name</label>\n                                                <input {...input} placeholder=\"Reagent Name\"/>\n                                                {meta.error && meta.touched && <span className=\"error\">{meta.error}</span>}\n                                            </div>\n                                        )}\n                                        </Field>\n                                    </div>\n                                    <div className=\"row\">\n                                        <Field\n                                        name=\"supplier\"\n                                        component=\"input\"\n                                        type=\"text\"\n                                        validate={required}\n                                        >\n                                        {({ input, meta }) => (\n                                            <div className=\"col-12\">\n                                                <label>Supplier</label>\n                                                <input {...input} placeholder=\"Supplier\"/>\n                                                {meta.error && meta.touched && <span className=\"error\">{meta.error}</span>}\n                                            </div>\n                                        )}\n                                        </Field>\n                                    </div>\n                                    <div className=\"row\">\n                                        <Field\n                                        name=\"lotNr\"\n                                        component=\"input\"\n                                        type=\"text\"\n                                        validate={required}\n                                        >\n                                        {({ input, meta }) => (\n                                            <div className=\"col-6\">\n                                                <label>Lot Number</label>\n                                                <input {...input} placeholder=\"Lot Number\"/>\n                                                {meta.error && meta.touched && <span className=\"error\">{meta.error}</span>}\n                                            </div>\n                                        )}\n                                        </Field>\n                                        <Field\n                                        name=\"catNr\"\n                                        component=\"input\"\n                                        type=\"text\"\n                                        validate={required}\n                                        >\n                                        {({ input, meta }) => (\n                                            <div className=\"col-6\">\n                                                <label>Cat Number</label>\n                                                <input {...input} placeholder=\"Cat Number\"/>\n                                                {meta.error && meta.touched && <span className=\"error\">{meta.error}</span>}\n                                            </div>\n                                        )}\n                                        </Field>\n                                    </div>\n                                    <div className=\"row\">\n                                        <Field\n                                        name=\"expiryDate\"\n                                        component=\"input\"\n                                        type=\"date\"\n                                        validate={required}\n                                        >\n                                        {({ input, meta }) => (\n                                            <div className=\"col-6\">\n                                                <label>Expiry Date</label>\n                                                <input {...input}/>\n                                                {meta.error && meta.touched && <span className=\"error\">{meta.error}</span>}\n                                            </div>\n                                        )}\n                                        </Field>\n                                        <Field\n                                        name=\"dateReceived\"\n                                        component=\"input\"\n                                        type=\"date\"\n                                        validate={required}\n                                        >\n                                        {({ input, meta }) => (\n                                            <div className=\"col-6\">\n                                                <label>Date Received</label>\n                                                <input {...input}/>\n                                                {meta.error && meta.touched && <span className=\"error\">{meta.error}</span>}\n                                            </div>\n                                        )}\n                                        </Field>\n                                    </div>\n                                    <div className=\"row\">\n                                        <div className=\"col-6\">\n                                            <label>Storage Location</label>\n                                            <Field\n                                            name=\"storageLocation\"\n                                            component=\"select\"\n                                            defaultValue=\"Room 1\"\n                                            >\n                                                <option value=\"Room 1\">Room 1</option>\n                                                <option value=\"Room 2\">Room 2</option>\n                                                <option value=\"Room 3\">Room 3</option>\n                                            </Field>\n                                        </div>\n                                        <div className=\"col-6\">\n                                            <label>Unit</label>\n                                            <Field\n                                            name=\"unit\"\n                                            component=\"input\"\n                                            type=\"number\"\n                                            min=\"1\"\n                                            />\n                                        </div>\n                                    </div>\n                                    <div className=\"row\">\n                                        <div className=\"col-12\">\n                                            <button className=\"cancel-button\" type=\"button\"\n                                                        onClick={() => {\n                                                            this.props.onSidebarToggle();\n                                                            var fields = form.getRegisteredFields()\n                                                            fields.map(field => form.resetFieldState(field))\n                                                        }}>\n                                                        Cancel\n                                                    </button>\n                                            <button className=\"submit-button\" type=\"submit\" disabled={submitting || pristine}>\n                                                Add Reagents\n                                            </button>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>                                               \n                        </div>\n                    </div>\n                )}\n            />                     \n        </div>\n      );\n    }\n}\n\nexport default AddReagent;","import React, { Component } from 'react';\nimport { format } from 'date-fns';\n\nclass PrReagentsCards extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        return(\n            <div style={{\"padding\":\"20px\"}} className=\"row\">\n                <div style={{\"borderRight\":\"1px solid lightgrey\"}} className=\"col-4\">\n                    <div className=\"row reagent-card-value\">\n                        <div className=\"col\">\n                            <b>First Used By</b>\n                        </div>\n                        <div className=\"col\">\n                            {this.props.reagentValues.firstUsedBy}\n                        </div>\n                    </div>\n                    <div className=\"row reagent-card-value\">\n                        <div className=\"col\">\n                            <b>Received By</b>\n                        </div>\n                        <div className=\"col\">\n                            {this.props.reagentValues.receivedBy}\n                        </div>\n                    </div>\n                    <div className=\"row reagent-card-value\">\n                        <div className=\"col\">\n                            <b>Last Edited By</b>\n                        </div>\n                        <div className=\"col\">\n                            {this.props.reagentValues.lastEditedBy}\n                        </div>\n                    </div>\n                    <div className=\"row reagent-card-value\">\n                        <div className=\"col\">\n                            <b>Disposed By</b>\n                        </div>\n                        <div className=\"col\">\n                            {this.props.reagentValues.discardedBy}\n                        </div>\n                    </div>\n                </div>\n                <div style={{\"borderRight\":\"1px solid lightgrey\"}} className=\"col-4\">\n                    <div className=\"row reagent-card-value\">\n                        <div className=\"col\">\n                            <b>Storage Location</b>\n                        </div>\n                        <div className=\"col\">\n                            {this.props.reagentValues.storageLocation}\n                        </div>\n                    </div>\n                    <div className=\"row reagent-card-value\">\n                        <div className=\"col\">\n                            <b>Condition</b>\n                        </div>\n                        <div className=\"col\">\n                            {this.props.reagentValues.condition}\n                        </div>\n                    </div>\n                    <div className=\"row reagent-card-value\">\n                        <div className=\"col\">\n                            <b>Action</b>\n                        </div>\n                        <div className=\"col\">\n                            {this.props.reagentValues.action}\n                        </div>\n                    </div>\n                    <div className=\"row reagent-card-value\">\n                        <div className=\"col\">\n                            <b>Comment</b>\n                        </div>\n                        <div className=\"col\">\n                            {this.props.reagentValues.comment}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-4\">\n                    <div className=\"row reagent-card-value\">\n                        <div className=\"col\">\n                            <b>Status</b>\n                        </div>\n                        <div className=\"col\">\n                            {this.props.reagentValues.status}\n                        </div>\n                    </div>\n                    <div className=\"row reagent-card-value\">\n                        <div className=\"col\">\n                            <b>Date Received</b>\n                        </div>\n                        <div className=\"col\">\n                            {this.props.reagentValues.dateReceived!=null ? \n                                format(new Date(this.props.reagentValues.dateReceived), 'dd/MM/yyyy') : \n                                ''}\n                        </div>\n                    </div>\n                    <div className=\"row reagent-card-value\">\n                        <div className=\"col\">\n                            <b>Date of First Use</b>\n                        </div>\n                        <div className=\"col\">\n                            {this.props.reagentValues.dateOfFirstUse!=null ? \n                                format(new Date(this.props.reagentValues.dateOfFirstUse), 'dd/MM/yyyy') : \n                                ''}\n                        </div>\n                    </div>\n                    <div className=\"row reagent-card-value\">\n                        <div className=\"col\">\n                            <b>Expiry Date</b>\n                        </div>\n                        <div className=\"col\">\n                            {this.props.reagentValues.expiryDate!=null ? \n                                format(new Date(this.props.reagentValues.expiryDate), 'dd/MM/yyyy') : \n                                ''}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PrReagentsCards;","import { isThursday } from 'date-fns';\nimport React, { Component } from 'react';\nimport { Modal, Button}  from \"react-bootstrap\";\nimport { Form, Field } from 'react-final-form';\n\nconst required = value => (value ? undefined : 'Required')\n\nclass EditReagent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            reagentName: '',\n            supplier: '',\n            lotNr: '',\n            catNr: '',\n            expiryDate: null,\n            dateReceived: null,\n            storageLocation: '',\n            status: '',\n            condition: '',\n            comment: '',\n            action: '',\n            assayName: ''\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({ reagentName: nextProps.selectedRow.selectedFlatRows ? nextProps.selectedRow.selectedFlatRows.reagentName : ''});\n        this.setState({ supplier: nextProps.selectedRow.selectedFlatRows ? nextProps.selectedRow.selectedFlatRows.supplier : ''});\n        this.setState({ lotNr: nextProps.selectedRow.selectedFlatRows ? nextProps.selectedRow.selectedFlatRows.lotNr : ''});\n        this.setState({ catNr: nextProps.selectedRow.selectedFlatRows ? nextProps.selectedRow.selectedFlatRows.catNr : ''});\n        this.setState({ expiryDate: nextProps.selectedRow.selectedFlatRows ? nextProps.selectedRow.selectedFlatRows.expiryDate.substring(0, 10) : null});\n        this.setState({ dateReceived: nextProps.selectedRow.selectedFlatRows ? nextProps.selectedRow.selectedFlatRows.dateReceived.substring(0, 10) : null});\n        this.setState({ status: nextProps.selectedRow.selectedFlatRows ? nextProps.selectedRow.selectedFlatRows.status : ''});\n        this.setState({ condition: nextProps.selectedRow.selectedFlatRows ? nextProps.selectedRow.selectedFlatRows.condition : ''});\n        this.setState({ comment: nextProps.selectedRow.selectedFlatRows ? nextProps.selectedRow.selectedFlatRows.comment : ''});\n        this.setState({ action: nextProps.selectedRow.selectedFlatRows ? nextProps.selectedRow.selectedFlatRows.action : ''});\n        this.setState({ unit: nextProps.selectedRow.selectedFlatRows ? nextProps.selectedRow.selectedFlatRows.unit : ''});\n        this.setState({ assayName: nextProps.selectedRow.selectedFlatRows ? nextProps.selectedRow.selectedFlatRows.assayName : ''});\n    }      \n\n    handleSubmit = (values) => {\n        var expiryDate = new Date(values.expiryDate);\n        expiryDate = expiryDate.toISOString();\n\n        var dateReceived = new Date(values.dateReceived);\n        dateReceived = dateReceived.toISOString();\n\n        var updatedReagent = {\n            _id: this.props.selectedRow.selectedFlatRows._id,\n            reagentName: values.reagentName,\n            lotNr: values.lotNr,\n            catNr: values.catNr,\n            expiryDate: expiryDate,\n            dateReceived: dateReceived,\n            storageLocation: values.storageLocation,\n            status: values.status,\n            condition: values.condition,\n            comment: values.comment,\n            action: values.action,\n            supplier: values.supplier\n        }\n\n        if ((values.status != this.state.status) && (values.status==\"DISPOSED\")) {\n            var action = \"dispose\"    \n        }\n        else {\n            var action = \"editDetails\"\n        }\n\n        this.props.putReagent(updatedReagent, action);\n\n        this.props.handleModalClose();\n\n    }\n\n\n    render() {\n        return(\n            <Modal show={this.props.isModalOpen} onHide={this.props.handleModalClose}>\n                <Modal.Header closeButton>\n                    <h4>Edit Reagent</h4>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"container-fluid\">\n                        <Form\n                            onSubmit={this.handleSubmit}\n                            initialValues={{ \n                                reagentName: this.state.reagentName,\n                                supplier: this.state.supplier,\n                                lotNr: this.state.lotNr,\n                                catNr: this.state.catNr,\n                                expiryDate: this.state.expiryDate,\n                                dateReceived: this.state.dateReceived,\n                                storageLocation: this.state.storageLocation,\n                                status: this.state.status,\n                                condition: this.state.condition,\n                                comment: this.state.comment,\n                                action: this.state.action\n                            }}\n                            render={({ handleSubmit, form, submitting, pristine, values }) => (\n                                <div className=\"row ml-2 mt-2\">\n                                    <div className=\"col-12\">\n                                        <form id=\"editReagentForm\" onSubmit={handleSubmit}>\n                                            <div className=\"row\">\n                                                <Field\n                                                name=\"reagentName\"\n                                                component=\"input\"\n                                                type=\"text\"\n                                                validate={required}\n                                                >\n                                                {({ input, meta }) => (\n                                                    <>\n                                                    <div className=\"col-6\">\n                                                        <label>Reagent Name</label>\n                                                        <input {...input} placeholder=\"Reagent Name\"/>\n                                                        {meta.error && meta.touched && <span className=\"error\">{meta.error}</span>}\n                                                    </div>\n                                                    </>\n                                                )}\n                                                </Field>\n                                                <Field\n                                                name=\"supplier\"\n                                                component=\"input\"\n                                                type=\"text\"\n                                                validate={required}\n                                                >\n                                                {({ input, meta }) => (\n                                                    <div className=\"col-6\">\n                                                        <label>Supplier</label>\n                                                        <input {...input} placeholder=\"Supplier\"/>\n                                                        {meta.error && meta.touched && <span className=\"error\">{meta.error}</span>}\n                                                    </div>\n                                                )}\n                                                </Field>\n                                            </div>\n                                            <div className=\"row\">\n                                                <Field\n                                                name=\"lotNr\"\n                                                component=\"input\"\n                                                type=\"text\"\n                                                validate={required}\n                                                >\n                                                {({ input, meta }) => (\n                                                    <div className=\"col-6\">\n                                                        <label>Lot Number</label>\n                                                        <input {...input} placeholder=\"Lot Number\"/>\n                                                        {meta.error && meta.touched && <span className=\"error\">{meta.error}</span>}\n                                                    </div>\n                                                )}\n                                                </Field>\n                                                <Field\n                                                name=\"catNr\"\n                                                component=\"input\"\n                                                type=\"text\"\n                                                validate={required}\n                                                >\n                                                {({ input, meta }) => (\n                                                    <div className=\"col-6\">\n                                                        <label>Cat Number</label>\n                                                        <input {...input} placeholder=\"Cat Number\"/>\n                                                        {meta.error && meta.touched && <span className=\"error\">{meta.error}</span>}\n                                                    </div>\n                                                )}\n                                                </Field>\n                                            </div>\n                                            <div className=\"row\">\n                                                <Field\n                                                name=\"expiryDate\"\n                                                component=\"input\"\n                                                type=\"date\"\n                                                validate={required}\n                                                >\n                                                {({ input, meta }) => (\n                                                    <div className=\"col-6\">\n                                                        <label>Expiry Date</label>\n                                                        <input {...input}/>\n                                                        {meta.error && meta.touched && <span className=\"error\">{meta.error}</span>}\n                                                    </div>\n                                                )}\n                                                </Field>\n                                                <Field\n                                                name=\"dateReceived\"\n                                                component=\"input\"\n                                                type=\"date\"\n                                                validate={required}\n                                                >\n                                                {({ input, meta }) => (\n                                                    <div className=\"col-6\">\n                                                        <label>Date Received</label>\n                                                        <input {...input}/>\n                                                        {meta.error && meta.touched && <span className=\"error\">{meta.error}</span>}\n                                                    </div>\n                                                )}\n                                                </Field>\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-6\">\n                                                    <label>Storage Location</label>\n                                                    <Field\n                                                    name=\"storageLocation\"\n                                                    component=\"select\"\n                                                    defaultValue={this.state.storageLocation}\n                                                    >\n                                                        <option selected value=\"Room 1\">Room 1</option>\n                                                        <option value=\"Room 2\">Room 2</option>\n                                                        <option value=\"Room 3\">Room 3</option>\n                                                    </Field>\n                                                </div>\n                                                <div className=\"col-6\">\n                                                    <label className=\"mr-5\">Status</label>\n                                                    <Field\n                                                    name=\"status\"\n                                                    component=\"select\"\n                                                    defaultValue={this.state.status}\n                                                    >\n                                                        <option selected value=\"OK\">OK</option>\n                                                        <option value=\"DISPOSED\">DISPOSED</option>\n                                                    </Field>\n                                                </div>\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-3\">\n                                                    <label>Condition</label>\n                                                </div>\n                                                <div className=\"col-9\">\n                                                    <Field\n                                                    name=\"condition\"\n                                                    component=\"input\"\n                                                    type=\"text\"\n                                                    />\n                                                </div>\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-3\">\n                                                    <label>Comment</label>\n                                                </div>\n                                                <div className=\"col-9\">\n                                                    <Field\n                                                    name=\"comment\"\n                                                    component=\"input\"\n                                                    type=\"textarea\"\n                                                    />\n                                                </div>\n                                            </div>\n                                            <div className=\"row\">\n                                                <div className=\"col-3\">\n                                                    <label>Action</label>\n                                                </div>\n                                                <div className=\"col-9\">\n                                                    <Field\n                                                    name=\"action\"\n                                                    component=\"input\"\n                                                    type=\"textarea\"\n                                                    />\n                                                </div>\n                                            </div>                                                \n                                            <div className=\"row\">\n                                                <div className=\"col-12\">\n                                                    <button className=\"cancel-button\" type=\"button\"\n                                                        onClick={() => {\n                                                            this.props.handleModalClose();\n                                                            var fields = form.getRegisteredFields()\n                                                            fields.map(field => form.resetFieldState(field))}}>\n                                                        Cancel\n                                                    </button>\n                                                    <button className=\"submit-button\" type=\"submit\" disabled={submitting || pristine}>\n                                                        Save Changes\n                                                    </button>\n                                                </div>                                                    \n                                            </div>\n                                        </form>\n                                    </div>                                               \n                                </div>\n                            )}\n                        />\n                    </div>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n\n}\n\nexport default EditReagent;","import React, { useEffect, useMemo, useState } from 'react';\nimport { useTable, useSortBy, useGlobalFilter, useRowSelect, useExpanded, useGroupBy } from 'react-table';\nimport { COLUMNS } from './ColsPrimaryReagents'\nimport './table.css';\nimport { GlobalFilter } from './GlobalFilter';\nimport AddReagent from './AddReagent';\nimport PrReagentsCards from './PrReagentsCards';\nimport { Button }  from \"react-bootstrap\";\nimport { Checkbox } from './CheckBox';\nimport {AiFillCaretDown, AiFillCaretUp, AiOutlineRight, AiOutlineDown, AiFillFolderAdd} from 'react-icons/ai';\nimport QRCode  from 'qrcode.react';\nimport html2canvas from 'html2canvas';\nimport EditReagent from './EditReagent';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFolderPlus, faPencilAlt, faDownload, faTimes, faTrash } from '@fortawesome/free-solid-svg-icons'\nimport Loader from \"react-loader-spinner\";\n\nexport const PrimaryReagents = (props) => {\n    \n    const columns = useMemo(() => COLUMNS, [])\n    const data = useMemo(() => props.reagents, [])\n\n    //const [data, setData] = useState(props.reagents, []);\n\n    const tableInstance = useTable({\n            columns,\n            data,\n            initialState: {\n                sortBy: [\n                    {\n                        id: 'dateReceived',\n                        desc: true\n                    }\n                ],\n                groupBy: ['dateReceived'],\n                hiddenColumns: ['updatedAt']\n            },\n            autoResetExpanded: false,\n            autoResetSelectedRows: false,\n        },         \n        useGlobalFilter,\n        useGroupBy,\n        useSortBy,\n        useExpanded,\n        useRowSelect,         \n        (hooks) => {\n            hooks.visibleColumns.push((columns) => {\n                return [                    \n                    ...columns,\n                    {\n                        id: 'selection',\n                        groupByBoundary: true,\n                        Header: ({ getToggleAllRowsSelectedProps }) => (\n                            //<Checkbox {...getToggleAllRowsSelectedProps()} />\n                            null\n                        ),\n                        Cell: ({ row }) => (\n                            row.subRows.length ? (null) : <Checkbox {...row.getToggleRowSelectedProps()}/>                            \n                        )\n                    }\n                    \n                ]\n            })\n        })\n\n    const { \n        getTableProps, \n        getTableBodyProps, \n        headerGroups, \n        rows, \n        prepareRow,\n        state,\n        setGlobalFilter,\n        selectedFlatRows,\n        visibleColumns,\n        toggleAllRowsExpanded,\n        isAllRowsExpanded,   \n        toggleRowExpanded\n        //state: { groupBy, expanded },\n    } = tableInstance\n\n    //useMemo(() => toggleAllRowsExpanded(true), [toggleAllRowsExpanded]);\n\n\n    const { globalFilter } = state\n\n    const [isSidebarOpen, setSidebarState] = useState(false)\n    const [isModalOpen, setModalState] = useState(false)\n\n    const toggleSidebar = (form=null) => {     \n        setSidebarState(!isSidebarOpen);\n        props.toggleSidebar(true);\n    }    \n\n    const handleModalShow = () => {\n        setModalState(true);\n    }\n\n    const handleModalClose = () => {\n        setModalState(false);\n    }\n\n    const deleteRows = () => { \n        selectedFlatRows.forEach(row => {  \n            if (row.original) {\n                var update = {\n                    _id: row.original._id,\n                    status: \"DELETED\"\n                }\n                props.putReagent(update);\n            }   \n        });\n    }\n\n    const disposeReagents = () => { \n        selectedFlatRows.forEach(row => { \n            if (row.original) {    \n                var update = {\n                    _id: row.original._id,\n                    status: \"DISPOSED\"\n                }\n                props.putReagent(update, \"dispose\");\n            }\n        });\n    }\n\n    const downloadQR = () => {\n\n        document.getElementById(\"hidden-qr\").style.display = \"block\";\n        //document.getElementById(\"hidden-qr\").style.marginTop = \"1500px\";\n\n        selectedFlatRows.forEach(row => {\n            if (row.original != null) {\n                var elemId = String(row.original._id)+\"-ext\" \n                var elem = document.getElementById(`${elemId}`)\n                elem.style.display = \"block\";           \n                html2canvas(elem).then(function(canvas) {\n                    elem.style.display = \"none\";  \n                    const pngUrl = canvas\n                        .toDataURL(\"image/png\")\n                        .replace(\"image/png\", \"image/octet-stream\");  \n                    let downloadLink = document.createElement(\"a\");\n                    downloadLink.href = pngUrl;\n                    downloadLink.download = elemId+\".png\";\n                    document.body.appendChild(downloadLink);\n                    downloadLink.click();\n                    document.body.removeChild(downloadLink);                                   \n                })    \n            }            \n        });\n\n        document.getElementById(\"hidden-qr\").style.display = \"none\";\n        //document.getElementById(\"hidden-qr\").style.marginTop = \"0px\";\n    }\n    \n    const renderRowSubComponent = React.useCallback(\n        ({ row }) => (\n        //   <pre\n        //     style={{\n        //       fontSize: '10px',\n        //     }}\n        //   >\n        //     <code>{JSON.stringify({ values: row.original }, null, 2)}</code>\n        //   </pre>\n            <PrReagentsCards reagentValues={row.original} />\n        ),\n        []\n    )\n\n    if (props.reagentsLoading) {\n        return (\n            <>\n            <div className=\"row header table\">\n                <div className=\"col-6 col-sm-8 col-lg-6\">\n                    <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\n                </div>\n                <div className=\"col ml-auto text-right\">\n                    <span>\n                        <a style={{\"font-size\": \"medium\", \"color\":\"rgba(67, 47, 135, 0.9)\"}} type=\"button\" onClick={toggleSidebar}>Add Reagent<span style={{\"padding-left\":\"10px\"}}><FontAwesomeIcon icon={faFolderPlus} size='lg' /></span></a>\n                    </span>\n                </div>\n            </div>\n            <div style={{\"paddingTop\":\"61px\"}} className=\"table-container row\">\n                <div style={{\"padding-top\":\"100px\", \"padding-bottom\":\"0px\", \"padding-left\":\"0px\", \"padding-right\":\"10px\"}} className=\"col-11 text-center\">\n                    <Loader\n                        type=\"TailSpin\"\n                        color=\"rgba(67, 47, 135, 0.9)\"\n                        height={50}\n                        width={50}\n                        timeout={3000} //3 secs\n                    />\n                </div>\n            </div>\n            </>\n        );\n    }\n    else {\n        return(\n            <>\n            <div className=\"row header table\">\n                <div className=\"col-6 col-sm-8 col-lg-6\">\n                    <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\n                </div>\n                <div className=\"col ml-auto text-right\">\n                    <span>\n                        <a style={{\"font-size\": \"medium\", \"color\":\"rgba(67, 47, 135, 0.9)\"}} type=\"button\" onClick={toggleSidebar}>Add Reagent<span style={{\"padding-left\":\"10px\"}}><FontAwesomeIcon icon={faFolderPlus} size='lg' /></span></a>\n                    </span>\n                </div>\n            </div>\n            {selectedFlatRows[0] ? (\n                <>\n                <div className=\"action-button-row row d-xl-none float-left\">\n                    <div className=\"col-2 col-md-1\">\n                        <a type=\"button\" \n                            style={{\"backgroundColor\":\"rgba(67, 47, 135, 0.9)\",\n                                \"boxShadow\":\"0px 0px 5px 0px rgba(67, 47, 135, 0.9)\"}}  \n                            onClick={handleModalShow} className=\"dot action-button\">\n                        <FontAwesomeIcon icon={faPencilAlt} color=\"white\" size='lg'/></a>\n                    </div>\n                    <div className=\"col-2 col-md-1\">\n                        <a type=\"button\" onClick={disposeReagents} className=\"dot action-button\">\n                        <FontAwesomeIcon icon={faTimes} color=\"rgba(67, 47, 135, 0.9)\" size='lg'/></a>\n                    </div>\n                    <div className=\"col-2 col-md-1\">\n                        <a type=\"button\" onClick={downloadQR} className=\"dot action-button\">\n                        <FontAwesomeIcon icon={faDownload} color=\"rgba(67, 47, 135, 0.9)\" size='lg'/></a>\n                    </div>\n                    <div className=\"col-2 col-md-1\">\n                        <a type=\"button\" onClick={deleteRows} className=\"dot action-button\">\n                        <FontAwesomeIcon icon={faTrash} color=\"grey\" size='lg'/></a>\n                    </div>\n                </div>\n                <div className=\"row proxy-row d-xl-none\"></div>\n                </>\n            ) : null}\n            <div className=\"table-container row\">  \n                <div style={{\"padding-top\":\"10px\", \"padding-bottom\":\"0px\", \"padding-left\":\"0px\", \"padding-right\":\"10px\"}} className=\"col-11\">\n                    <table {...getTableProps()}>\n                        <thead>\n                        {headerGroups.map(headerGroup => (\n                            <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => (\n                                <th {...column.getHeaderProps(column.getSortByToggleProps())} {...column.getHeaderProps()}>\n                                {/*column.canGroupBy ? (\n                                    <span {...column.getGroupByToggleProps()}>\n                                    {column.isGrouped ? <span><AiOutlineUngroup/> </span> : <span><AiOutlineGroup/> </span>}\n                                    </span>                                                                \n                                ) : null*/}         \n                                {column.render('Header')}                            \n                                <span>\n                                {column.canSort ? (\n                                    column.isSorted ? (column.isSortedDesc ? <AiFillCaretDown/> : <AiFillCaretUp/>) : ''\n                                ) : null}\n                                </span>\n                                </th>          \n                                            \n                            ))}                        \n                            </tr>\n                        ))}\n                        </thead>\n                        <tbody {...getTableBodyProps()}>\n                        {rows.map((row, i) => {\n                            prepareRow(row)                        \n                            return (\n                            <React.Fragment key={row.getRowProps().key}>                        \n                            <tr className={row.subRows.length ? \"grouped-row\" : \"\"}> \n                                {row.cells.map(cell => {\n                                return (\n                                    <td\n                                    {...cell.getCellProps()}                                \n                                    >\n                                    {cell.isGrouped ? (\n                                        <>\n                                        <span {...row.getToggleRowExpandedProps()}>\n                                            {row.isExpanded ? <AiOutlineDown/> : <AiOutlineRight/>}\n                                        </span>{' '}\n                                        {cell.render('Cell')} {/*({row.subRows.length})*/}\n                                        </>\n                                    ) : cell.isAggregated ? (\n                                        cell.render('Aggregated')\n                                    ) : cell.isPlaceholder ? null : (\n                                        cell.render('Cell')\n                                    )}\n                                    </td>\n                                )\n                                })}\n                            </tr>                        \n                            {row.isExpanded && !row.subRows.length ? (\n                                <tr>\n                                    <td colSpan={visibleColumns.length}>\n                                    {renderRowSubComponent({ row })}\n                                    </td>\n                                </tr>\n                                ) : null}                        \n                            </React.Fragment>                        \n                            )                        \n                        })}\n                        </tbody>\n                    </table>\n                    <pre>\n                        <code>\n                            {/*JSON.stringify({\n                                selectedFlatRows: selectedFlatRows.map((row) => row.original),\n                            },\n                            null,\n                            2\n                        )*/}\n                        </code>\n                    </pre>\n                    <div id=\"hidden-qr\">                    \n                        {\n                            selectedFlatRows.map(row => {\n                                if (row.original == null) {\n                                    return null\n                                } \n                                else {\n                                    return( \n                                        <div style={{display: \"none\"}} key={row.original._id} id={String(row.original._id)+\"-ext\"} className=\"container\">\n                                            <div className=\"row\">                                            \n                                                <h5><b>LOT Number</b>: {row.original.lotNr} {\"\\n\"}</h5>                                                                                                                                                                                            \n                                            </div>               \n                                            <div className=\"row\">                                    \n                                                <QRCode\n                                                    id={String(row.original._id)}\n                                                    value={String(row.original._id)}\n                                                    size={290}\n                                                    level={\"H\"}\n                                                    includeMargin={false}\n                                                />\n                                            </div>              \n                                            <div className=\"row\">\n                                                <p><b>Unique ID</b>: {row.original._id}</p>{' '}    \n                                            </div>                        \n                                            <div className=\"row\">\n                                                <p><b>Pack No</b>: {row.original.unit}</p>                                                                                                    \n                                            </div>                                                                                           \n                                        </div>\n                                    );\n                                }                                        \n                            })\n                        }\n                    </div>\n                </div>\n                <div className=\"col-1 text-center button-col d-none d-xl-block\">\n                    {selectedFlatRows[0] ? (\n                        <ul className=\"list-unstyled\">\n                            <li>\n                                <div>\n                                    <a type=\"button\" onClick={handleModalShow} \n                                        style={{\"backgroundColor\":\"rgba(67, 47, 135, 0.9)\",\n                                            \"boxShadow\":\"0px 0px 5px 0px rgba(67, 47, 135, 0.9)\"}}\n                                        className=\"dot action-button\">\n                                    <FontAwesomeIcon icon={faPencilAlt} color=\"white\" size='lg'/></a>\n                                </div>\n                                <div className=\"subtitle\">Edit</div>\n                            </li>\n                            <li>\n                                <div>\n                                    <a type=\"button\" onClick={disposeReagents} className=\"dot action-button\">\n                                    <FontAwesomeIcon icon={faTimes} color=\"rgba(67, 47, 135, 0.9)\" size='lg'/></a>\n                                </div>\n                                <div className=\"subtitle\">Dispose</div>\n                            </li>\n                            <li>\n                                <div>\n                                    <a type=\"button\" onClick={downloadQR} className=\"dot action-button\">\n                                    <FontAwesomeIcon icon={faDownload} color=\"rgba(67, 47, 135, 0.9)\" size='lg'/></a>\n                                </div>\n                                <div className=\"subtitle\">Download QR</div>\n                            </li>\n                            <li>\n                                <div>\n                                    <a type=\"button\" onClick={deleteRows} className=\"dot action-button\">\n                                    <FontAwesomeIcon icon={faTrash} color=\"grey\" size='lg'/></a>\n                                </div>\n                                <div className=\"subtitle\">Delete</div>\n                            </li>\n                        </ul>\n                    ) : null}\n                </div>\n                <AddReagent isSidebarOpen={props.isSidebarOpen} onSidebarToggle={toggleSidebar} \n                    selectedRow={{selectedFlatRows: selectedFlatRows.map((row) => row.original)[0] != null ? \n                        selectedFlatRows.map((row) => row.original)[0] : \n                        selectedFlatRows.map((row) => row.original)[1]}}\n                    resetAddReagentForm={props.resetAddReagentForm}\n                    changeAddReagentForm={props.changeAddReagentForm} \n                    postReagent={props.postReagent} />        \n                <EditReagent isModalOpen={isModalOpen} handleModalClose={handleModalClose} handleModalOpen={handleModalShow} \n                    selectedRow={{selectedFlatRows: selectedFlatRows.map((row) => row.original)[0] != null ? \n                        selectedFlatRows.map((row) => row.original)[0] : \n                        selectedFlatRows.map((row) => row.original)[1]}} \n                        putReagent={props.putReagent} />                                                   \n            </div>\n            </>\n        );\n    }\n}\n","import React, { useMemo, useState } from 'react';\nimport { useTable, useSortBy, useGlobalFilter, useRowSelect, useExpanded } from 'react-table';\nimport { COLUMNS } from './ColsPrimaryReagents'\nimport './table.css';\nimport {AiFillCaretDown, AiFillCaretUp} from 'react-icons/ai';\nimport { GlobalFilter } from './GlobalFilter';\nimport PrReagentsCards from './PrReagentsCards';\nimport { Button, ButtonGroup } from 'react-bootstrap';\nimport { Checkbox } from './CheckBox';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFolderPlus, faPencilAlt, faDownload, faTimes, faTrash } from '@fortawesome/free-solid-svg-icons'\nimport AddReagent from './AddReagent';\nimport QRCode  from 'qrcode.react';\nimport html2canvas from 'html2canvas';\nimport EditReagent from './EditReagent';\nimport Loader from \"react-loader-spinner\";\n\nexport const PrimaryReagentsRecent = (props) => {\n    \n    const columns = useMemo(() => COLUMNS, [])\n    const data = useMemo(() => props.reagents, [])\n    //const [data, setData] = useState(props.reagents, []);\n    \n    const tableInstance = useTable({\n            columns,\n            data,\n            initialState: {\n                sortBy: [\n                    {\n                        id: 'updatedAt',\n                        desc: true\n                    }\n                ],\n                hiddenColumns: ['updatedAt']\n            },\n        },         \n        useGlobalFilter,\n        useSortBy,\n        useExpanded,\n        useRowSelect,        \n        (hooks) => {\n            hooks.visibleColumns.push((columns) => {\n                return [                    \n                    ...columns,\n                    {\n                        id: 'selection',\n                        Header: ({ getToggleAllRowsSelectedProps }) => (\n                            <Checkbox {...getToggleAllRowsSelectedProps()} />\n                        ),\n                        Cell: ({ row }) => (\n                            <Checkbox {...row.getToggleRowSelectedProps()}/>\n                        )\n                    }    \n                ]\n            })\n        })\n\n    const { \n        getTableProps, \n        getTableBodyProps, \n        headerGroups, \n        rows, \n        prepareRow,\n        state,\n        setGlobalFilter,\n        selectedFlatRows,\n        visibleColumns,\n        //state: { expanded },\n    } = tableInstance\n\n    const { globalFilter } = state\n\n    const [selectedRow, setSelectRows] = useState('')\n    const [isSidebarOpen, setSidebarState] = useState(false)\n    const [isModalOpen, setModalState] = useState(false)\n\n    const toggleSidebar = (form=null) => {     \n        setSidebarState(!isSidebarOpen);\n        props.toggleSidebar();\n    }    \n\n    const handleModalShow = () => {\n        setModalState(true);\n    }\n\n    const handleModalClose = () => {\n        setModalState(false);\n    }\n\n    const deleteRows = () => { \n        selectedFlatRows.forEach(row => {  \n            if (row.original) {\n                var update = {\n                    _id: row.original._id,\n                    status: \"DELETED\"\n                }\n                props.putReagent(update);\n            }   \n        });\n    }\n\n    const disposeReagents = () => { \n        selectedFlatRows.forEach(row => { \n            if (row.original) {    \n                var update = {\n                    _id: row.original._id,\n                    status: \"DISPOSED\"\n                }\n                props.putReagent(update, \"dispose\");\n            }\n        });\n    }\n\n    const downloadQR = () => {\n\n        document.getElementById(\"hidden-qr\").style.display = \"block\";\n        //document.getElementById(\"hidden-qr\").style.marginTop = \"1500px\";\n\n        selectedFlatRows.forEach(row => {\n            if (row.original != null) {\n                var elemId = String(row.original._id)+\"-ext\" \n                var elem = document.getElementById(`${elemId}`)\n                elem.style.display = \"block\";           \n                html2canvas(elem).then(function(canvas) {\n                    elem.style.display = \"none\";  \n                    const pngUrl = canvas\n                        .toDataURL(\"image/png\")\n                        .replace(\"image/png\", \"image/octet-stream\");  \n                    let downloadLink = document.createElement(\"a\");\n                    downloadLink.href = pngUrl;\n                    downloadLink.download = elemId+\".png\";\n                    document.body.appendChild(downloadLink);\n                    downloadLink.click();\n                    document.body.removeChild(downloadLink);                                   \n                })    \n            }            \n        });\n\n        document.getElementById(\"hidden-qr\").style.display = \"none\";\n        //document.getElementById(\"hidden-qr\").style.marginTop = \"0px\";\n    }\n\n    const renderRowSubComponent = React.useCallback(\n        ({ row }) => (\n        //   <pre\n        //     style={{\n        //       fontSize: '10px',\n        //     }}\n        //   >\n        //     <code>{JSON.stringify({ values: row.original }, null, 2)}</code>\n        //   </pre>\n        // ),\n            <PrReagentsCards reagentValues={row.original}/>\n        )\n    )\n\n    if (props.reagentsLoading) {\n        return (\n            <>\n            <div className=\"row header table\">\n                <div className=\"col-6 col-sm-8 col-lg-6\">\n                    <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\n                </div>\n                <div className=\"col ml-auto text-right\">\n                    <span>\n                        <a style={{\"font-size\": \"medium\", \"color\":\"rgba(67, 47, 135, 0.9)\"}} type=\"button\" onClick={toggleSidebar}>Add Reagent<span style={{\"padding-left\":\"10px\"}}><FontAwesomeIcon icon={faFolderPlus} size='lg' /></span></a>\n                    </span>\n                </div>\n            </div>\n            <div style={{\"paddingTop\":\"61px\"}} className=\"table-container row\">  \n                <div style={{\"padding-top\":\"100px\", \"padding-bottom\":\"0px\", \"padding-left\":\"0px\", \"padding-right\":\"10px\"}} className=\"col-11 text-center\">\n                    <Loader\n                        type=\"TailSpin\"\n                        color=\"rgba(67, 47, 135, 0.9)\"\n                        height={50}\n                        width={50}\n                        timeout={2000}\n                    />\n                </div>\n            </div>\n            </>\n        );\n    }\n    else {\n        return(\n            <>        \n            <div className=\"row header table\">\n                <div className=\"col-6 col-sm-8 col-lg-6\">\n                    <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\n                </div>\n                <div className=\"col ml-auto text-right\">\n                    <span>\n                        <a style={{\"font-size\": \"medium\", \"color\":\"rgba(67, 47, 135, 0.9)\"}} type=\"button\" onClick={toggleSidebar}>Add Reagent<span style={{\"padding-left\":\"10px\"}}><FontAwesomeIcon icon={faFolderPlus} size='lg' /></span></a>\n                    </span>\n                </div>\n            </div>\n            {selectedFlatRows[0] ? (\n                <>\n                <div className=\"action-button-row row d-xl-none float-left\">\n                    <div className=\"col-2 col-md-1\">\n                        <a type=\"button\" \n                            style={{\"backgroundColor\":\"rgba(67, 47, 135, 0.9)\",\n                                \"boxShadow\":\"0px 0px 5px 0px rgba(67, 47, 135, 0.9)\"}}  \n                            onClick={handleModalShow} className=\"dot action-button\">\n                        <FontAwesomeIcon icon={faPencilAlt} color=\"white\" size='lg'/></a>\n                    </div>\n                    <div className=\"col-2 col-md-1\">\n                        <a type=\"button\" onClick={disposeReagents} className=\"dot action-button\">\n                        <FontAwesomeIcon icon={faTimes} color=\"rgba(67, 47, 135, 0.9)\" size='lg'/></a>\n                    </div>\n                    <div className=\"col-2 col-md-1\">\n                        <a type=\"button\" onClick={downloadQR} className=\"dot action-button\">\n                        <FontAwesomeIcon icon={faDownload} color=\"rgba(67, 47, 135, 0.9)\" size='lg'/></a>\n                    </div>\n                    <div className=\"col-2 col-md-1\">\n                        <a type=\"button\" onClick={deleteRows} className=\"dot action-button\">\n                        <FontAwesomeIcon icon={faTrash} color=\"grey\" size='lg'/></a>\n                    </div>\n                </div>\n                <div className=\"row proxy-row d-xl-none\"></div>\n                </>\n            ) : null}\n            <div className=\"table-container row\"> \n                <div style={{\"padding-top\":\"10px\", \"padding-bottom\":\"0px\", \"padding-left\":\"0px\", \"padding-right\":\"10px\"}} className=\"col-11\">\n                    <table {...getTableProps()}>\n                        <thead>\n                            {headerGroups.map((headerGroup) => (\n                                <tr {...headerGroup.getHeaderGroupProps()}>\n                                    {headerGroup.headers.map(column => (\n                                            <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                                {column.render('Header')}\n                                                <span>\n                                                    {column.isSorted ? (column.isSortedDesc ? <AiFillCaretDown/> : <AiFillCaretUp/>) : ''}\n                                                </span>\n                                            </th>\n                                        ))}\n                                </tr>\n                            ))}                \n                        </thead>\n                        <tbody {...getTableBodyProps()}>\n                        {rows.map((row, i) => {\n                            prepareRow(row)\n                            return (\n                            // Use a React.Fragment here so the table markup is still valid\n                            <React.Fragment {...row.getRowProps()}>\n                                <tr>\n                                {row.cells.map(cell => {\n                                    return (\n                                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                    )\n                                })}\n                                </tr>\n                                {row.isExpanded ? (\n                                <tr>\n                                    <td colSpan={visibleColumns.length}>\n                                    {renderRowSubComponent({ row })}\n                                    </td>\n                                </tr>\n                                ) : null}\n                            </React.Fragment>\n                            )\n                        })}\n                        </tbody>\n                    </table>\n                    <div id=\"hidden-qr\">                    \n                        {\n                            selectedFlatRows.map(row => {\n                                if (row.original == null) {\n                                    return null\n                                } \n                                else {\n                                    return( \n                                        <div style={{display: \"none\"}} key={row.original._id} id={String(row.original._id)+\"-ext\"} className=\"container text-center\">\n                                            <div className=\"row\">                                            \n                                                <h5><b>LOT Number</b>: {row.original.lotNr} {\"\\n\"}</h5>                                                                                                                                                                                            \n                                            </div>               \n                                            <div className=\"row\">                                    \n                                                <QRCode\n                                                    id={String(row.original._id)}\n                                                    value={String(row.original._id)}\n                                                    size={290}\n                                                    level={\"H\"}\n                                                    includeMargin={false}\n                                                />\n                                            </div>              \n                                            <div className=\"row\">\n                                                <p><b>Unique ID</b>: {row.original._id}</p>{' '}    \n                                            </div>                        \n                                            <div className=\"row\">\n                                                <p><b>Pack No</b>: {row.original.unit}</p>                                                                                                    \n                                            </div>                                                                                           \n                                        </div>\n                                    );\n                                }                                        \n                            })\n                        }\n                    </div>\n                </div>\n                <div className=\"col-1 text-center button-col d-none d-xl-block\">\n                    {selectedFlatRows[0] ? (\n                        <ul className=\"list-unstyled\">\n                            <li>\n                                <div>\n                                    <a type=\"button\" onClick={handleModalShow} \n                                        style={{\"backgroundColor\":\"rgba(67, 47, 135, 0.9)\",\n                                                \"boxShadow\":\"0px 0px 5px 0px rgba(67, 47, 135, 0.9)\"}} \n                                        className=\"dot action-button\">\n                                    <FontAwesomeIcon icon={faPencilAlt} color=\"white\" size='lg'/></a>\n                                </div>\n                                <div className=\"subtitle\">Edit</div>\n                            </li>\n                            <li>\n                                <div>\n                                    <a type=\"button\" onClick={disposeReagents} className=\"dot action-button\">\n                                    <FontAwesomeIcon icon={faTimes} color=\"rgba(67, 47, 135, 0.9)\" size='lg'/></a>\n                                </div>\n                                <div className=\"subtitle\">Dispose</div>\n                            </li>\n                            <li>\n                                <div>\n                                    <a type=\"button\" onClick={downloadQR} className=\"dot action-button\">\n                                    <FontAwesomeIcon icon={faDownload} color=\"rgba(67, 47, 135, 0.9)\" size='lg'/></a>\n                                </div>\n                                <div className=\"subtitle\">Download QR</div>\n                            </li>\n                            <li>\n                                <div>\n                                    <a type=\"button\" onClick={deleteRows} className=\"dot action-button\">\n                                    <FontAwesomeIcon icon={faTrash} color=\"grey\" size='lg'/></a>\n                                </div>\n                                <div className=\"subtitle\">Delete</div>\n                            </li>\n                        </ul>\n                    ) : null}\n                </div>  \n                <AddReagent isSidebarOpen={props.isSidebarOpen} onSidebarToggle={toggleSidebar} \n                    selectedRow={{selectedFlatRows: selectedFlatRows.map((row) => row.original)[0] != null ? \n                        selectedFlatRows.map((row) => row.original)[0] : \n                        selectedFlatRows.map((row) => row.original)[1]}}\n                    resetAddReagentForm={props.resetAddReagentForm}\n                    changeAddReagentForm={props.changeAddReagentForm} \n                    postReagent={props.postReagent} />        \n                <EditReagent isModalOpen={isModalOpen} handleModalClose={handleModalClose} handleModalOpen={handleModalShow} \n                    selectedRow={{selectedFlatRows: selectedFlatRows.map((row) => row.original)[0] != null ? \n                        selectedFlatRows.map((row) => row.original)[0] : \n                        selectedFlatRows.map((row) => row.original)[1]}} \n                        putReagent={props.putReagent} /> \n            </div>\n            </>\n        );\n    }\n}\n\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { useTable, useSortBy, useGlobalFilter, useRowSelect, useExpanded } from 'react-table';\nimport { COLUMNS } from './ColsPrimaryReagents'\nimport './table.css';\nimport {AiFillCaretDown, AiFillCaretUp} from 'react-icons/ai';\nimport { GlobalFilter } from './GlobalFilter';\nimport PrReagentsCards from './PrReagentsCards';\nimport { Button, ButtonGroup } from 'react-bootstrap';\nimport { Checkbox } from './CheckBox';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFolderPlus, faPencilAlt, faDownload, faTimes, faUndo } from '@fortawesome/free-solid-svg-icons'\nimport Loader from \"react-loader-spinner\";\n\nexport const PrimaryReagentsBin = (props) => {\n    \n    const columns = useMemo(() => COLUMNS, [])\n    const data = useMemo(() => props.deletedReagents, [])\n    //const [data, setData] = useState(props.deletedReagents, []);\n\n\n    const tableInstance = useTable({\n            columns,\n            data,\n            initialState: {\n                sortBy: [\n                    {\n                        id: 'updatedAt',\n                        desc: true\n                    }\n                ],\n                hiddenColumns: ['updatedAt']\n            },\n        },         \n        useGlobalFilter,\n        useSortBy,\n        useExpanded,\n        useRowSelect,        \n        (hooks) => {\n            hooks.visibleColumns.push((columns) => {\n                return [                    \n                    ...columns,\n                    {\n                        id: 'selection',\n                        Header: ({ getToggleAllRowsSelectedProps }) => (\n                            <Checkbox {...getToggleAllRowsSelectedProps()} />\n                        ),\n                        Cell: ({ row }) => (\n                            <Checkbox {...row.getToggleRowSelectedProps()}/>\n                        )\n                    }    \n                ]\n            })\n        })\n\n    const { \n        getTableProps, \n        getTableBodyProps, \n        headerGroups, \n        rows, \n        prepareRow,\n        state,\n        setGlobalFilter,\n        selectedFlatRows,\n        visibleColumns,\n        //state: { expanded },\n    } = tableInstance\n\n    const { globalFilter } = state\n\n    const [selectedRow, setSelectRows] = useState('')\n    const [isSidebarOpen, setSidebarState] = useState(false)\n    const [isModalOpen, setModalState] = useState(false)\n\n    const handleModalShow = () => {\n        setModalState(true);\n    }\n\n    const handleModalClose = () => {\n        setModalState(false);\n    }\n\n    const undoDelete = () => { \n        selectedFlatRows.forEach(row => {     \n            var update = {\n                _id: row.original._id,\n                status: \"OK\"\n            }\n            props.putReagent(update);\n        });\n    }\n\n    const renderRowSubComponent = React.useCallback(\n        ({ row }) => (\n        //   <pre\n        //     style={{\n        //       fontSize: '10px',\n        //     }}\n        //   >\n        //     <code>{JSON.stringify({ values: row.original }, null, 2)}</code>\n        //   </pre>\n        // ),\n        // []\n            <PrReagentsCards reagentValues={row.original} />\n        )\n      )\n    \n    return(\n        <>        \n        <div style={{\"height\":\"61px\",\"border-bottom\":\"1px solid #E2E2E4\", \"background-color\": \"white\", \"width\":\"83.3333%\",\n                            \"display\": \"flex\",\n                            \"align-items\": \"center\",\n                            \"position\":\"fixed\",\n                            \"z-index\":\"10\"}} className=\"row header table\">\n            <div className=\"col-6 col-sm-8 col-lg-6\">\n                <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\n            </div>\n            <div className=\"col-2 ml-auto text-right\">\n            </div>\n        </div>\n        {selectedFlatRows[0] ? (\n                <>\n                <div className=\"action-button-row row d-xl-none float-left\">\n                    <div className=\"col-2 col-md-1\">\n                        <a type=\"button\" onClick={undoDelete} \n                            style={{\"backgroundColor\":\"rgba(67, 47, 135, 0.9)\",\n                                \"boxShadow\":\"0px 0px 5px 0px rgba(67, 47, 135, 0.9)\"}}  \n                            className=\"dot action-button\">\n                        <FontAwesomeIcon icon={faUndo} color=\"white\" size='lg'/></a>\n                    </div>\n                </div>\n                <div className=\"row proxy-row d-xl-none\"></div>\n                </>\n        ) : null}\n        <div className=\"table-container row\"> \n            <div style={{\"padding-top\":\"10px\", \"padding-bottom\":\"0px\", \"padding-left\":\"0px\", \"padding-right\":\"10px\"}} className=\"col-11\">\n                <table {...getTableProps()}>\n                    <thead>\n                        {headerGroups.map((headerGroup) => (\n                            <tr {...headerGroup.getHeaderGroupProps()}>\n                                {headerGroup.headers.map(column => (\n                                        <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                            {column.render('Header')}\n                                            <span>\n                                                {column.isSorted ? (column.isSortedDesc ? <AiFillCaretDown/> : <AiFillCaretUp/>) : ''}\n                                            </span>\n                                        </th>\n                                    ))}\n                            </tr>\n                        ))}                \n                    </thead>\n                    <tbody {...getTableBodyProps()}>\n                    {rows.map((row, i) => {\n                        prepareRow(row)\n                        return (\n                        // Use a React.Fragment here so the table markup is still valid\n                        <React.Fragment {...row.getRowProps()}>\n                            <tr>\n                            {row.cells.map(cell => {\n                                return (\n                                <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                )\n                            })}\n                            </tr>\n                            {/*\n                                If the row is in an expanded state, render a row with a\n                                column that fills the entire length of the table.\n                            */}\n                            {row.isExpanded ? (\n                            <tr>\n                                <td colSpan={visibleColumns.length}>\n                                {/*\n                                    Inside it, call our renderRowSubComponent function. In reality,\n                                    you could pass whatever you want as props to\n                                    a component like this, including the entire\n                                    table instance. But for this example, we'll just\n                                    pass the row\n                                    */}\n                                {renderRowSubComponent({ row })}\n                                </td>\n                            </tr>\n                            ) : null}\n                        </React.Fragment>\n                        )\n                    })}\n                    </tbody>\n                </table>\n            </div>\n            <div className=\"col-1 text-center button-col d-none d-xl-block\">\n                {selectedFlatRows[0] ? (\n                        <ul className=\"list-unstyled\">\n                            <li>\n                                <div className=\"text-center\">\n                                    <a type=\"button\" onClick={undoDelete} style={{\"backgroundColor\":\"rgba(67, 47, 135, 0.9)\"}} className=\"dot action-button\">\n                                    <FontAwesomeIcon icon={faUndo} color=\"white\" size='lg'/></a>\n                                </div>\n                                <div className=\"subtitle\">Restore</div>\n                            </li>\n                        </ul>\n                ) : null}\n            </div>  \n        </div>\n        </>\n    );\n}\n\n","import { format } from 'date-fns';\nimport {AiOutlineRight, AiOutlineDown} from 'react-icons/ai'\n\nexport const COLUMNS = [\n    {\n        // Make an expander cell\n        Header: () => null, // No header\n        id: 'expander', // It needs an ID\n        Cell: ({ row }) => (\n          <span {...row.getToggleRowExpandedProps()}>\n            {row.isExpanded ? <AiOutlineDown/> : <AiOutlineRight/>}\n          </span>\n        ),\n    },\n    {\n        Header: 'Date Created',\n        accessor: 'dateCreated',\n        Cell: ({value}) => (value!=null ? format(new Date(value), 'dd/MM/yyyy'): '')\n    },    \n    {\n        Header: 'Reagent Name',\n        accessor: 'reagentName',\n    },\n    {\n        Header: 'Lot Nr',\n        accessor: 'lotNr',\n    },\n    {\n        Header: 'Expiry Date',\n        accessor: 'expiryDate',\n        Cell: ({value}) => (value!=null ? (new Date(value) < new Date() ? \n                                <span style={{\"color\":\"#F08080\"}}>{format(new Date(value), 'dd/MM/yyyy')}</span> :\n                                <span>{format(new Date(value), 'dd/MM/yyyy')}</span>) : '')\n    },    \n    {\n        Header: 'Status',\n        accessor: 'status',\n        Cell: ({value}) => {\n            switch(value) {\n                case \"DISPOSED\":\n                    return <><span style={{\"color\":\"orange\"}}>Disposed\n                    </span> <span style={{\"backgroundColor\":\"orange\", \"height\":\"10px\", \"width\":\"10px\", \"borderRadius\":\"50%\", \"display\":\"inline-block\"}}></span></>;\n                case \"DELETED\":\n                    return <><span style={{\"color\":\"#F08080\"}}>Deleted\n                    </span> <span style={{\"backgroundColor\":\"#F08080\", \"height\":\"10px\", \"width\":\"10px\", \"borderRadius\":\"50%\", \"display\":\"inline-block\"}}></span></>;\n                case \"OK\":\n                    return <><span style={{\"color\":\"lightgreen\"}}>Ok\n                    </span> <span style={{\"backgroundColor\":\"lightgreen\", \"height\":\"10px\", \"width\":\"10px\", \"borderRadius\":\"50%\", \"display\":\"inline-block\"}}></span></>;\n                default:\n                    return \"\";\n            }\n        },\n        canGroupBy: false\n    },\n    {\n        Header: 'Created By',\n        accessor: 'createdBy',\n    },\n    {\n        Header: 'Updated At',\n        accessor: 'updatedAt',\n    }    \n]","import React, { Component } from 'react';\nimport { Modal, Button}  from \"react-bootstrap\";\nimport { Form, Field } from 'react-final-form';\n\nconst required = value => (value ? undefined : 'Required')\n\nclass EditSecReagent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            reagentName: '',\n            lotNr: '',\n            expiryDate: null,\n            status: ''\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({ reagentName: nextProps.selectedRow.selectedFlatRows ? nextProps.selectedRow.selectedFlatRows.reagentName : ''});\n        this.setState({ lotNr: nextProps.selectedRow.selectedFlatRows ? nextProps.selectedRow.selectedFlatRows.lotNr : ''});\n        this.setState({ expiryDate: nextProps.selectedRow.selectedFlatRows ? nextProps.selectedRow.selectedFlatRows.expiryDate.substring(0, 10) : null});\n        this.setState({ status: nextProps.selectedRow.selectedFlatRows ? nextProps.selectedRow.selectedFlatRows.status : ''});\n    }      \n\n    handleSubmit = (values) => {\n        var expiryDate = new Date(values.expiryDate);\n        expiryDate = expiryDate.toISOString();\n\n        var updatedReagent = {\n            _id: this.props.selectedRow.selectedFlatRows._id,\n            reagentName: values.reagentName,\n            lotNr: values.lotNr,\n            expiryDate: expiryDate,\n            status: values.status\n        }\n\n        if ((values.status != this.state.status) && (values.status==\"DISPOSED\")) {\n            var action = \"dispose\"    \n        }\n        else {\n            var action = \"editDetails\"\n        }\n\n        this.props.putSecReagent(updatedReagent, action);\n\n        this.props.handleModalClose();\n\n    }\n\n\n    render() {\n        return(\n            <Modal show={this.props.isModalOpen} onHide={this.props.handleModalClose}>\n                <Modal.Header closeButton>\n                    <h4>Edit Reagent</h4>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"container-fluid\">\n                        <Form\n                            onSubmit={this.handleSubmit}\n                            initialValues={{ \n                                reagentName: this.state.reagentName,\n                                lotNr: this.state.lotNr,\n                                expiryDate: this.state.expiryDate,\n                                status: this.state.status\n                            }}\n                            render={({ handleSubmit, form, submitting, pristine, values }) => (\n                                <div className=\"row ml-2 mt-2\">\n                                    <div className=\"col-12\">\n                                        <form id=\"editReagentForm\" onSubmit={handleSubmit}>\n                                            <div className=\"row\">\n                                                <Field\n                                                name=\"reagentName\"\n                                                component=\"input\"\n                                                type=\"text\"\n                                                validate={required}\n                                                >\n                                                {({ input, meta }) => (\n                                                    <>\n                                                    <div className=\"col-6\">\n                                                        <label>Reagent Name</label>\n                                                        <input {...input} placeholder=\"Reagent Name\"/>\n                                                        {meta.error && meta.touched && <span className=\"error\">{meta.error}</span>}\n                                                    </div>\n                                                    </>\n                                                )}\n                                                </Field>\n                                                <Field\n                                                name=\"lotNr\"\n                                                component=\"input\"\n                                                type=\"text\"\n                                                validate={required}\n                                                >\n                                                {({ input, meta }) => (\n                                                    <div className=\"col-6\">\n                                                        <label>Lot Number</label>\n                                                        <input {...input} placeholder=\"Lot Number\"/>\n                                                        {meta.error && meta.touched && <span className=\"error\">{meta.error}</span>}\n                                                    </div>\n                                                )}\n                                                </Field>\n                                            </div>\n                                            <div className=\"row\">\n                                                <Field\n                                                name=\"expiryDate\"\n                                                component=\"input\"\n                                                type=\"date\"\n                                                validate={required}\n                                                >\n                                                {({ input, meta }) => (\n                                                    <div className=\"col-6\">\n                                                        <label>Expiry Date</label>\n                                                        <input {...input}/>\n                                                        {meta.error && meta.touched && <span className=\"error\">{meta.error}</span>}\n                                                    </div>\n                                                )}\n                                                </Field>\n                                                <div className=\"col-6\">\n                                                    <label className=\"mr-5\">Status</label>\n                                                    <Field\n                                                    name=\"status\"\n                                                    component=\"select\"\n                                                    defaultValue={this.state.status}\n                                                    >\n                                                        <option selected value=\"OK\">OK</option>\n                                                        <option value=\"DISPOSED\">DISPOSED</option>\n                                                    </Field>\n                                                </div>\n                                            </div>                                        \n                                            <div className=\"row\">\n                                                <div className=\"col-12\">\n                                                    <button className=\"cancel-button\" type=\"button\"\n                                                        onClick={() => {\n                                                            this.props.handleModalClose();\n                                                            var fields = form.getRegisteredFields()\n                                                            fields.map(field => form.resetFieldState(field))}}>\n                                                        Cancel\n                                                    </button>\n                                                    <button className=\"submit-button\" type=\"submit\" disabled={submitting || pristine}>\n                                                        Save Changes\n                                                    </button>\n                                                </div>                                                    \n                                            </div>\n                                        </form>\n                                    </div>                                               \n                                </div>\n                            )}\n                        />\n                    </div>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n\n}\n\nexport default EditSecReagent;","import React, { Component } from 'react';\nimport { format } from 'date-fns';\n\nclass SecReagentsCards extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        return(\n            <div style={{\"padding\":\"20px\"}} className=\"row\">\n                <div style={{\"borderRight\":\"1px solid lightgrey\"}} className=\"col-4\">\n                    <div className=\"row reagent-card-value\">\n                        <div className=\"col\">\n                            <b>First Used By</b>\n                        </div>\n                        <div className=\"col\">\n                            {this.props.reagentValues.firstUsedBy}\n                        </div>\n                    </div>\n                    <div className=\"row reagent-card-value\">\n                        <div className=\"col\">\n                            <b>Created By</b>\n                        </div>\n                        <div className=\"col\">\n                            {this.props.reagentValues.createdBy}\n                        </div>\n                    </div>\n                    <div className=\"row reagent-card-value\">\n                        <div className=\"col\">\n                            <b>Last Edited By</b>\n                        </div>\n                        <div className=\"col\">\n                            {this.props.reagentValues.lastEditedBy}\n                        </div>\n                    </div>\n                    <div className=\"row reagent-card-value\">\n                        <div className=\"col\">\n                            <b>Disposed By</b>\n                        </div>\n                        <div className=\"col\">\n                            {this.props.reagentValues.discardedBy}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-8\">\n                    <div className=\"row reagent-card-value\">\n                        <div className=\"col\">\n                            <h4>Compositions</h4>\n                        </div>\n                    </div>\n                    {this.props.reagentValues.reagents ? (this.props.reagentValues.reagents.map((reagent, index) => (\n                        <div className=\"row reagent-card-value\">\n                            <div className=\"col col-1\">\n                                <b>{index+1}.</b>\n                            </div>\n                            <div className=\"col col-2\">\n                                <b>LOT Number</b>\n                            </div>\n                            <div className=\"col\">\n                                {reagent.lotNr}\n                            </div>\n                            <div className=\"col col-2\">\n                                <b>Reagent Name</b>\n                            </div>\n                            <div className=\"col\">\n                                {reagent.reagentName}\n                            </div>\n                        </div>\n                    ))) : ''}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SecReagentsCards;","import React, { useMemo, useState } from 'react';\nimport { useTable, useSortBy, useGlobalFilter, useRowSelect, useExpanded } from 'react-table';\nimport { COLUMNS } from './ColsSecReagents'\nimport './table.css';\nimport {AiFillCaretDown, AiFillCaretUp} from 'react-icons/ai';\nimport { GlobalFilter } from './GlobalFilter';\nimport { Button, ButtonGroup } from 'react-bootstrap';\nimport { Checkbox } from './CheckBox';\nimport EditSecReagent from './EditSecReagent';\nimport SecReagentsCards from './SecReagentsCards';\nimport QRCode  from 'qrcode.react';\nimport html2canvas from 'html2canvas';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFolderPlus, faPencilAlt, faDownload, faTimes, faTrash } from '@fortawesome/free-solid-svg-icons'\nimport Loader from \"react-loader-spinner\";\n\nexport const SecReagentsOverview = (props) => {\n    \n    const columns = useMemo(() => COLUMNS, [])\n    const data = useMemo(() => props.secReagents, [])\n    //const [data, setData] = useState(props.secReagents, []);\n    \n    const tableInstance = useTable({\n            columns,\n            data,\n            initialState: {\n                sortBy: [\n                    {\n                        id: 'dateCreated',\n                        desc: true\n                    }\n                ],\n                hiddenColumns: ['updatedAt']\n            },\n        },         \n        useGlobalFilter,\n        useSortBy,\n        useExpanded,\n        useRowSelect,        \n        (hooks) => {\n            hooks.visibleColumns.push((columns) => {\n                return [                    \n                    ...columns,\n                    {\n                        id: 'selection',\n                        Header: ({ getToggleAllRowsSelectedProps }) => (\n                            <Checkbox {...getToggleAllRowsSelectedProps()} />\n                        ),\n                        Cell: ({ row }) => (\n                            <Checkbox {...row.getToggleRowSelectedProps()}/>\n                        )\n                    }    \n                ]\n            })\n        })\n\n    const { \n        getTableProps, \n        getTableBodyProps, \n        headerGroups, \n        rows, \n        prepareRow,\n        state,\n        setGlobalFilter,\n        selectedFlatRows,\n        visibleColumns,\n        //state: { expanded },\n    } = tableInstance\n\n    const { globalFilter } = state\n\n    const [selectedRow, setSelectRows] = useState('')\n\n    const [isModalOpen, setModalState] = useState(false)\n\n    const handleModalShow = () => {\n        setModalState(true);\n    }\n\n    const handleModalClose = () => {\n        setModalState(false);\n    }\n\n    const deleteRows = () => { \n        selectedFlatRows.forEach(row => {  \n            if (row.original) {\n                var update = {\n                    _id: row.original._id,\n                    status: \"DELETED\"\n                }\n                props.putSecReagent(update);\n            }   \n        });\n    }\n\n    const disposeReagents = () => { \n        selectedFlatRows.forEach(row => { \n            if (row.original) {    \n                var update = {\n                    _id: row.original._id,\n                    status: \"DISPOSED\"\n                }\n                props.putSecReagent(update, \"dispose\");\n            }\n        });\n    }\n\n    const downloadQR = () => {\n\n        document.getElementById(\"hidden-qr\").style.display = \"block\";\n        //document.getElementById(\"hidden-qr\").style.marginTop = \"1500px\";\n\n        selectedFlatRows.forEach(row => {\n            if (row.original != null) {\n                var elemId = String(row.original._id)+\"-ext\" \n                var elem = document.getElementById(`${elemId}`)\n                elem.style.display = \"block\";           \n                html2canvas(elem).then(function(canvas) {\n                    elem.style.display = \"none\";  \n                    const pngUrl = canvas\n                        .toDataURL(\"image/png\")\n                        .replace(\"image/png\", \"image/octet-stream\");  \n                    let downloadLink = document.createElement(\"a\");\n                    downloadLink.href = pngUrl;\n                    downloadLink.download = elemId+\".png\";\n                    document.body.appendChild(downloadLink);\n                    downloadLink.click();\n                    document.body.removeChild(downloadLink);                                   \n                })    \n            }            \n        });\n\n        document.getElementById(\"hidden-qr\").style.display = \"none\";\n        //document.getElementById(\"hidden-qr\").style.marginTop = \"0px\";\n    }\n\n    const renderRowSubComponent = React.useCallback(\n        ({ row }) => (\n        //   <pre\n        //     style={{\n        //       fontSize: '10px',\n        //     }}\n        //   >\n        //     <code>{JSON.stringify({ values: row.original }, null, 2)}</code>\n        //   </pre>\n        // ),\n        // []\n           <SecReagentsCards reagentValues={row.original}/>\n        )\n    )\n    \n    if (props.secReagentsLoading) {\n        return (\n            <>\n            <div className=\"row header table\">\n                <div className=\"col-12 col-lg-6\">\n                    <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\n                </div>\n            </div>\n            <div className=\"table-container row\">  \n                <div style={{\"padding-top\":\"100px\", \"padding-bottom\":\"0px\", \"padding-left\":\"0px\", \"padding-right\":\"10px\"}} className=\"col-11 text-center\">\n                    <Loader\n                        type=\"TailSpin\"\n                        color=\"rgba(67, 47, 135, 0.9)\"\n                        height={50}\n                        width={50}\n                        timeout={3000} //3 secs\n                    />\n                </div>\n            </div>\n            </>\n        );\n    }\n    else{\n        return(\n            <>        \n            <div className=\"row header table\">\n                <div className=\"col-12 col-lg-6\">\n                    <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\n                </div>\n            </div>\n            {selectedFlatRows[0] ? (\n                <>\n                <div className=\"action-button-row row d-xl-none float-left\">\n                    <div className=\"col-2 col-md-1\">\n                        <a type=\"button\" \n                            style={{\"backgroundColor\":\"rgba(67, 47, 135, 0.9)\",\n                                \"boxShadow\":\"0px 0px 5px 0px rgba(67, 47, 135, 0.9)\"}}  \n                            onClick={handleModalShow} className=\"dot action-button\">\n                        <FontAwesomeIcon icon={faPencilAlt} color=\"white\" size='lg'/></a>\n                    </div>\n                    <div className=\"col-2 col-md-1\">\n                        <a type=\"button\" onClick={disposeReagents} className=\"dot action-button\">\n                        <FontAwesomeIcon icon={faTimes} color=\"rgba(67, 47, 135, 0.9)\" size='lg'/></a>\n                    </div>\n                    <div className=\"col-2 col-md-1\">\n                        <a type=\"button\" onClick={downloadQR} className=\"dot action-button\">\n                        <FontAwesomeIcon icon={faDownload} color=\"rgba(67, 47, 135, 0.9)\" size='lg'/></a>\n                    </div>\n                    <div className=\"col-2 col-md-1\">\n                        <a type=\"button\" onClick={deleteRows} className=\"dot action-button\">\n                        <FontAwesomeIcon icon={faTrash} color=\"grey\" size='lg'/></a>\n                    </div>\n                </div>\n                <div className=\"row proxy-row d-xl-none\"></div>\n                </>\n            ) : null}\n            <div className=\"table-container row\"> \n                <div style={{\"padding-top\":\"10px\", \"padding-bottom\":\"0px\", \"padding-left\":\"0px\", \"padding-right\":\"10px\"}} className=\"col-11\">\n                    <table {...getTableProps()}>\n                        <thead>\n                            {headerGroups.map((headerGroup) => (\n                                <tr {...headerGroup.getHeaderGroupProps()}>\n                                    {headerGroup.headers.map(column => (\n                                            <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                                {column.render('Header')}\n                                                <span>\n                                                    {column.isSorted ? (column.isSortedDesc ? <AiFillCaretDown/> : <AiFillCaretUp/>) : ''}\n                                                </span>\n                                            </th>\n                                        ))}\n                                </tr>\n                            ))}                \n                        </thead>\n                        <tbody {...getTableBodyProps()}>\n                        {rows.map((row, i) => {\n                            prepareRow(row)\n                            return (\n                            // Use a React.Fragment here so the table markup is still valid\n                            <React.Fragment {...row.getRowProps()}>\n                                <tr>\n                                {row.cells.map(cell => {\n                                    return (\n                                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                    )\n                                })}\n                                </tr>\n                                {/*\n                                    If the row is in an expanded state, render a row with a\n                                    column that fills the entire length of the table.\n                                */}\n                                {row.isExpanded ? (\n                                <tr>\n                                    <td colSpan={visibleColumns.length}>\n                                    {/*\n                                        Inside it, call our renderRowSubComponent function. In reality,\n                                        you could pass whatever you want as props to\n                                        a component like this, including the entire\n                                        table instance. But for this example, we'll just\n                                        pass the row\n                                        */}\n                                    {renderRowSubComponent({ row })}\n                                    </td>\n                                </tr>\n                                ) : null}\n                            </React.Fragment>\n                            )\n                        })}\n                        </tbody>\n                    </table>\n                    <div id=\"hidden-qr\">                    \n                        {\n                            selectedFlatRows.map(row => {\n                                if (row.original == null) {\n                                    return null\n                                } \n                                else {\n                                    return( \n                                        <div style={{display: \"none\"}} key={row.original._id} id={String(row.original._id)+\"-ext\"} className=\"container\">\n                                            <div className=\"row\">                                            \n                                                <h5><b>LOT Number</b>: {row.original.lotNr} {\"\\n\"}</h5>                                                                                                                                                                                            \n                                            </div>               \n                                            <div className=\"row\">                                    \n                                                <QRCode\n                                                    id={String(row.original._id)}\n                                                    value={String(row.original._id)}\n                                                    size={290}\n                                                    level={\"H\"}\n                                                    includeMargin={false}\n                                                />\n                                            </div>              \n                                            <div className=\"row\">\n                                                <p><b>Unique ID</b>: {row.original._id}</p>{' '}    \n                                            </div>                                                                                    \n                                        </div>\n                                    );\n                                }                                        \n                            })\n                        }\n                    </div>\n                </div>\n                <div className=\"col-1 text-center button-col d-none d-xl-block\">\n                    {selectedFlatRows[0] ? (\n                        <ul className=\"list-unstyled\">\n                            <li>\n                                <div>\n                                    <a type=\"button\" onClick={handleModalShow} \n                                        style={{\"backgroundColor\":\"rgba(67, 47, 135, 0.9)\",\n                                            \"boxShadow\":\"0px 0px 5px 0px rgba(67, 47, 135, 0.9)\"}}\n                                        className=\"dot action-button\">\n                                    <FontAwesomeIcon icon={faPencilAlt} color=\"white\" size='lg'/></a>\n                                </div>\n                                <div className=\"subtitle\">Edit</div>\n                            </li>\n                            <li>\n                                <div>\n                                    <a type=\"button\" onClick={disposeReagents} className=\"dot action-button\">\n                                    <FontAwesomeIcon icon={faTimes} color=\"rgba(67, 47, 135, 0.9)\" size='lg'/></a>\n                                </div>\n                                <div className=\"subtitle\">Dispose</div>\n                            </li>\n                            <li>\n                                <div>\n                                    <a type=\"button\" onClick={downloadQR} className=\"dot action-button\">\n                                    <FontAwesomeIcon icon={faDownload} color=\"rgba(67, 47, 135, 0.9)\" size='lg'/></a>\n                                </div>\n                                <div className=\"subtitle\">Download QR</div>\n                            </li>\n                            <li>\n                                <div>\n                                    <a type=\"button\" onClick={deleteRows} className=\"dot action-button\">\n                                    <FontAwesomeIcon icon={faTrash} color=\"grey\" size='lg'/></a>\n                                </div>\n                                <div className=\"subtitle\">Delete</div>\n                            </li>\n                        </ul>\n                    ) : null}\n                </div>\n                <EditSecReagent isModalOpen={isModalOpen} handleModalClose={handleModalClose} handleModalOpen={handleModalShow} \n                    selectedRow={{selectedFlatRows: selectedFlatRows.map((row) => row.original)[0] != null ? \n                        selectedFlatRows.map((row) => row.original)[0] : \n                        selectedFlatRows.map((row) => row.original)[1]}} \n                        putSecReagent={props.putSecReagent} />\n            </div>\n            \n            </>\n        );\n    }\n}\n\n","import React, { useMemo, useState } from 'react';\nimport { useTable, useSortBy, useGlobalFilter, useRowSelect, useExpanded } from 'react-table';\nimport { COLUMNS } from './ColsSecReagents'\nimport './table.css';\nimport {AiFillCaretDown, AiFillCaretUp} from 'react-icons/ai';\nimport { GlobalFilter } from './GlobalFilter';\nimport { Button, ButtonGroup } from 'react-bootstrap';\nimport { Checkbox } from './CheckBox';\nimport EditSecReagent from './EditSecReagent';\nimport SecReagentsCards from './SecReagentsCards';\nimport QRCode  from 'qrcode.react';\nimport html2canvas from 'html2canvas';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFolderPlus, faPencilAlt, faDownload, faTimes, faTrash } from '@fortawesome/free-solid-svg-icons'\nimport Loader from \"react-loader-spinner\";\n\nexport const SecReagentsRecent = (props) => {\n    \n    const columns = useMemo(() => COLUMNS, [])\n    const data = useMemo(() => props.secReagents, [])\n    //const [data, setData] = useState(props.secReagents, []);\n    \n    const tableInstance = useTable({\n            columns,\n            data,\n            initialState: {\n                sortBy: [\n                    {\n                        id: 'updatedAt',\n                        desc: true\n                    }\n                ],\n                hiddenColumns: ['updatedAt']\n            },\n        },         \n        useGlobalFilter,\n        useSortBy,\n        useExpanded,\n        useRowSelect,        \n        (hooks) => {\n            hooks.visibleColumns.push((columns) => {\n                return [                    \n                    ...columns,\n                    {\n                        id: 'selection',\n                        Header: ({ getToggleAllRowsSelectedProps }) => (\n                            <Checkbox {...getToggleAllRowsSelectedProps()} />\n                        ),\n                        Cell: ({ row }) => (\n                            <Checkbox {...row.getToggleRowSelectedProps()}/>\n                        )\n                    }    \n                ]\n            })\n        })\n\n    const { \n        getTableProps, \n        getTableBodyProps, \n        headerGroups, \n        rows, \n        prepareRow,\n        state,\n        setGlobalFilter,\n        selectedFlatRows,\n        visibleColumns,\n        //state: { expanded },\n    } = tableInstance\n\n    const { globalFilter } = state\n\n    const [selectedRow, setSelectRows] = useState('')\n\n    const [isModalOpen, setModalState] = useState(false)\n\n    const handleModalShow = () => {\n        setModalState(true);\n    }\n\n    const handleModalClose = () => {\n        setModalState(false);\n    }\n\n    const deleteRows = () => { \n        selectedFlatRows.forEach(row => {  \n            if (row.original) {\n                var update = {\n                    _id: row.original._id,\n                    status: \"DELETED\"\n                }\n                props.putSecReagent(update);\n            }   \n        });\n    }\n\n    const disposeReagents = () => { \n        selectedFlatRows.forEach(row => { \n            if (row.original) {    \n                var update = {\n                    _id: row.original._id,\n                    status: \"DISPOSED\"\n                }\n                props.putSecReagent(update, \"dispose\");\n            }\n        });\n    }\n\n    const downloadQR = () => {\n\n        document.getElementById(\"hidden-qr\").style.display = \"block\";\n        //document.getElementById(\"hidden-qr\").style.marginTop = \"1500px\";\n\n        selectedFlatRows.forEach(row => {\n            if (row.original != null) {\n                var elemId = String(row.original._id)+\"-ext\" \n                var elem = document.getElementById(`${elemId}`)\n                elem.style.display = \"block\";           \n                html2canvas(elem).then(function(canvas) {\n                    elem.style.display = \"none\";  \n                    const pngUrl = canvas\n                        .toDataURL(\"image/png\")\n                        .replace(\"image/png\", \"image/octet-stream\");  \n                    let downloadLink = document.createElement(\"a\");\n                    downloadLink.href = pngUrl;\n                    downloadLink.download = elemId+\".png\";\n                    document.body.appendChild(downloadLink);\n                    downloadLink.click();\n                    document.body.removeChild(downloadLink);                                   \n                })    \n            }            \n        });\n\n        document.getElementById(\"hidden-qr\").style.display = \"none\";\n        //document.getElementById(\"hidden-qr\").style.marginTop = \"0px\";\n    }\n\n    const renderRowSubComponent = React.useCallback(\n        ({ row }) => (\n          <pre\n            style={{\n              fontSize: '10px',\n            }}\n          >\n            <code>{JSON.stringify({ values: row.original }, null, 2)}</code>\n          </pre>\n        ),\n        []\n        //<SecReagentsCards reagentValues={row.original}/>\n      //)\n    )\n    \n    if (props.secReagentsLoading) {\n        return (\n            <>\n            <div className=\"row header table\">\n                <div className=\"col-12 col-lg-6\">\n                    <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\n                </div>\n            </div>\n            <div className=\"table-container row\">  \n                <div style={{\"padding-top\":\"100px\", \"padding-bottom\":\"0px\", \"padding-left\":\"0px\", \"padding-right\":\"10px\"}} className=\"col-11 text-center\">\n                    <Loader\n                        type=\"TailSpin\"\n                        color=\"rgba(67, 47, 135, 0.9)\"\n                        height={50}\n                        width={50}\n                        timeout={3000} //3 secs\n                    />\n                </div>\n            </div>\n            </>\n        );\n    }\n    else {\n        return(\n            <>        \n            <div className=\"row header table\">\n                <div className=\"col-12 col-lg-6\">\n                    <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\n                </div>\n            </div>\n            {selectedFlatRows[0] ? (\n                <>\n                <div className=\"action-button-row row d-xl-none float-left\">\n                    <div className=\"col-2 col-md-1\">\n                        <a type=\"button\" \n                            style={{\"backgroundColor\":\"rgba(67, 47, 135, 0.9)\",\n                                \"boxShadow\":\"0px 0px 5px 0px rgba(67, 47, 135, 0.9)\"}}  \n                            onClick={handleModalShow} className=\"dot action-button\">\n                        <FontAwesomeIcon icon={faPencilAlt} color=\"white\" size='lg'/></a>\n                    </div>\n                    <div className=\"col-2 col-md-1\">\n                        <a type=\"button\" onClick={disposeReagents} className=\"dot action-button\">\n                        <FontAwesomeIcon icon={faTimes} color=\"rgba(67, 47, 135, 0.9)\" size='lg'/></a>\n                    </div>\n                    <div className=\"col-2 col-md-1\">\n                        <a type=\"button\" onClick={downloadQR} className=\"dot action-button\">\n                        <FontAwesomeIcon icon={faDownload} color=\"rgba(67, 47, 135, 0.9)\" size='lg'/></a>\n                    </div>\n                    <div className=\"col-2 col-md-1\">\n                        <a type=\"button\" onClick={deleteRows} className=\"dot action-button\">\n                        <FontAwesomeIcon icon={faTrash} color=\"grey\" size='lg'/></a>\n                    </div>\n                </div>\n                <div className=\"row proxy-row d-xl-none\"></div>\n                </>\n            ) : null}\n            <div className=\"table-container row\"> \n                <div style={{\"padding-top\":\"10px\", \"padding-bottom\":\"0px\", \"padding-left\":\"0px\", \"padding-right\":\"10px\"}} className=\"col-11\">\n                    <table {...getTableProps()}>\n                        <thead>\n                            {headerGroups.map((headerGroup) => (\n                                <tr {...headerGroup.getHeaderGroupProps()}>\n                                    {headerGroup.headers.map(column => (\n                                            <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                                {column.render('Header')}\n                                                <span>\n                                                    {column.isSorted ? (column.isSortedDesc ? <AiFillCaretDown/> : <AiFillCaretUp/>) : ''}\n                                                </span>\n                                            </th>\n                                        ))}\n                                </tr>\n                            ))}                \n                        </thead>\n                        <tbody {...getTableBodyProps()}>\n                        {rows.map((row, i) => {\n                            prepareRow(row)\n                            return (\n                            // Use a React.Fragment here so the table markup is still valid\n                            <React.Fragment {...row.getRowProps()}>\n                                <tr>\n                                {row.cells.map(cell => {\n                                    return (\n                                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                    )\n                                })}\n                                </tr>\n                                {/*\n                                    If the row is in an expanded state, render a row with a\n                                    column that fills the entire length of the table.\n                                */}\n                                {row.isExpanded ? (\n                                <tr>\n                                    <td colSpan={visibleColumns.length}>\n                                    {/*\n                                        Inside it, call our renderRowSubComponent function. In reality,\n                                        you could pass whatever you want as props to\n                                        a component like this, including the entire\n                                        table instance. But for this example, we'll just\n                                        pass the row\n                                        */}\n                                    {renderRowSubComponent({ row })}\n                                    </td>\n                                </tr>\n                                ) : null}\n                            </React.Fragment>\n                            )\n                        })}\n                        </tbody>\n                    </table>\n                    <div id=\"hidden-qr\">                    \n                        {\n                            selectedFlatRows.map(row => {\n                                if (row.original == null) {\n                                    return null\n                                } \n                                else {\n                                    return( \n                                        <div style={{display: \"none\"}} key={row.original._id} id={String(row.original._id)+\"-ext\"} className=\"container\">\n                                            <div className=\"row\">                                            \n                                                <h5><b>LOT Number</b>: {row.original.lotNr} {\"\\n\"}</h5>                                                                                                                                                                                            \n                                            </div>               \n                                            <div className=\"row\">                                    \n                                                <QRCode\n                                                    id={String(row.original._id)}\n                                                    value={String(row.original._id)}\n                                                    size={290}\n                                                    level={\"H\"}\n                                                    includeMargin={false}\n                                                />\n                                            </div>              \n                                            <div className=\"row\">\n                                                <p><b>Unique ID</b>: {row.original._id}</p>{' '}    \n                                            </div>                        \n                                            <div className=\"row\">\n                                                <p><b>Pack No</b>: 1/5</p>                                                                                                    \n                                            </div>                                                                                           \n                                        </div>\n                                    );\n                                }                                        \n                            })\n                        }\n                    </div>\n                </div>\n                <div className=\"col-1 text-center button-col d-none d-xl-block\">\n                    {selectedFlatRows[0] ? (\n                        <ul className=\"list-unstyled\">\n                            <li>\n                                <div>\n                                    <a type=\"button\" onClick={handleModalShow} \n                                        style={{\"backgroundColor\":\"rgba(67, 47, 135, 0.9)\",\n                                            \"boxShadow\":\"0px 0px 5px 0px rgba(67, 47, 135, 0.9)\"}} \n                                        className=\"dot action-button\">\n                                    <FontAwesomeIcon icon={faPencilAlt} color=\"white\" size='lg'/></a>\n                                </div>\n                                <div className=\"subtitle\">Edit</div>\n                            </li>\n                            <li>\n                                <div>\n                                    <a type=\"button\" onClick={disposeReagents} className=\"dot action-button\">\n                                    <FontAwesomeIcon icon={faTimes} color=\"rgba(67, 47, 135, 0.9)\" size='lg'/></a>\n                                </div>\n                                <div className=\"subtitle\">Dispose</div>\n                            </li>\n                            <li>\n                                <div>\n                                    <a type=\"button\" onClick={downloadQR} className=\"dot action-button\">\n                                    <FontAwesomeIcon icon={faDownload} color=\"rgba(67, 47, 135, 0.9)\" size='lg'/></a>\n                                </div>\n                                <div className=\"subtitle\">Download QR</div>\n                            </li>\n                            <li>\n                                <div>\n                                    <a type=\"button\" onClick={deleteRows} className=\"dot action-button\">\n                                    <FontAwesomeIcon icon={faTrash} color=\"grey\" size='lg'/></a>\n                                </div>\n                                <div className=\"subtitle\">Delete</div>\n                            </li>\n                        </ul>\n                    ) : null}\n                </div>\n                <EditSecReagent isModalOpen={isModalOpen} handleModalClose={handleModalClose} handleModalOpen={handleModalShow} \n                    selectedRow={{selectedFlatRows: selectedFlatRows.map((row) => row.original)[0] != null ? \n                        selectedFlatRows.map((row) => row.original)[0] : \n                        selectedFlatRows.map((row) => row.original)[1]}} \n                        putSecReagent={props.putSecReagent} />\n            </div>\n            \n            </>\n        );\n    }\n}\n\n","import React, { useMemo, useState } from 'react';\nimport { useTable, useSortBy, useGlobalFilter, useRowSelect, useExpanded } from 'react-table';\nimport { COLUMNS } from './ColsSecReagents'\nimport './table.css';\nimport {AiFillCaretDown, AiFillCaretUp} from 'react-icons/ai';\nimport { GlobalFilter } from './GlobalFilter';\nimport { Button, ButtonGroup } from 'react-bootstrap';\nimport { Checkbox } from './CheckBox';\nimport SecReagentsCards from './SecReagentsCards';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash, faUndo } from '@fortawesome/free-solid-svg-icons'\n\nexport const SecReagentsBin = (props) => {\n    \n    const columns = useMemo(() => COLUMNS, [])\n    const data = useMemo(() => props.deletedSecReagents, [])\n    //const [data, setData] = useState(props.deletedSecReagents, []);\n    \n    const tableInstance = useTable({\n            columns,\n            data,\n            initialState: {\n                sortBy: [\n                    {\n                        id: 'updatedAt',\n                        desc: true\n                    }\n                ],\n                hiddenColumns: ['updatedAt']\n            },\n        },         \n        useGlobalFilter,\n        useSortBy,\n        useExpanded,\n        useRowSelect,        \n        (hooks) => {\n            hooks.visibleColumns.push((columns) => {\n                return [                    \n                    ...columns,\n                    {\n                        id: 'selection',\n                        Header: ({ getToggleAllRowsSelectedProps }) => (\n                            <Checkbox {...getToggleAllRowsSelectedProps()} />\n                        ),\n                        Cell: ({ row }) => (\n                            <Checkbox {...row.getToggleRowSelectedProps()}/>\n                        )\n                    }    \n                ]\n            })\n        })\n\n    const { \n        getTableProps, \n        getTableBodyProps, \n        headerGroups, \n        rows, \n        prepareRow,\n        state,\n        setGlobalFilter,\n        selectedFlatRows,\n        visibleColumns,\n        //state: { expanded },\n    } = tableInstance\n\n    const { globalFilter } = state\n\n    const [selectedRow, setSelectRows] = useState('')\n\n    const deleteRows = () => { \n        selectedFlatRows.forEach(row => {     \n            var update = {\n                _id: row.original._id,\n                status: \"DELETED\"\n            }\n            props.putSecReagent(update);\n        });\n    }\n\n    const undoDelete = () => { \n        selectedFlatRows.forEach(row => {     \n            var update = {\n                _id: row.original._id,\n                status: \"OK\"\n            }\n            props.putSecReagent(update);\n        });\n    }\n\n    const renderRowSubComponent = React.useCallback(\n        ({ row }) => (\n        //   <pre\n        //     style={{\n        //       fontSize: '10px',\n        //     }}\n        //   >\n        //     <code>{JSON.stringify({ values: row.original }, null, 2)}</code>\n        //   </pre>\n        // ),\n        // []\n        <SecReagentsCards reagentValues={row.original}/>\n      )\n    )\n    return(\n        <>        \n        <div className=\"row header table\">\n            <div className=\"col-12 col-lg-6\">\n                <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter}/>\n            </div>\n        </div>\n        {selectedFlatRows[0] ? (\n            <>\n            <div className=\"action-button-row row d-xl-none float-left\">\n                <div className=\"col-2 col-md-1\">\n                    <a type=\"button\" \n                        style={{\"backgroundColor\":\"rgba(67, 47, 135, 0.9)\",\n                            \"boxShadow\":\"0px 0px 5px 0px rgba(67, 47, 135, 0.9)\"}}  \n                        onClick={undoDelete} className=\"dot action-button\">\n                    <FontAwesomeIcon icon={faUndo} color=\"white\" size='lg'/></a>\n                </div>\n            </div>\n            <div className=\"row proxy-row d-xl-none\"></div>\n            </>\n        ) : null}\n        <div className=\"table-container row\"> \n            <div style={{\"padding-top\":\"10px\", \"padding-bottom\":\"0px\", \"padding-left\":\"0px\", \"padding-right\":\"10px\"}} className=\"col-11\">\n                <table {...getTableProps()}>\n                    <thead>\n                        {headerGroups.map((headerGroup) => (\n                            <tr {...headerGroup.getHeaderGroupProps()}>\n                                {headerGroup.headers.map(column => (\n                                        <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                            {column.render('Header')}\n                                            <span>\n                                                {column.isSorted ? (column.isSortedDesc ? <AiFillCaretDown/> : <AiFillCaretUp/>) : ''}\n                                            </span>\n                                        </th>\n                                    ))}\n                            </tr>\n                        ))}                \n                    </thead>\n                    <tbody {...getTableBodyProps()}>\n                    {rows.map((row, i) => {\n                        prepareRow(row)\n                        return (\n                        // Use a React.Fragment here so the table markup is still valid\n                        <React.Fragment {...row.getRowProps()}>\n                            <tr>\n                            {row.cells.map(cell => {\n                                return (\n                                <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                )\n                            })}\n                            </tr>\n                            {/*\n                                If the row is in an expanded state, render a row with a\n                                column that fills the entire length of the table.\n                            */}\n                            {row.isExpanded ? (\n                            <tr>\n                                <td colSpan={visibleColumns.length}>\n                                {/*\n                                    Inside it, call our renderRowSubComponent function. In reality,\n                                    you could pass whatever you want as props to\n                                    a component like this, including the entire\n                                    table instance. But for this example, we'll just\n                                    pass the row\n                                    */}\n                                {renderRowSubComponent({ row })}\n                                </td>\n                            </tr>\n                            ) : null}\n                        </React.Fragment>\n                        )\n                    })}\n                    </tbody>\n                </table>\n            </div>\n            <div className=\"col-1 text-center button-col d-none d-xl-block\">\n                {selectedFlatRows[0] ? (\n                        <ul className=\"list-unstyled\">\n                            <li>\n                                <div className=\"textCenter\">\n                                    <a type=\"button\" onClick={undoDelete} \n                                        style={{\"backgroundColor\":\"rgba(67, 47, 135, 0.9)\",\n                                            \"boxShadow\":\"0px 0px 5px 0px rgba(67, 47, 135, 0.9)\"}}  \n                                        className=\"dot action-button\">\n                                    <FontAwesomeIcon icon={faUndo} color=\"white\" size='lg'/></a>\n                                </div>\n                                <div className=\"subtitle\">Restore</div>\n                            </li>\n                        </ul>\n                ) : null}\n            </div>  \n        </div>\n        \n        </>\n    );\n}\n\n","import React, { Component, useEffect, useMemo, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { RiDeleteBin7Fill, RiTimeFill } from 'react-icons/ri'\nimport { FaLayerGroup } from 'react-icons/fa';\nimport Sidebar from './Sidebar';\nimport { HiOutlineSwitchHorizontal } from 'react-icons/hi';\nimport { PrimaryReagents } from './PrimaryReagentsOverview';\nimport { PrimaryReagentsRecent } from './PrimaryReagentsRecent';\nimport { PrimaryReagentsBin } from './PrimaryReagentsBin';\nimport { SecReagentsOverview } from './SecReagentsOverview';\nimport { SecReagentsRecent } from './SecReagentsRecent';\nimport { SecReagentsBin } from './SecReagentsBin';\n\nclass InventoryNEW extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentPath: '',\n            isSidebarOpen: false\n        }\n    }   \n\n    toggleSidebar = () => {\n        this.setState({\n            isSidebarOpen: !this.state.isSidebarOpen\n        });\n    }\n\n    componentDidMount() {\n        const currentPath = window.location.pathname.split('/').splice(2,).join('/');\n        this.setState({\n            currentPath: currentPath\n        });\n    }\n\n    renderTable(path) {\n        switch(path) {\n            case 'primary-reagents/overview':\n                return(\n                    <PrimaryReagents reagents={this.props.reagents} \n                        reagentsErrMess={this.props.reagentsErrMess}\n                        reagentsLoading={this.props.reagentsLoading}\n                        postReagent={this.props.postReagent}\n                        deleteReagent={this.props.deleteReagent} \n                        putReagent={this.props.putReagent} \n                        toggleSidebar={this.toggleSidebar}\n                        isSidebarOpen={this.state.isSidebarOpen}/>\n                );\n            case 'primary-reagents/recent':\n                return(\n                    <PrimaryReagentsRecent reagents={this.props.reagents} \n                        reagentsErrMess={this.props.reagentsErrMess}\n                        reagentsLoading={this.props.reagentsLoading}\n                        postReagent={this.props.postReagent}\n                        deleteReagent={this.props.deleteReagent} \n                        putReagent={this.props.putReagent}\n                        toggleSidebar={this.toggleSidebar}\n                        isSidebarOpen={this.state.isSidebarOpen}/>\n                );\n            case 'primary-reagents/deleted':\n                return(\n                    <PrimaryReagentsBin \n                        deletedReagents={this.props.deletedReagents}\n                        fetchReagents={this.props.fetchReagents} \n                        reagentsErrMess={this.props.reagentsErrMess}\n                        postReagent={this.props.postReagent}\n                        deleteReagent={this.props.deleteReagent} \n                        putReagent={this.props.putReagent} />\n                );\n            case 'secondary-reagents/overview':\n                return(\n                    <SecReagentsOverview secReagents={this.props.secReagents} \n                        secReagentsLoading={this.props.secReagentsLoading}\n                        secReagentsErrMess={this.props.errMess}\n                        deleteSecReagent={this.props.deleteSecReagent} \n                        putSecReagent={this.props.putSecReagent} />  \n                );\n            case 'secondary-reagents/recent':\n                return(\n                    <SecReagentsRecent secReagents={this.props.secReagents} \n                        secReagentsLoading={this.props.secReagentsLoading}\n                        secReagentsErrMess={this.props.errMess}\n                        deleteSecReagent={this.props.deleteSecReagent} \n                        putSecReagent={this.props.putSecReagent} />  \n                );\n            \n            case 'secondary-reagents/deleted':\n                return(\n                    <SecReagentsBin \n                        deletedSecReagents={this.props.deletedSecReagents}\n                        secReagentsErrMess={this.props.errMess}\n                        deleteSecReagent={this.props.deleteSecReagent} \n                        putSecReagent={this.props.putSecReagent} />  \n                );\n        }\n    }\n\n    render() {\n        return(\n            <div id=\"page-wrap\" className=\"container-fluid\">                \n                <a onClick={this.toggleSidebar}><div className={\"sidebar-open-\"+String(this.state.isSidebarOpen)}></div></a>\n                <Sidebar pageWrapId={'page-wrap'} outerContainerId={'outer-container'} logoutUser={this.props.logoutUser} />                        \n                <div className=\"row min-vh-100\">\n                    <div style={{\"position\":\"fixed\", \"zIndex\":\"7\"}} className=\"col-2 d-flex flex-column h-100\">\n                        <div className=\"row header\">\n                            <div style={{\"paddingRight\":\"0px\"}} className=\"col my-auto ml-5\">\n                                <span className=\"menu-header d-none d-xl-inline\"> Inventory </span>\n                            </div>\n                        </div>\n                        <div style={{\"border-right\":\"1px solid #E2E2E4\", \"backgroundColor\":\"#F6F5FA\"}} className=\"row side-info justify-content-center bg-blue flex-grow-1\">\n                            <div style={{\"margin-top\":\"15px\"}} className=\"container-fluid side-info-container\">\n                                <div className=\"row\">\n                                    <div style={{\"margin-right\":\"15px\", \n                                                    \"border-radius\": \"7px\",\n                                                    \"background-color\": \"rgba(47, 73, 209, 0.15)\",\n                                                    \"height\": \"70px\",\n                                                    \"padding-top\":\"20px\",\n                                                    \"box-shadow\": \"0px 0px 5px 0px lightgrey\",\n                                                    \"paddingLeft\":\"0px\",\n                                                    \"paddingRight\":\"0px\"}} \n                                        className=\"col text-center section-selection\">\n                                        <a className=\"switch\" \n                                            href={this.state.currentPath.split('/')[0]=='primary-reagents' ? '/inventory/secondary-reagents/overview' : '/inventory/primary-reagents/overview'}>\n                                            <span className=\"dot\" style={{\"height\": \"30px\",\n                                                                        \"border\": \"0.5px solid rgba(229, 229, 229, 1)\",\n                                                                        \"width\": \"30px\",\n                                                                        \"background-color\": \"#ffffff\",\n                                                                        \"border-radius\": \"50%\",\n                                                                        \"display\": \"inline-block\",\n                                                                        \"box-shadow\": \"0px 0px 1px 0px #888888\"}}>\n                                            <HiOutlineSwitchHorizontal/>\n                                        </span></a>\n                                        <span className=\"d-none d-lg-inline\" style={{\"font-weight\":\"700\", \"font-size\":\"large\", \n                                            \"color\": \"rgba(237, 139, 0, 0.95)\", \"padding-left\": \"10px\",\n                                            \"vertical-align\":\"middle\"}}> \n                                                {this.state.currentPath.split('/')[0]=='primary-reagents' ? 'Primary' : 'Secondary'}\n                                            </span>\n                                    </div>\n                                </div>\n                                <div style={{\"margin-top\":\"30px\"}} className=\"row section-choices\">\n                                    <div className=\"col text-center text-lg-left\" style={{\"padding\":\"0px\"}}>\n                                        <ul className=\"list-unstyled\">\n                                            <li><a type=\"button\"\n                                                    href={this.state.currentPath.split('/')[0]=='primary-reagents' ? '/inventory/primary-reagents/overview' : '/inventory/secondary-reagents/overview'}  \n                                                    className={this.state.currentPath.split('/')[1]=='overview' ? 'selected' : ''}><span><FaLayerGroup /></span> <span className=\"d-none d-lg-inline\">Overview</span></a></li>\n                                            <li><a type=\"button\" \n                                                    href={this.state.currentPath.split('/')[0]=='primary-reagents' ? '/inventory/primary-reagents/recent' : '/inventory/secondary-reagents/recent'} \n                                                    className={this.state.currentPath.split('/')[1]=='recent' ? 'selected' : ''}><span><RiTimeFill /></span> <span className=\"d-none d-lg-inline\">Last Used</span></a></li>\n                                            <li><a type=\"button\" \n                                                    href={this.state.currentPath.split('/')[0]=='primary-reagents' ? '/inventory/primary-reagents/deleted' : '/inventory/secondary-reagents/deleted'} \n                                                    className={this.state.currentPath.split('/')[1]=='deleted' ? 'selected' : ''}><span><RiDeleteBin7Fill /></span> <span className=\"d-none d-lg-inline\">Deleted</span></a></li>\n                                        </ul>\n                                    </div>\n                                </div>\n                                <div style={{\"position\":\"absolute\", \"bottom\": \"10px\", \"width\":\"80%\"}} className=\"row\">\n                                    <div style={{\"height\": \"80px\", \"border-top\":\"1px solid rgba(229, 229, 229, 1)\", \"padding-top\":\"13px\"}} \n                                        className=\"col text-center\">\n                                            <div className=\"row\">\n                                                <div style={{\"paddingLeft\":\"0px\"}} className=\"col-3\">\n                                                    <a href=\"/account\" className=\"dot action-button\">\n                                                            {JSON.parse(localStorage.getItem('userData')).firstName.substring(0,1)\n                                                                        + JSON.parse(localStorage.getItem('userData')).lastName.substring(0,1)}\n                                                        </a>\n                                                </div>\n                                                <div style={{\"margin-left\":\"10px\"}} className=\"col\">\n                                                    <div className=\"row\">\n                                                        <a style={{\"color\":\"black\"}} href=\"/account\">\n                                                            <span className=\"d-none d-xl-inline\" style={{\"display\":\"block\"}}>\n                                                                {JSON.parse(localStorage.getItem('userData')).firstName\n                                                                    + ' ' + JSON.parse(localStorage.getItem('userData')).lastName}\n                                                            </span>\n                                                        </a>\n                                                    </div>\n                                                    <div style={{\"color\":\"gray\"}} className=\"row\">\n                                                        <span className=\"d-none d-xl-inline\" style={{\"display\":\"block\"}}>\n                                                            {JSON.parse(localStorage.getItem('userData')).supervisor ? 'Supervisor' : 'Regular'}\n                                                        </span>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-10 offset-2\">\n                        {this.renderTable(this.state.currentPath)}                                                                 \n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default InventoryNEW;","import React, { createRef, Component } from \"react\";\nimport Sidebar from './Sidebar';\nimport { Form, Field } from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\nimport { FieldArray } from 'react-final-form-arrays';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faMinus, faTimes } from '@fortawesome/free-solid-svg-icons'\nimport { Accordion, Card, Modal, Button}  from \"react-bootstrap\";\n\n\nconst required = value => (value ? undefined : 'Required')\nconst mapping = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\nconst RenderAssay = ( props ) => (\n    <div className=\"col-xl-6 assay-cards\" style={{\"width\":\"100%\"}}>\n            <Card style={{\"backgroundColor\": \"white\"}} id={props.assayType._id} key={props.assayType._id}>                            \n                <Card.Title>\n                    <div style={{\"marginRight\":\"10px\"}} className=\"row\">\n                        <div className=\"col-10\">\n                            <h4 style={{\"padding\":\"10px\"}}><b>{props.assayType.assayName}</b></h4>\n                        </div>\n                        <div style={{\"paddingTop\":\"10px\", \"paddingRight\":\"10px\"}} className=\"col-1 ml-auto\">\n                            <a type=\"button\" onClick={() => props.deleteTestType(props.assayType._id)}><FontAwesomeIcon icon={faTimes} color=\"grey\" size='md'/></a>\n                        </div>\n                    </div>\n                </Card.Title>\n                <Card.Body>         \n                        <div className=\"row\">     \n                            <div className=\"col-12\">\n                                <h4>Reagents</h4>\n                            </div>                           \n                            {props.assayType.metadata[0] ? (props.assayType.metadata[0].children.map((reagent, index) => {\n                                return(\n                                    <>\n                                    <div style={{\"color\":\"grey\"}} className=\"col-6\" key={reagent.key}>\n                                        <b>Reagent&nbsp;Input&nbsp;#{String(index+1)}</b>\n                                    </div>\n                                    <div className=\"col-6\" key={reagent.key}>\n                                        {reagent.label}\n                                    </div>\n                                    </>\n                                );\n                            })) : null}\n                        </div>                         \n                        <div className=\"row mt-3\">                                \n                            <div className=\"col-12\">\n                                <h4>Reagent Data</h4>\n                            </div>\n                            {props.assayType.metadata[1] ? (props.assayType.metadata[1].children.map((reagentDataInput, index) => {\n                                return(\n                                    <>\n                                    <div style={{\"color\":\"grey\"}} className=\"col-6\" key={reagentDataInput.key}>\n                                        <b>Reagent&nbsp;Data&nbsp;#{String(index+1)}</b>\n                                    </div>\n                                    <div className=\"col-6\" key={reagentDataInput.key}>\n                                        {reagentDataInput.label}\n                                    </div>\n                                    </>\n                                );\n                            })) : null}\n                        </div>\n                        <div className=\"row mt-3\">  \n                            <div className=\"col-12\">\n                                <h4>Other</h4>\n                            </div>                              \n                            {props.assayType.metadata[2] ? (props.assayType.metadata[2].children.map((otherInput, index) => {\n                                return(\n                                    <>\n                                    <div style={{\"color\":\"grey\"}} className=\"col-6\" key={otherInput.key}>\n                                        <b>Other&nbsp;Input&nbsp;#{String(index+1)}</b>\n                                    </div>\n                                    <div className=\"col-6\" key={otherInput.key}>\n                                        {otherInput.label}\n                                    </div>\n                                    </>\n                                );\n                            })) : null}\n                        </div>                      \n                </Card.Body>\n            </Card>\n        </div> \n    )\n\n\nclass AssayTypes extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isModalOpen: false,\n            assayTypes: props.testTypes,\n            dateSeries: [],\n            monthCounter: []\n        }\n    }\n\n    componentDidMount() {\n        var dateSeries = this.state.assayTypes.map(assayType => new Date(assayType.createdAt));\n        dateSeries.sort();\n        dateSeries = dateSeries.map(date => date.toISOString().substring(0, 7))\n        dateSeries = [...new Set(dateSeries)]\n        \n        this.setState({\n            dateSeries: dateSeries\n        });\n    }\n\n    addToMonthCounter(date) {\n        this.setState(prevState => ({\n            monthCounter: [...prevState.monthCounter, date]\n        }))\n        console.log(this.state.monthCounter);\n    }\n\n    handleSubmit = async values => {\n        var newAssayType = {\n            assayName: values.assayName,\n            metadata: [\n                {\n                    key: \"reagents\",\n                    children: []\n                },\n                {\n                    key: \"reagentData\",\n                    children: []\n                },\n                {\n                    key: \"other\",\n                    children: []\n                }\n            ]\n        };\n\n        if (values.reagents) {\n            var reagentChildren = values.reagents.filter(inputField => inputField != null);\n            reagentChildren = reagentChildren.map(inputField => {\n                let key = inputField.label.toLowerCase();\n                key = key.replace(\" \",\"_\");\n                return(\n                    {\n                        key: key,\n                        label: inputField.label,\n                        required: true,\n                        type: \"reagent\"\n                    }\n                );\n            });\n            newAssayType.metadata[0].children = reagentChildren;\n        }\n\n        if (values.reagentData) {\n            var reagentDataChildren = values.reagentData.filter(inputField => inputField.label != null);\n            reagentDataChildren = reagentDataChildren.map(inputField => {\n                let key = inputField.label.toLowerCase();\n                key = key.replace(\" \",\"_\");\n                return(\n                    {\n                        key: key,\n                        label: inputField.label,\n                        required: inputField.required,\n                        type: inputField.type\n                    }\n                );\n            });\n\n            newAssayType.metadata[1].children = reagentDataChildren;\n        }\n        \n        if (values.other) {\n            var otherDataChildren = values.other.filter(inputField => inputField.label != null);\n            var otherDataChildren = otherDataChildren.map(inputField => {\n                let key = inputField.label.toLowerCase();\n                key = key.replace(\" \",\"_\");\n                return(\n                    {\n                        key: key,\n                        label: inputField.label,\n                        required: inputField.required,\n                        type: inputField.type\n                    }\n                );\n            });\n\n            newAssayType.metadata[2].children = otherDataChildren;\n        }\n        \n        this.props.postTestType(newAssayType);\n        //alert(JSON.stringify(newAssayType))\n    }\n\n    childRef = createRef();\n\n    render() {\n        return(\n            <div id=\"page-wrap\" className=\"container-fluid\">         \n                <Sidebar pageWrapId={'page-wrap'} outerContainerId={'outer-container'} logoutUser={this.props.logoutUser} />                               \n                <div style={{\"z-index\":\"10\", \"position\":\"fixed\", \"border-bottom\":\"1px solid #E2E2E4\", \"background-color\": \"white\", \"margin-top\": \"0px\", \"padding\": \"10px\", \"width\":\"110%\"}} className=\"row header\">\n                            <div className=\"col my-auto ml-5\">\n                                <span className=\"menu-header\"> Assay Types </span>\n                            </div>\n                        </div>\n                <div className=\"row min-vh-100\">\n                    <div className=\"col-4 d-none d-lg-block\">\n                        <div style={{\"border-right\":\"1px solid #E2E2E4\", \"paddingTop\":\"81px\"}} className=\"row side-info d-flex flex-column h-100\">\n                            <div className=\"col\">\n                                <div style={{\"border-radius\": \"7px\",\n                                                        \"background-color\": \"rgba(47, 73, 209, 0.15)\",                                                    \n                                                        \"box-shadow\": \"0px 0px 5px 0px lightgrey\", \n                                                        \"paddingTop\":\"10px\", \"paddingBottom\":\"10px\"}} className=\"container\">\n                                <Form \n                                    onSubmit={this.handleSubmit}\n                                    mutators={{\n                                    ...arrayMutators\n                                    }}\n                                    render={({\n                                    handleSubmit,\n                                    form: {\n                                        mutators: { push, pop }\n                                    }, // injected from final-form-arrays above\n                                    pristine,\n                                    form,\n                                    submitting,\n                                    values\n                                    }) => {\n                                        return(\n                                            <form id=\"addAssayType\" onSubmit={handleSubmit}>\n                                                <div className=\"container\">\n                                                    <Field\n                                                        name=\"assayName\"\n                                                        component=\"input\"\n                                                        type=\"text\"\n                                                        validate={required}\n                                                        >\n                                                        {({ input, meta }) => (\n                                                            <div className=\"row\">                                  \n                                                                <div className=\"col-12 col-xl-6\">\n                                                                    <input {...input} id=\"assay-name-input\" placeholder=\"Assay Name...\"/>\n                                                                    {meta.error && meta.submitFailed && <span>{meta.error}</span>}\n                                                                </div>\n                                                            </div>\n                                                        )}\n                                                    </Field>\n                                                    <div className=\"row input-header\">\n                                                        <div className=\"col-12\">\n                                                            <span className=\"input-h4\">Reagents</span>   \n                                                            <span style={{\"white-space\": \"nowrap\"}}>\n                                                                <button className=\"button-form-array\" type=\"button\" onClick={() => push('reagents', undefined)}>\n                                                                    <FontAwesomeIcon icon={faPlus} color=\"#3e8bd6\" size='md'/>\n                                                                </button>&nbsp;\n                                                                <button className=\"button-form-array\" type=\"button\" onClick={() => pop('reagents')}>\n                                                                    <FontAwesomeIcon icon={faMinus} color=\"#3e8bd6\" size='md'/>\n                                                                </button>\n                                                            </span>                                                     \n                                                        </div>\n                                                    </div>\n                                                    <FieldArray name=\"reagents\">\n                                                        {({ fields }) =>\n                                                            fields.map((name, index) => (\n                                                            <div className=\"row\" key={name}>\n                                                                {/*<label>Reagent #{index + 1}</label>*/}\n                                                                <div className=\"col-10 col-xl-6\">\n                                                                    <Field\n                                                                    name={`${name}.label`}\n                                                                    component=\"input\"\n                                                                    placeholder=\"Reagent Name\"\n                                                                    />\n                                                                </div>\n                                                                <div className=\"col-1 my-auto\">\n                                                                    <span\n                                                                    onClick={() => fields.remove(index)}\n                                                                    style={{ cursor: 'pointer' }}\n                                                                    >\n                                                                    <FontAwesomeIcon icon={faTimes} color=\"grey\" size='md'/>\n                                                                    </span>\n                                                                </div>\n                                                            </div>\n                                                            ))\n                                                        }\n                                                    </FieldArray> \n                                                </div>\n                                                <div className=\"container\">\n                                                    <div className=\"row input-header\">\n                                                        <div className=\"col-12\">\n                                                            <span className=\"input-h4\">Reagent Data</span>\n                                                            <button className=\"button-form-array\" type=\"button\" onClick={() => push('reagentData', undefined)}>\n                                                                <FontAwesomeIcon icon={faPlus} color=\"#3e8bd6\" size='md'/>\n                                                            </button>{' '}\n                                                            <button className=\"button-form-array\" type=\"button\" onClick={() => pop('reagentData')}>\n                                                                <FontAwesomeIcon icon={faMinus} color=\"#3e8bd6\" size='md'/>\n                                                            </button>\n                                                        </div>\n                                                    </div>\n                                                    <FieldArray name=\"reagentData\">\n                                                        {({ fields }) =>\n                                                            fields.map((name, index) => (\n                                                            <div className=\"row\" key={name}>\n                                                                {/*<label>{index + 1}</label>*/}\n                                                                <div className=\"col-5 xl-col-6\">\n                                                                    <Field\n                                                                    name={`${name}.label`}\n                                                                    component=\"input\"\n                                                                    placeholder=\"Input Name\"\n                                                                    />\n                                                                </div>\n                                                                <div className=\"col-2\">\n                                                                    <Field\n                                                                    name={`${name}.type`}\n                                                                    component=\"select\"\n                                                                    defaultValue=\"text\"\n                                                                    >\n                                                                        <option selected value=\"text\">Text</option>\n                                                                        <option value=\"date\">Date</option>\n                                                                    </Field>\n                                                                </div>\n                                                                <div className=\"col-3\">\n                                                                    <Field\n                                                                    name={`${name}.required`}\n                                                                    component=\"select\"\n                                                                    defaultValue=\"true\"\n                                                                    >\n                                                                        <option selected value=\"true\">Required</option>\n                                                                        <option value=\"false\">Not Required</option>\n                                                                    </Field>\n                                                                </div>\n                                                                <div className=\"col-1 my-auto\">\n                                                                    <span\n                                                                    onClick={() => fields.remove(index)}\n                                                                    style={{ cursor: 'pointer' }}\n                                                                    >\n                                                                    <FontAwesomeIcon icon={faTimes} color=\"grey\" size='md'/>\n                                                                    </span>\n                                                                </div>\n                                                            </div>\n                                                            ))\n                                                        }\n                                                    </FieldArray>\n                                                    <div className=\"row input-header\">\n                                                        <div className=\"col-12\"><span className=\"input-h4\">Other Inputs</span>\n                                                            <button className=\"button-form-array\" type=\"button\" onClick={() => push('other', undefined)}>\n                                                                <FontAwesomeIcon icon={faPlus} color=\"#3e8bd6\" size='md'/>\n                                                            </button>{' '}\n                                                            <button className=\"button-form-array\" type=\"button\" onClick={() => pop('other')}>\n                                                                <FontAwesomeIcon icon={faMinus} color=\"#3e8bd6\" size='md'/>\n                                                            </button>\n                                                        </div>\n                                                    </div>\n                                                    <FieldArray name=\"other\">\n                                                        {({ fields }) =>\n                                                            fields.map((name, index) => (\n                                                            <div className=\"row\" key={name}>\n                                                                {/*<label>{index + 1}</label>*/}\n                                                                <div className=\"col-5 xl-col-6\">\n                                                                    <Field\n                                                                    name={`${name}.label`}\n                                                                    component=\"input\"\n                                                                    placeholder=\"Input Name\"\n                                                                    />\n                                                                </div>\n                                                                <div className=\"col-2\">\n                                                                    <Field\n                                                                    name={`${name}.type`}\n                                                                    component=\"select\"\n                                                                    defaultValue=\"text\"\n                                                                    >\n                                                                        <option selected value=\"text\">Text</option>\n                                                                        <option value=\"date\">Date</option>\n                                                                    </Field>\n                                                                </div>\n                                                                <div className=\"col-3\">\n                                                                    <Field\n                                                                    name={`${name}.required`}\n                                                                    component=\"select\"\n                                                                    defaultValue=\"true\"\n                                                                    >\n                                                                        <option selected value=\"true\">Required</option>\n                                                                        <option value=\"false\">Not Required</option>\n                                                                    </Field>\n                                                                </div>\n                                                                <div className=\"col-1 my-auto\">\n                                                                    <span\n                                                                    onClick={() => fields.remove(index)}\n                                                                    style={{ cursor: 'pointer' }}\n                                                                    >\n                                                                    <FontAwesomeIcon icon={faTimes} color=\"grey\" size='md'/>\n                                                                    </span>\n                                                                </div>\n                                                            </div>\n                                                            ))\n                                                        }\n                                                    </FieldArray>\n                                                    <div className=\"container\">\n                                                        <div className=\"row\">\n                                                            <button className=\"submit-button\" type=\"submit\" disabled={submitting || pristine}>\n                                                                Submit\n                                                            </button>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </form>\n                                        )\n                                    }\n                                }/>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-12 col-lg-8\">  \n                        <div style={{\"padding-top\":\"81px\", \"paddingRight\":\"15px\"}} className=\"row\">\n                            <div className=\"col\">\n                            <Accordion defaultActiveKey=\"0\">\n                                <Card key=\"0\" style={{\"display\": this.state.dateSeries[0] ? \"block\": \"none\"}}>\n                                    <Card.Header>\n                                        <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"0\">\n                                            {this.state.dateSeries[0] ? String(mapping[Number(this.state.dateSeries[0].substring(5, 7))-1]) + ' ' + String(this.state.dateSeries[0].substring(0, 4)) : null}\n                                        </Accordion.Toggle>\n                                        <Accordion.Collapse eventKey=\"0\">\n                                            <Card.Body>\n                                                <div className=\"container\">\n                                                    <div className=\"row\">\n                                                    {this.state.dateSeries[0] ? (this.state.assayTypes.map(assayType => {\n                                                    if (Number(assayType.createdAt.substring(5,7)) == this.state.dateSeries[0].substring(5,7)) {\n                                                            return(\n                                                                <RenderAssay ref={this.childRef} key={assayType._id} assayType={assayType}\n                                                                    deleteTestType={this.props.deleteTestType} />\n                                                            );\n                                                        }\n                                                        else {\n                                                            return(\n                                                                <div></div>\n                                                            );\n                                                        }\n                                                    })): null}\n                                                    </div>\n                                                </div>\n                                            </Card.Body>                                                    \n                                        </Accordion.Collapse>\n                                    </Card.Header>\n                                </Card>\n                                {this.state.dateSeries.map(date => {\n                                    if (date != this.state.dateSeries[0]) {\n                                        return(\n                                            <Card key={date.substring(0, 7)}>\n                                                <Card.Header>\n                                                    <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey={date.substring(5, 7)}>\n                                                        <a type=\"button\">{String(mapping[Number(date.substring(5, 7))-1]) + ' ' + String(date.substring(0, 4))}</a>\n                                                    </Accordion.Toggle>\n                                                    <Accordion.Collapse eventKey={date.substring(5, 7)}>\n                                                        <Card.Body>\n                                                            <div className=\"row\">\n                                                                {this.state.assayTypes.map(assayType => {\n                                                                    if (Number(assayType.createdAt.substring(5,7)) == date.substring(5,7)) {\n                                                                        return(\n                                                                            <>\n                                                                            <RenderAssay ref={this.childRef} key={assayType._id} assayType={assayType}\n                                                                                deleteTestType={this.props.deleteTestType} />\n                                                                            </>\n                                                                        );\n                                                                    }\n                                                                    else {\n                                                                        return(\n                                                                            null\n                                                                        );\n                                                                    }\n                                                                })}\n                                                            </div>\n                                                        </Card.Body>                                                    \n                                                    </Accordion.Collapse>\n                                                </Card.Header>\n                                            </Card>\n                                        );\n                                    }  \n                                })}                                         \n                            </Accordion> \n                            </div>\n                        </div>\n                    </div>    \n                </div>\n            </div>\n        );\n    }\n}\n\nexport default AssayTypes;","export const LOGIN_REQUEST = 'LOGIN_REQUEST'\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS'\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE'\nexport const LOGOUT_REQUEST = 'LOGOUT_REQUEST'\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS'\nexport const LOGOUT_FAILURE = 'LOGOUT_FAILURE'\nexport const RENDER_USERS = 'RENDER_USERS' // XX\nexport const USERS_LOADING = 'USERS_LOADING'\nexport const USERS_FAILED = 'USERS_FAILED'\nexport const ADD_USER = 'ADD_USER'\nexport const UPDATE_USER = 'UPDATE_USER'\nexport const CHECK_TOKEN = 'CHECK_TOKEN'\nexport const RENDER_REAGENTS = 'RENDER_REAGENTS' // XX\nexport const RENDER_DELETED_REAGENTS = 'RENDER_DELETED_REAGENTS'\nexport const REAGENTS_LOADING = 'REAGENTS_LOADING'  \nexport const REAGENTS_FAILED = 'REAGENTS_FALED' // XX\nexport const ADD_REAGENT = 'ADD_REAGENT' // X\nexport const UPDATE_REAGENT = 'UPDATE_REAGENT' // X\nexport const REMOVE_REAGENT = 'REMOVE_REAGENT' // X\nexport const RENDER_SEC_REAGENTS = 'RENDER_SEC_REAGENTS'\nexport const RENDER_DELETED_SEC_REAGENTS = 'RENDER_DELETED_SEC_REAGENTS'\nexport const SEC_REAGENTS_LOADING = 'SEC_REAGENTS_LOADING'\nexport const SEC_REAGENTS_FAILED = 'SEC_REAGENTS_FAILED' \nexport const UPDATE_SEC_REAGENT = 'UPDATE_SEC_REAGENTS' \nexport const REMOVE_SEC_REAGENT = 'REMOVE_SEC_REAGENTS'\nexport const RENDER_TESTS = 'RENDER_TESTS' // X\nexport const TESTS_LOADING = 'TESTS_FAILED' // \nexport const TESTS_FAILED = 'TESTS_FAILED' // \nexport const UPDATE_TEST = 'UPDATE_TEST' // X\nexport const REMOVE_TEST = 'REMOVE_TESTS' // X\nexport const SWITCH_TESTS = 'SWITCH_TESTS' // \nexport const RENDER_TESTTYPES = 'RENDER_TESTTYPES' // \nexport const TESTTYPES_LOADING = 'TESTTYPES_LOADING' // \nexport const TESTTYPES_FAILED = 'TESTTYPES_FAILED' // \nexport const ADD_TESTTYPE = 'ADD_TESTTYPE'\nexport const UPDATE_TESTTYPE = 'UPDATE_TESTTYPE'\nexport const REMOVE_TESTTYPE = 'REMOVE_TESTTYPE'\n\n\n","//export const baseUrl = 'http://localhost:3000/'\nexport const baseUrl = 'https://goshdrive.azurewebsites.net/'","import * as ActionTypes from './ActionTypes';\n\nexport const TestTypes = (state = {\n    errMess: null,\n    testTypes: []\n}, action) => {\n    switch(action.type) {\n        case ActionTypes.RENDER_TESTTYPES:\n            return {...state, isLoading: false, errMess: null, testTypes: action.payload}\n\n        case ActionTypes.TESTTYPES_LOADING:\n            return {...state, isLoading: true, errMess: null, reagents: []}\n\n        case ActionTypes.TESTTYPES_FAILED:\n            return {...state, isLoading: false, errMess: action.payload, testTypes: []}\n\n        case ActionTypes.ADD_TESTTYPE:\n            var testType = action.payload;\n            return {...state, testTypes: state.testTypes.concat(testType)};\n\n        case ActionTypes.UPDATE_TESTTYPE:\n            var testType = action.payload;\n            return {...state, testTypes: state.testTypes.filter(testType => testType.status != \"DELETED\")};\n       \n        case ActionTypes.REMOVE_TESTTYPE:\n            var testType = action.payload;\n            return {...state, testTypes: state.testTypes.filter(\n                item => item._id !== testType._id\n            )};\n\n        default:\n            return state;\n    }\n}","import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseURL';\nimport { TestTypes } from './testTypes';\n\n///////////////////////////////////////////////////\n// AUTH\n///////////////////\n// LOGIN\nexport const checkJWTToken = () => (dispatch) => {\n    \n    const bearer = 'Bearer ' + localStorage.getItem('token');\n\n    return fetch(baseUrl + 'users/checkJWTToken', {\n        headers: {\n            \"Content-Type\": \"application/json\",\n            'Authorization': bearer\n          }\n        })\n        .then(response => response.json())\n        .then(response => {\n            if (response.success) {\n            }\n            else if (!response.success) {\n                localStorage.removeItem('token');\n                localStorage.removeItem('userData');\n                var error = new Error('Error ' + response.err.name);\n                error.response = response;\n                throw error;\n            }\n            else {\n                var error = new Error('Error ' + response.status);\n                error.response = response;\n                throw error;\n            }\n        })\n        .catch(error => dispatch(loginError(error.message)))\n};\n\n\n\nexport const loginUser = (creds) => (dispatch) => {\n    // We dispatch requestLogin to kickoff the call to the API\n\n    return fetch(baseUrl + 'users/login', {\n        method: 'POST',\n        headers: { \n            'Content-Type':'application/json' \n        },\n        body: JSON.stringify(creds)\n    })\n    .then(response => {\n        if (response.ok) {\n            return response;\n        } else {\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\n            error.response = response;\n            throw error;\n        }\n        },\n        error => {\n            throw error;\n        })\n    .then(response => response.json())\n    .then(response => {\n        if (response.success) {\n            // If login was successful, set the token in local storage\n            localStorage.setItem('token', response.token);\n            localStorage.setItem('userData', JSON.stringify(response.user));\n            localStorage.setItem(\"showDeletedUsers\", false);\n            // Dispatch the success action\n            dispatch(requestLogin(response.user));\n            dispatch(receiveLogin(response));\n        }\n        else {\n            var error = new Error('Error ' + response.status);\n            error.response = response;\n            throw error;\n        }\n    })\n    .catch(error => dispatch(loginError(error.message)))\n};\n\nexport const requestLogin = (userData) => {\n    return {\n        type: ActionTypes.LOGIN_REQUEST,\n        userData\n    }\n}\n  \nexport const receiveLogin = (response) => {\n    return {\n        type: ActionTypes.LOGIN_SUCCESS,\n        token: response.token\n    }\n}\n  \nexport const loginError = (message) => {\n    return {\n        type: ActionTypes.LOGIN_FAILURE,\n        message\n    }\n}\n\n// LOGOUT\nexport const logoutUser = () => (dispatch) => {\n    dispatch(requestLogout())\n    localStorage.removeItem('token');\n    localStorage.removeItem('creds');\n    localStorage.removeItem(\"showDeletedUsers\");\n    dispatch(receiveLogout())\n}\n\nexport const requestLogout = () => {\n    return {\n      type: ActionTypes.LOGOUT_REQUEST\n    }\n}\n  \nexport const receiveLogout = () => {\n    return {\n      type: ActionTypes.LOGOUT_SUCCESS\n    }\n}\n///////////////////////////////////////////////////\n\n///////////////////////////////////////////////////\n// USERS\n///////////////////\n// GET\nexport const fetchUsers = () => (dispatch) => {\n    \n    const bearer = 'Bearer ' + localStorage.getItem('token');\n\n    return fetch(baseUrl + 'users', {\n        headers: {\n            \"Content-Type\": \"application/json\",\n            'Authorization': bearer\n          }\n        })\n        .then(response => {\n            if (response.ok) {\n                return response\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText)\n                error.response = response;\n                throw error;\n            }\n        }, \n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(users => dispatch(renderUsers(users)))\n        .catch(error => dispatch(usersFailed(error.message)));\n}\n\nexport const usersLoading = () => ({\n    type: ActionTypes.USERS_LOADING\n});\n\nexport const renderUsers = (users) => ({\n    type: ActionTypes.RENDER_USERS,\n    payload: users\n});\n\nexport const usersFailed = (errmess) => ({\n    type: ActionTypes.USERS_FAILED,\n    payload: errmess\n});\n\n// POST\nexport const postUser = (user) => (dispatch) => {\n    \n    const bearer = 'Bearer ' + localStorage.getItem('token');\n    \n    return fetch(baseUrl + 'users/signup', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': bearer\n      },\n      body: JSON.stringify(user)\n    })\n      .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n        error => {\n          throw error;\n        })\n      .then(response => response.json())\n      .then(response => dispatch(addUser(response.user)))\n      .catch(error => { console.log('User', error.message); alert(\"Registration failed\")});\n};\n\nexport const addUser = (user) => ({\n    type: ActionTypes.ADD_USER,\n    payload: user\n});\n\n// PUT\nexport const putUser = (\n    updatedUser, setpassword=false\n) => (dispatch) => {\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n    \n    return fetch(baseUrl + 'users/' + updatedUser._id + '?setpassword=' + setpassword, {\n        method: 'PUT',\n        body: JSON.stringify(updatedUser),\n        headers: { \n            'Content-Type':'application/json',\n            'Authorization': bearer\n        },\n        credentials: 'same-origin'\n        })\n        .then(response => {\n            if (response.ok) {\n                return response\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText)\n                error.response = response;\n                throw error;\n            }\n        }, \n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(response => {dispatch(updateUser(response))})\n        .catch(error => { console.log('Update User Info.', error.message) \n            alert('Update could not be performed. \\nError: '+ error.message)})\n}\n\nexport const updateUser = (user) => ({\n    type: ActionTypes.UPDATE_USER,\n    payload: user\n});\n\n///////////////////////////////////////////////////\n\n///////////////////////////////////////////////////\n// PRIMARY REAGENTS\n///////////////////\n// GET\nexport const fetchReagents = (deleted=false) => (dispatch) => {\n    \n    const bearer = 'Bearer ' + localStorage.getItem('token');\n\n    return fetch(baseUrl + 'reagents' + \"?deleted=\" + deleted, {\n        method: 'GET',\n        headers: {\n            \"Content-Type\": \"application/json\",\n            'Authorization': bearer\n          }\n        })\n        .then(response => {\n            if (response.ok) {\n                return response\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText)\n                error.response = response;\n                throw error;\n            }\n        }, \n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(reagents => dispatch(renderReagents(reagents)))\n        .catch(error => dispatch(reagentsFailed(error.message)));\n}\n\n// GET DELETED\nexport const fetchDeletedReagents = (deleted=true) => (dispatch) => {\n    \n    const bearer = 'Bearer ' + localStorage.getItem('token');\n\n    return fetch(baseUrl + 'reagents' + \"?deleted=\" + deleted, {\n            headers: { \n                'Content-Type':'application/json',\n                'Authorization': bearer\n            }\n        })\n        .then(response => {\n            if (response.ok) {\n                return response\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText)\n                error.response = response;\n                throw error;\n            }\n        }, \n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(reagents => dispatch(renderDeletedReagents(reagents)))\n        .catch(error => dispatch(reagentsFailed(error.message)));\n}\n\nexport const reagentsLoading = () => ({\n    type: ActionTypes.REAGENTS_LOADING\n});\n\nexport const renderReagents = (reagents) => ({\n    type: ActionTypes.RENDER_REAGENTS,\n    payload: reagents\n});\n\nexport const renderDeletedReagents = (deletedReagents) => ({\n    type: ActionTypes.RENDER_DELETED_REAGENTS,\n    payload: deletedReagents\n});\n\nexport const reagentsFailed = (errmess) => ({\n    type: ActionTypes.REAGENTS_FAILED,\n    payload: errmess\n});\n\n// POST\nexport const postReagent = (\n    unit,\n    reagentName,\n    supplier,\n    lotNr,\n    catNr,\n    expiryDate,\n    dateReceived,\n    storageLocation\n) => (dispatch) => {\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n\n    const newReagent = {\n        unit: unit,\n        reagentName: reagentName,\n        supplier: supplier,\n        lotNr: lotNr,\n        catNr: catNr,\n        expiryDate: expiryDate,\n        dateReceived: dateReceived,\n        storageLocation: storageLocation\n    }\n\n    return fetch(baseUrl + 'reagents', {\n        method: 'POST',\n        body: JSON.stringify(newReagent),\n        headers: { \n            'Content-Type':'application/json',\n            'Authorization': bearer\n        },\n        credentials: 'same-origin'\n        })\n        .then(response => {\n            if (response.ok) {\n                return response\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText)\n                error.response = response;\n                throw error;\n            }\n        }, \n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(response => dispatch(addReagent(response)))\n        .catch(error => { console.log('Post reagents', error.message) \n            alert('Reagent could not be posted\\nError: '+ error.message)})\n}\n\nexport const addReagent = (reagent) => ({\n    type: ActionTypes.ADD_REAGENT,\n    payload: reagent\n});\n\n// PUT\nexport const putReagent = (\n    updatedReagent, action = \"\"\n) => (dispatch) => {\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n    \n    return fetch(baseUrl + 'reagents/' + updatedReagent._id \n    + \"?action=\" + action, {\n        method: 'PUT',\n        body: JSON.stringify(updatedReagent),\n        headers: { \n            'Content-Type':'application/json',\n            'Authorization': bearer\n        },\n        credentials: 'same-origin'\n        })\n        .then(response => {\n            if (response.ok) {\n                return response\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText)\n                error.response = response;\n                throw error;\n            }\n        }, \n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(response => {dispatch(updateReagent(response))})\n        .catch(error => { console.log('Post reagents', error.message) \n            alert('Reagent could not be posted\\nError: '+ error.message)})\n}\n\nexport const updateReagent = (reagent) => ({\n    type: ActionTypes.UPDATE_REAGENT,\n    payload: reagent\n});\n\n// DELETE\nexport const deleteReagent = (\n    reagent_id\n) => (dispatch) => {\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n    \n    return fetch(baseUrl + 'reagents/' + reagent_id, {\n        method: 'DELETE',\n        headers: { \n            'Content-Type':'application/json',\n            'Authorization': bearer\n        },\n        credentials: 'same-origin'\n        })\n        .then(response => {\n            if (response.ok) {\n                return response\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText)\n                error.response = response;\n                throw error;\n            }\n        }, \n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(response => {dispatch(removeReagent(response))})\n        .catch(error => { console.log('Delete reagents', error.message) \n            alert('Reagent could not be deleted\\nError: '+ error.message)})\n        \n}\n\nexport const removeReagent = (reagent) => ({    \n    type: ActionTypes.REMOVE_REAGENT,\n    payload: reagent\n});\n///////////////////////////////////////////////////\n\n///////////////////////////////////////////////////\n// SECONDARY REAGENTS\n///////////////////\n// GET\nexport const fetchSecReagents = (deleted=false) => (dispatch) => {\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n\n    return fetch(baseUrl + 'secondary-reagents' + \"?deleted=\" + deleted, {\n            headers: { \n                'Content-Type':'application/json',\n                'Authorization': bearer\n            },\n        })\n        .then(response => {\n            if (response.ok) {\n                return response\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText)\n                error.response = response;\n                throw error;\n            }\n        }, \n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(secReagents => dispatch(renderSecReagents(secReagents)))\n        .catch(error => dispatch(secReagentsFailed(error.message)));\n}\n\n// GET DELETED\nexport const fetchDeletedSecReagents = (deleted=true) => (dispatch) => {\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n\n    return fetch(baseUrl + 'secondary-reagents' + \"?deleted=\" + deleted, {\n            headers: { \n                'Content-Type':'application/json',\n                'Authorization': bearer\n            },\n        })\n        .then(response => {\n            if (response.ok) {\n                return response\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText)\n                error.response = response;\n                throw error;\n            }\n        }, \n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(deletedSecReagents => dispatch(renderSecDeletedReagents(deletedSecReagents)))\n        .catch(error => dispatch(secReagentsFailed(error.message)));\n}\n\nexport const secReagentsLoading = () => ({\n    type: ActionTypes.SEC_REAGENTS_LOADING\n});\n\nexport const renderSecReagents = (secReagents) => ({\n    type: ActionTypes.RENDER_SEC_REAGENTS,\n    payload: secReagents\n});\n\nexport const renderSecDeletedReagents = (deletedSecReagents) => ({\n    type: ActionTypes.RENDER_DELETED_SEC_REAGENTS,\n    payload: deletedSecReagents\n});\n\nexport const secReagentsFailed = (errmess) => ({\n    type: ActionTypes.SEC_REAGENTS_FAILED,\n    payload: errmess\n});\n\n// PUT\nexport const putSecReagent = (\n    updatedSecReagent, action = \"\"\n) => (dispatch) => {\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n    \n    return fetch(baseUrl + 'secondary-reagents/' + updatedSecReagent._id \n    + \"?action=\" + action, {\n        method: 'PUT',\n        body: JSON.stringify(updatedSecReagent),\n        headers: { \n            'Content-Type':'application/json',\n            'Authorization': bearer\n        },\n        credentials: 'same-origin'\n        })\n        .then(response => {\n            if (response.ok) {\n                return response\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText)\n                error.response = response;\n                throw error;\n            }\n        }, \n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(response => {dispatch(updateSecReagent(response))})\n        .catch(error => { console.log('Post reagents', error.message) \n            alert('Reagent could not be posted\\nError: '+ error.message)})\n}\n\nexport const updateSecReagent = (secReagent) => ({\n    type: ActionTypes.UPDATE_SEC_REAGENT,\n    payload: secReagent\n});\n\n// DELETE\nexport const deleteSecReagent = (\n    secReagent_id\n) => (dispatch) => {\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n    \n    return fetch(baseUrl + 'secondary-reagents/' + secReagent_id, {\n        method: 'DELETE',\n        headers: { \n            'Content-Type':'application/json',\n            'Authorization': bearer\n        },\n        credentials: 'same-origin'\n        })\n        .then(response => {\n            if (response.ok) {\n                return response\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText)\n                error.response = response;\n                throw error;\n            }\n        }, \n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(response => {dispatch(removeSecReagent(response))})\n        .catch(error => { console.log('Delete reagents', error.message) \n            alert('Reagent could not be deleted\\nError: '+ error.message)})\n        \n}\n\nexport const removeSecReagent = (secReagent) => ({    \n    type: ActionTypes.REMOVE_SEC_REAGENT,\n    payload: secReagent\n});\n///////////////////////////////////////////////////\n\n///////////////////////////////////////////////////\n// TESTS\n////////\n// GET\nexport const fetchTests = () => (dispatch) => {\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n\n    return fetch(baseUrl + 'tests', {\n            headers: { \n                'Content-Type':'application/json',\n                'Authorization': bearer\n            },\n        })\n        .then(response => {\n            if (response.ok) {\n                return response\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText)\n                error.response = response;\n                throw error;\n            }\n        }, \n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(tests => dispatch(renderTests(tests)))\n        .catch(error => dispatch(testsFailed(error.message)));\n}\n\nexport const testsLoading = () => ({\n    type: ActionTypes.TESTS_LOADING\n});\n\nexport const renderTests = (tests) => ({\n    type: ActionTypes.RENDER_TESTS,\n    payload: tests\n});\n\nexport const testsFailed = (errmess) => ({\n    type: ActionTypes.TESTS_FAILED,\n    payload: errmess\n});\n\n// PUT\nexport const putTest = (\n    updatedTest\n) => (dispatch) => {\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n    \n    return fetch(baseUrl + 'tests/' + updatedTest._id, {\n        method: 'PUT',\n        body: JSON.stringify(updatedTest),\n        headers: { \n            'Content-Type':'application/json',\n            'Authorization': bearer\n        },\n        credentials: 'same-origin'\n        })\n        .then(response => {\n            if (response.ok) {\n                return response\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText)\n                error.response = response;\n                throw error;\n            }\n        }, \n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(response => {dispatch(updateTest(response))})\n        .catch(error => { console.log('Post reagents', error.message) \n            alert('Reagent could not be posted\\nError: '+ error.message)})\n}\n\nexport const updateTest = (updatedTest) => ({\n    type: ActionTypes.UPDATE_TEST,\n    payload: updatedTest\n});\n\n// DELETE\nexport const deleteTest = (\n    test_id\n) => (dispatch) => {\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n    \n    return fetch(baseUrl + 'tests/' + test_id, {\n        method: 'DELETE',\n        headers: { \n            'Content-Type':'application/json',\n            'Authorization': bearer\n        },\n        credentials: 'same-origin'\n        })\n        .then(response => {\n            if (response.ok) {\n                return response\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText)\n                error.response = response;\n                throw error;\n            }\n        }, \n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(response => {dispatch(removeTest(response))})\n        .catch(error => { console.log('Delete reagents', error.message) \n            alert('Reagent could not be deleted\\nError: '+ error.message)})\n        \n}\n\nexport const removeTest = (test) => ({    \n    type: ActionTypes.REMOVE_TEST,\n    payload: test\n});\n///////////////////////////////////////////////////\n\n///////////////////////////////////////////////////\n// TEST TYPES\n/////////////\n// GET\nexport const fetchTestTypes = () => (dispatch) => {\n    \n    const bearer = 'Bearer ' + localStorage.getItem('token');\n\n    return fetch(baseUrl + 'test-types', {\n            headers: { \n                'Content-Type':'application/json',\n                'Authorization': bearer\n            },\n        })\n        .then(response => {\n            if (response.ok) {\n                return response\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText)\n                error.response = response;\n                throw error;\n            }\n        }, \n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(testTypes => dispatch(renderTestTypes(testTypes)))\n        .catch(error => dispatch(reagentsFailed(error.message)));\n}\n\nexport const testTypesLoading = () => ({\n    type: ActionTypes.TESTTYPES_LOADING\n});\n\nexport const renderTestTypes = (testTypes) => ({\n    type: ActionTypes.RENDER_TESTTYPES,\n    payload: testTypes\n});\n\nexport const testTypesFailed = (errmess) => ({\n    type: ActionTypes.TESTTYPES_FAILED,\n    payload: errmess\n});\n\n// POST\nexport const postTestType = (\n    newTestType\n) => (dispatch) => {\n    \n    const bearer = 'Bearer ' + localStorage.getItem('token');\n\n    return fetch(baseUrl + 'test-types', {\n        method: 'POST',\n        body: JSON.stringify(newTestType),\n        headers: { \n            'Content-Type':'application/json',\n            'Authorization': bearer\n        },\n        credentials: 'same-origin'\n        })\n        .then(response => {\n            if (response.ok) {\n                return response\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText)\n                error.response = response;\n                throw error;\n            }\n        }, \n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(response => dispatch(addTestType(response)))\n        .catch(error => { console.log('Post reagents', error.message) \n            alert('Reagent could not be posted\\nError: '+ error.message)})\n}\n\nexport const addTestType = (testType) => ({\n    type: ActionTypes.ADD_TESTTYPE,\n    payload: testType\n});\n\n// DELETE\nexport const deleteTestType = (\n    testType_id\n) => (dispatch) => {\n\n    const bearer = 'Bearer ' + localStorage.getItem('token');\n    \n    return fetch(baseUrl + 'test-types/' + testType_id, {\n        method: 'DELETE',\n        headers: { \n            'Content-Type':'application/json',\n            'Authorization': bearer\n        },\n        credentials: 'same-origin'\n        })\n        .then(response => {\n            if (response.ok) {\n                return response\n            }\n            else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText)\n                error.response = response;\n                throw error;\n            }\n        }, \n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n        .then(response => response.json())\n        .then(response => {dispatch(removeTestType(response))})\n        .catch(error => { console.log('Delete reagents', error.message) \n            alert('Reagent could not be deleted\\nError: '+ error.message)})\n        \n}\n\nexport const removeTestType = (testType) => ({    \n    type: ActionTypes.REMOVE_TESTTYPE,\n    payload: testType\n});\n","import React, { Component } from 'react';\nimport AccountDetails from './AccountDetails'\nimport Sidebar from './Sidebar.js';\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\nimport { Login } from './Login';\nimport Admin from './Admin';\nimport TestHistoryNEW from './TestHistoryNEW';\nimport InventoryNEW from './InventoryNEW';\nimport AssayTypes from './AssayTypes';\nimport { connect } from 'react-redux';\nimport { checkJWTToken, loginUser, logoutUser, \n    fetchUsers, postUser, putUser,\n    fetchReagents, postReagent, putReagent, deleteReagent, fetchDeletedReagents,\n    fetchSecReagents, fetchDeletedSecReagents, putSecReagent, deleteSecReagent, \n    deleteTest, fetchTests, putTest, \n    fetchTestTypes, postTestType, deleteTestType} from '../redux/ActionCreators.js'\n\n\nconst mapStateToProps = state => {\n    return {\n        reagents: state.reagents,\n        deletedReagents: state.deleteReagents,\n        secReagents: state.secReagents,\n        deletedSecReagents: state.deletedSecReagents,\n        tests: state.tests,\n        testTypes: state.testTypes,\n        users: state.users,\n        auth: state.auth\n    }     \n}\n\nconst mapDispatchToProps = (dispatch) => ({   \n    checkJWTToken: () => dispatch(checkJWTToken()), \n    loginUser: (creds) => dispatch(loginUser(creds)),\n    logoutUser: () => dispatch(logoutUser()), \n    fetchUsers: () => dispatch(fetchUsers()), \n    postUser: (user) => dispatch(postUser(user)), \n    putUser: (user, setpassword) => dispatch(putUser(user, setpassword)), \n    putReagent: (reagent, action) => {dispatch(putReagent(reagent, action))},\n    deleteReagent: (reagent_id) => {dispatch(deleteReagent(reagent_id))},\n    postReagent: (\n        unit,\n        reagentName,\n        supplier,\n        lotNr,\n        catNr,\n        expiryDate,\n        dateReceived,\n        storageLocation\n        ) => dispatch(postReagent(unit, reagentName, supplier, lotNr, catNr, expiryDate, dateReceived, storageLocation)),    \n    fetchReagents: () => {dispatch(fetchReagents())},\n    fetchDeletedReagents: () => {dispatch(fetchDeletedReagents())},\n    fetchSecReagents: () => {dispatch(fetchSecReagents())},\n    fetchDeletedSecReagents: () => {dispatch(fetchDeletedSecReagents())},\n    putSecReagent: (secReagent, action) => {dispatch(putSecReagent(secReagent, action))},\n    deleteSecReagent: (secReagent_id) => {dispatch(deleteSecReagent(secReagent_id))},\n    fetchTests: () => {dispatch(fetchTests())},\n    putTest: (updatedTest) => {dispatch(putTest(updatedTest))},\n    deleteTest: (test_id) => {dispatch(deleteTest(test_id))},\n    fetchTestTypes: () => {dispatch(fetchTestTypes())},\n    postTestType: (newTestType) => {dispatch(postTestType(newTestType))},\n    deleteTestType: (testType_id) => {dispatch(deleteTestType(testType_id))},\n});\n\nclass Main extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        if(this.props.auth.isAuthenticated) {\n            this.props.fetchUsers();\n            this.props.fetchReagents();\n            this.props.fetchDeletedReagents();\n            this.props.fetchSecReagents();\n            this.props.fetchDeletedSecReagents();\n            this.props.fetchTests();\n            this.props.fetchTestTypes();\n            this.props.checkJWTToken();\n            //alert(JSON.stringify(this.props.auth.user))\n        } \n        //alert(\"Mounted\")\n        \n    }\n\n    render() {\n        const InventoryPage = () => {\n            return(\n                <InventoryNEW\n                    auth={this.props.auth} \n                    logoutUser={this.props.logoutUser}\n                    // Primary Reagents\n                    reagents={this.props.reagents.reagents}\n                    deletedReagents={this.props.reagents.deletedReagents}\n                    fetchReagents={this.props.fetchReagents} \n                    reagentsErrMess={this.props.reagents.errMess}\n                    reagentsLoading={this.props.reagents.isLoading}\n                    postReagent={this.props.postReagent}\n                    deleteReagent={this.props.deleteReagent} \n                    putReagent={this.props.putReagent}\n                    // Secondary Reagents\n                    secReagents={this.props.secReagents.secReagents} \n                    deletedSecReagents={this.props.secReagents.deletedSecReagents}\n                    fetchSecReagents={this.props.fetchSecReagents}\n                    secReagentsErrMess={this.props.secReagents.errMess}\n                    secReagentsLoading={this.props.secReagents.isLoading}\n                    deleteSecReagent={this.props.deleteSecReagent} \n                    putSecReagent={this.props.putSecReagent}\n                    />\n            );\n        }\n\n        const TestHistoryPage = () => {\n            return(\n                <TestHistoryNEW \n                    auth={this.props.auth}\n                    logoutUser={this.props.logoutUser}\n                    tests={() => this.props.tests.tests.filter(entry => entry.status != \"DELETED\")}\n                    deletedTests={() => this.props.tests.tests.filter(entry => entry.status == \"DELETED\")}\n                    myTests={() => (this.props.tests.tests.filter(entry => entry.conductedByUsername == this.props.auth.user.username && entry.status != \"DELETED\"))} \n                    myDeletedTests={() => (this.props.tests.tests.filter(entry => entry.conductedByUsername == this.props.auth.user.username && entry.status != \"DELETED\"))} \n                    testsErrMess={this.props.tests.errMess} \n                    testsLoading={this.props.tests.isLoading}\n                    fetchTests={this.props.fetchTests}\n                    putTest={this.props.putTest}\n                    deleteTest={this.props.deleteTest} />\n            );\n        }\n\n        const AssayTypesPage = () => {\n            return(\n                <AssayTypes testTypes={this.props.testTypes.testTypes} \n                    testTypesErrMess={this.props.testTypes.errMess} \n                    postTestType={this.props.postTestType}\n                    deleteTestType={this.props.deleteTestType}\n                    logoutUser={this.props.logoutUser}/>\n            );\n        }\n\n        const AdminPage = () => {\n            return(\n                <Admin users={this.props.users.users} \n                    putUser={this.props.putUser}\n                    postUser={this.props.postUser}\n                    fetchUsers={this.props.testTypes.errMess} \n                    usersErrMess={this.props.usersErrMess}\n                    logoutUser={this.props.logoutUser}/>\n            );\n        }\n\n\n        const PrivateRoute = ({ component: Component, ...rest }) => (\n            <Route {...rest} render={(props) => (\n              this.props.auth.isAuthenticated\n                ? <Component {...props} />\n                : <Redirect to={{\n                    pathname: '/login',\n                    state: { from: props.location }\n                  }} />\n            )} />\n        );\n\n        const ProtectedRoute = ({ component: Component, ...rest }) => (\n            <Route {...rest} render={(props) => (\n              this.props.auth.isAuthenticated && JSON.parse(localStorage.getItem('userData')).supervisor\n                ? <Component {...props} />\n                : <Redirect to={{\n                    pathname: '/',\n                    state: { from: props.location }\n                  }} />\n            )} />\n        );\n\n        const AdminRoute = ({ component: Component, ...rest }) => (\n            <Route {...rest} render={(props) => (\n              this.props.auth.isAuthenticated && JSON.parse(localStorage.getItem('userData')).admin\n                ? <Component {...props} />\n                : <Redirect to={{\n                    pathname: '/',\n                    state: { from: props.location }\n                  }} />\n            )} />\n        );\n\n        return(\n                <>\n                <Switch>\n                    <Route path=\"/login\" \n                        component={() => \n                            (<Login \n                                auth={this.props.auth} \n                                checkJWTToken = {this.props.checkJWTToken}\n                                loginUser={this.props.loginUser} \n                                logoutUser={this.props.logoutUser}\n                                fetchUsers={this.props.fetchUsers}\n                                fetchReagents={this.props.fetchReagents}\n                                fetchDeletedReagents={this.props.fetchDeletedReagents}\n                                fetchSecReagents={this.props.fetchSecReagents}\n                                fetchDeletedSecReagents={this.props.fetchDeletedSecReagents}\n                                fetchTests={this.props.fetchTests}\n                                fetchTestTypes={this.props.fetchTestTypes}/>)}/>\n                    {/*<Route path=\"/inventory\" component={InventoryPage}/>*/}\n                    <PrivateRoute exact path=\"/inventory/primary-reagents/overview\" component={InventoryPage}/>\n                    <PrivateRoute exact path=\"/inventory/primary-reagents/recent\" component={InventoryPage}/>\n                    <PrivateRoute exact path=\"/inventory/primary-reagents/deleted\" component={InventoryPage}/>\n                    <PrivateRoute exact path=\"/inventory/secondary-reagents/overview\" component={InventoryPage}/>\n                    <PrivateRoute exact path=\"/inventory/secondary-reagents/recent\" component={InventoryPage}/>\n                    <PrivateRoute exact path=\"/inventory/secondary-reagents/deleted\" component={InventoryPage}/>\n                    <PrivateRoute exact path=\"/testhistory/all-tests/overview\" component={TestHistoryPage}/>\n                    <PrivateRoute exact path=\"/testhistory/all-tests/recent\" component={TestHistoryPage}/>\n                    <PrivateRoute exact path=\"/testhistory/all-tests/deleted\" component={TestHistoryPage}/>\n                    <PrivateRoute exact path=\"/testhistory/my-tests/overview\" component={TestHistoryPage}/>\n                    <PrivateRoute exact path=\"/testhistory/my-tests/recent\" component={TestHistoryPage}/>\n                    <PrivateRoute exact path=\"/testhistory/my-tests/deleted\" component={TestHistoryPage}/>\n                    <ProtectedRoute exact path=\"/assays\" component={AssayTypesPage}/>\n                    <PrivateRoute exact path=\"/account\" component={() => <AccountDetails \n                                                                            auth={this.props.auth} \n                                                                            logoutUser={this.props.logoutUser}\n                                                                            putUser={this.props.putUser}/>}/>\n                    <AdminRoute exact path=\"/admin\" component={AdminPage}/> \n                    <Redirect to=\"/inventory/primary-reagents/overview\" />\n                </Switch>\n                </>\n        );\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","import * as ActionTypes from './ActionTypes';\n\n// The auth reducer. The starting state sets authentication\n// based on a token being in local storage. In a real app,\n// we would also want a util to check if the token is expired.\nexport const Auth = (state = {\n        isLoading: false,\n        isAuthenticated: localStorage.getItem('token') ? true : false,\n        token: localStorage.getItem('token'),\n        user: localStorage.getItem('userData') ? JSON.parse(localStorage.getItem('userData')) : null,\n        errMess: null\n    }, action) => {\n    switch (action.type) {\n        case ActionTypes.LOGIN_REQUEST:\n            return {...state,\n                isLoading: true,\n                isAuthenticated: false,\n                user: action.creds\n            };\n        case ActionTypes.LOGIN_SUCCESS:\n            return {...state,\n                isLoading: false,\n                isAuthenticated: true,\n                errMess: '',\n                token: action.token\n            };\n        case ActionTypes.LOGIN_FAILURE:\n            return {...state,\n                isLoading: false,\n                isAuthenticated: false,\n                errMess: action.message\n            };\n        case ActionTypes.LOGOUT_REQUEST:\n            return {...state,\n                isLoading: true,\n                isAuthenticated: true\n            };\n        case ActionTypes.LOGOUT_SUCCESS:\n            return {...state,\n                isLoading: false,\n                isAuthenticated: false,\n                token: '',\n                user: null\n            };\n        default:\n            return state\n    }\n}","import * as ActionTypes from './ActionTypes';\n\nexport const Users = (state = {\n        isLoading: true,\n        errMess: null,\n        users: []\n    }, action) => {\n    switch(action.type) {\n        case ActionTypes.RENDER_USERS:\n            return {...state, isLoading: false, errMess: null, users: action.payload}\n        \n        case ActionTypes.USERS_LOADING:\n            return {...state, isLoading: true, errMess: null, users: []}\n    \n        case ActionTypes.USERS_FAILED:\n            return {...state, isLoading: false, errMess: action.payload, users: []}\n    \n        case ActionTypes.ADD_USER:\n            var user = action.payload;\n            return {...state, users: state.users.concat(user)};\n        \n        case ActionTypes.UPDATE_USER:\n            var user = action.payload;\n\n            var usersCopy = state.users.slice()\n            var foundIndex = usersCopy.findIndex(entry => entry._id == user._id);\n            usersCopy[foundIndex] = user;\n\n            return {...state, users: usersCopy}\n        \n        default:\n            return state;\n    }\n}","import * as ActionTypes from './ActionTypes';\n\nexport const Reagents = (state = {\n    errMess: null,\n    isLoading: true,\n    reagents: [],\n    deletedReagents: []\n}, action) => {\n    switch(action.type) {\n        case ActionTypes.RENDER_REAGENTS:\n            console.log(action.payload);\n            return {...state, isLoading: false, errMess: null, reagents: action.payload}\n        \n        case ActionTypes.RENDER_DELETED_REAGENTS:\n            console.log(action.payload);\n            return {...state, isLoading: false, errMess: null, deletedReagents: action.payload}\n        \n        case ActionTypes.REAGENTS_LOADING:\n            return {...state, isLoading: true, errMess: null, reagents: [], deletedReagents: []}\n\n        case ActionTypes.REAGENTS_FAILED:\n            return {...state, isLoading: false, errMess: action.payload, reagents: [], deletedReagents: []}\n\n        case ActionTypes.ADD_REAGENT:\n            var reagent = action.payload;\n            return {...state, reagents: state.reagents.concat(reagent)};\n\n        case ActionTypes.UPDATE_REAGENT:\n            var reagent = action.payload;\n\n            if (reagent.status == \"DELETED\") {\n                return {...state, reagents: state.reagents.filter(\n                            item => item._id !== reagent._id\n                        ), deletedReagents: state.deletedReagents.concat(reagent)};\n            }\n            else {\n                var reagentsCopy = state.reagents.slice()\n                var foundIndex = reagentsCopy.findIndex(entry => entry._id == reagent._id);\n                reagentsCopy[foundIndex] = reagent;\n\n                var deletedReagentsCopy = state.deletedReagents.filter(\n                    item => item._id !== reagent._id\n                )\n\n                return {...state, reagents: reagentsCopy, deletedReagents: deletedReagentsCopy}\n            }\n       \n        case ActionTypes.REMOVE_REAGENT:\n            var reagent = action.payload._id;\n            return {...state, reagents: state.reagents.filter(\n                item => item._id !== reagent\n            )};\n\n        default:\n            return state;\n    }\n}","import * as ActionTypes from './ActionTypes';\n\nexport const SecReagents = (state = {\n    errMess: null,\n    isLoading: true,\n    secReagents: [],\n    deletedSecReagents: []\n}, action) => {\n    switch(action.type) {\n        case ActionTypes.RENDER_SEC_REAGENTS:\n            console.log(action.payload);\n            return {...state, isLoading: false, errMess: null, secReagents: action.payload}\n\n        case ActionTypes.RENDER_DELETED_SEC_REAGENTS:\n            console.log(action.payload);\n            return {...state, isLoading: false, errMess: null, deletedSecReagents: action.payload}\n        \n        case ActionTypes.SEC_REAGENTS_LOADING:\n            return {...state, isLoading: true, errMess: null, secReagents: [], deletedSecReagents: []}\n\n        case ActionTypes.SEC_REAGENTS_FAILED:\n            return {...state, isLoading: false, errMess: action.payload, secReagents: [], deletedSecReagents: []}\n\n        case ActionTypes.UPDATE_SEC_REAGENT:\n            var secReagent = action.payload;\n            if (secReagent.status == \"DELETED\") {\n                return {...state, secReagents: state.secReagents.filter(\n                            item => item._id !== secReagent._id\n                        ), deletedSecReagents: state.deletedSecReagents.concat(secReagent)};\n            }\n            else {\n                var secReagentsCopy = state.secReagents.slice()\n                var foundIndex = secReagentsCopy.findIndex(entry => entry._id == secReagent._id);\n                secReagentsCopy[foundIndex] = secReagent;\n\n                var deletedSecReagentsCopy = state.deletedSecReagents.filter(\n                    item => item._id !== secReagent._id\n                )\n\n                return {...state, secReagents: secReagentsCopy, deletedSecReagents: deletedSecReagentsCopy}\n            }\n       \n        case ActionTypes.REMOVE_SEC_REAGENT:\n            var secReagent = action.payload._id;\n            return {...state, secReagents: state.secReagents.filter(\n                item => item._id !== secReagent\n            )};\n\n        default:\n            return state;\n    }\n}","import * as ActionTypes from './ActionTypes';\n\nexport const Tests = (state = {\n        isLoading: true,\n        errMess: null,\n        tests: []\n    }, action) => {\n    switch(action.type) {\n        case ActionTypes.RENDER_TESTS:\n            return {...state, isLoading: false, errMess: null, tests: action.payload}\n\n        case ActionTypes.TESTS_LOADING:\n           return {...state, isLoading: true, errMess: null, tests: []}\n\n        case ActionTypes.TESTS_FAILED:\n            return {...state, isLoading: false, errMess: action.payload, tests: []}\n\n        case ActionTypes.UPDATE_TEST:\n            var test = action.payload;\n\n            if (test.status == \"DELETED\") {\n                return {...state, tests: state.tests.filter(\n                            item => item._id !== test._id\n                        )};\n            }\n\n        case ActionTypes.REMOVE_TEST:\n            var test = action.payload._id;\n            return {...state, tests: state.tests.filter(\n                item => item._id !== test\n            )};\n\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport Main from './components/Main'\nimport './App.css';\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {ConfigureStore} from './redux/ConfigureStore';\n\nconst store = ConfigureStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <div className=\"App\">\n          <Main />\n        </div>\n      </BrowserRouter>    \n    </Provider>    \n  );\n}\n\n\nexport default App;\n","import {createStore, combineReducers, applyMiddleware} from 'redux';\nimport { Auth } from './auth';\nimport { Users } from \"./users\";\nimport { Reagents } from \"./reagents\";\nimport { SecReagents } from \"./secondaryReagents\";\nimport { Tests } from \"./tests\";\nimport { TestTypes } from \"./testTypes\";\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\nexport const ConfigureStore = () => {\n    const store = createStore(\n        combineReducers({\n            reagents: Reagents,\n            secReagents: SecReagents,\n            tests: Tests,\n            testTypes: TestTypes,\n            auth: Auth,\n            users: Users\n        }),\n        // supply as args, once we do it they become available within the app\n        applyMiddleware(thunk, logger)\n    );\n\n    return store;\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  //<React.StrictMode>\n    <App />\n  //</React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}